"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// index.ts
var import_node_sdk7 = require("@taqueria/node-sdk");

// main.ts
var import_node_sdk6 = require("@taqueria/node-sdk");

// client.ts
var import_node_sdk2 = require("@taqueria/node-sdk");

// common.ts
var import_node_sdk = require("@taqueria/node-sdk");
var import_path = require("path");
var getFlextesaImage = (_arch) => "oxheadalpha/flextesa:20230607";
var FLEXTESA_IMAGE_ENV_VAR = "TAQ_FLEXTESA_IMAGE";
var getClientDockerImage = () => (0, import_node_sdk.getDockerImage)(getFlextesaImage((0, import_node_sdk.getArchSync)()), FLEXTESA_IMAGE_ENV_VAR);
var ENDPOINT = process.env["TAQ_TEZOS_CLIENT_RPC"] ?? "https://rpc.ghostnet.teztnets.xyz";
var GLOBAL_OPTIONS = `--endpoint ${ENDPOINT}`;
var trimTezosClientMenuIfPresent = (msg) => {
  return msg.replace(/Usage:(.|\n)+/, "");
};
var getInputFilename = (opts, sourceFile) => (0, import_path.join)("/project", opts.config.artifactsDir ?? "artifacts", sourceFile);
var getCheckFileExistenceCommand = async (parsedArgs, sourceFile) => {
  const projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;
  if (!projectDir)
    throw `No project directory provided`;
  const arch = (0, import_node_sdk.getArchSync)();
  const baseCmd = `docker run --rm -v "${projectDir}":/project -w /project --platform ${arch} ${getClientDockerImage()} ls`;
  const inputFile = getInputFilename(parsedArgs, sourceFile);
  const cmd = `${baseCmd} ${inputFile}`;
  return cmd;
};

// client.ts
var getArbitraryClientCmd = async (parsedArgs, userArgs) => {
  const projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;
  if (!projectDir)
    throw `No project directory provided`;
  const arch = await (0, import_node_sdk2.getArch)();
  const flextesaImage = getClientDockerImage();
  const binary = "docker";
  const baseArgs = [
    "run",
    "--rm",
    "-v",
    `${projectDir}:/project`,
    "-w",
    "/project",
    "--platform",
    arch,
    flextesaImage,
    "octez-client"
  ];
  const processedUserArgs = userArgs.split(" ").map((arg) => arg.startsWith("\\-") ? arg.substring(1) : arg).filter(
    (arg) => arg
  );
  const args = baseArgs.concat(processedUserArgs);
  const envVars = {};
  return [
    [binary, ...args].join(" "),
    envVars
  ];
};
var runArbitraryClientCmd = (parsedArgs, cmd) => getArbitraryClientCmd(parsedArgs, cmd).then(([cmd2, envVars]) => (0, import_node_sdk2.spawnCmd)(cmd2, envVars)).then(
  (code) => code !== null && code === 0 ? `Command "${cmd}" ran successfully by octez-client` : `Command "${cmd}" failed. Please check your command`
).catch((err) => (0, import_node_sdk2.sendAsyncErr)(`An internal error has occurred: ${err.message}`));
var client = (parsedArgs) => {
  const args = parsedArgs.command;
  return runArbitraryClientCmd(parsedArgs, args).then(import_node_sdk2.sendRes).catch((err) => (0, import_node_sdk2.sendAsyncErr)(err, false));
};
var client_default = client;

// simulate.ts
var import_node_sdk3 = require("@taqueria/node-sdk");
var import_path2 = require("path");
var getDefaultStorageFilename = (contractName) => {
  const baseFilename = (0, import_path2.basename)(contractName, (0, import_path2.extname)(contractName));
  const extFilename = (0, import_path2.extname)(contractName);
  const defaultStorage = `${baseFilename}.default_storage${extFilename}`;
  return defaultStorage;
};
var getSimulateCmd = async (parsedArgs, sourceFile) => {
  var _a;
  const projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;
  if (!projectDir)
    throw `No project directory provided`;
  const storageFilename = parsedArgs.storage ?? getDefaultStorageFilename(sourceFile);
  const storage = (_a = await (0, import_node_sdk3.getContractContent)(parsedArgs, storageFilename)) == null ? void 0 : _a.trim();
  if (storage === void 0) {
    return Promise.reject(
      new Error(
        `\u274C No initial storage file was found for ${sourceFile}
Storage must be specified in a file as a Michelson expression and will automatically be linked to this contract if specified with the name "${getDefaultStorageFilename(sourceFile)}" in the artifacts directory
You can also manually pass a storage file to the simulate task using the --storage STORAGE_FILE_NAME option
`
      )
    );
  }
  const paramFilename = parsedArgs.param;
  const param = (await (0, import_node_sdk3.getParameter)(parsedArgs, paramFilename)).trim();
  const arch = await (0, import_node_sdk3.getArch)();
  const flextesaImage = getClientDockerImage();
  const baseCmd = `docker run --rm -v "${projectDir}":/project -w /project --platform ${arch} ${flextesaImage}`;
  const inputFile = getInputFilename(parsedArgs, sourceFile);
  const entrypoint = parsedArgs.entrypoint ? `--entrypoint ${parsedArgs.entrypoint}` : "";
  const cmd = `${baseCmd} octez-client ${GLOBAL_OPTIONS} run script ${inputFile} on storage '${storage}' and input '${param}' ${entrypoint}`;
  return cmd;
};
var simulateContract = (parsedArgs, sourceFile) => getCheckFileExistenceCommand(parsedArgs, sourceFile).then(import_node_sdk3.execCmd).then(
  () => getSimulateCmd(parsedArgs, sourceFile).then(import_node_sdk3.execCmd).then(({ stdout, stderr }) => {
    if (stderr.length > 0)
      (0, import_node_sdk3.sendWarn)(`
${stderr}`);
    return {
      contract: sourceFile,
      result: stdout
    };
  }).catch((err) => {
    (0, import_node_sdk3.sendErr)(`
=== For ${sourceFile} ===`);
    const msg = trimTezosClientMenuIfPresent(err.message);
    (0, import_node_sdk3.sendErr)(msg.replace(/Command failed.+?\n/, ""));
    return {
      contract: sourceFile,
      result: "Invalid"
    };
  })
).catch((err) => {
  (0, import_node_sdk3.sendErr)(`
=== For ${sourceFile} ===`);
  (0, import_node_sdk3.sendErr)(err.message.replace(/Command failed.+?\n/, ""));
  return {
    contract: sourceFile,
    result: "N/A"
  };
});
var simulate = (parsedArgs) => {
  const sourceFile = (0, import_node_sdk3.addTzExtensionIfMissing)(parsedArgs.sourceFile);
  return simulateContract(parsedArgs, sourceFile).then((result) => [result]).then(import_node_sdk3.sendJsonRes).catch(
    (err) => (0, import_node_sdk3.sendAsyncErr)(err, false)
  );
};
var simulate_default = simulate;

// typecheck.ts
var import_node_sdk4 = require("@taqueria/node-sdk");
var getTypecheckCmd = async (parsedArgs, sourceFile) => {
  const projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;
  if (!projectDir)
    throw `No project directory provided`;
  const arch = await (0, import_node_sdk4.getArch)();
  const flextesaImage = getClientDockerImage();
  const baseCmd = `docker run --rm -v "${projectDir}":/project -w /project --platform ${arch} ${flextesaImage}`;
  const inputFile = getInputFilename(parsedArgs, sourceFile);
  const cmd = `${baseCmd} octez-client ${GLOBAL_OPTIONS} typecheck script ${inputFile}`;
  return cmd;
};
var typecheckContract = (parsedArgs, sourceFile) => getCheckFileExistenceCommand(parsedArgs, sourceFile).then(import_node_sdk4.execCmd).then(
  () => getTypecheckCmd(parsedArgs, sourceFile).then(import_node_sdk4.execCmd).then(({ stderr }) => {
    if (stderr.length > 0)
      (0, import_node_sdk4.sendWarn)(stderr);
    return {
      contract: sourceFile,
      result: "Valid"
    };
  }).catch((err) => {
    (0, import_node_sdk4.sendErr)(`
=== For ${sourceFile} ===`);
    const msg = trimTezosClientMenuIfPresent(err.message);
    (0, import_node_sdk4.sendErr)(msg.replace(/Command failed.+?\n/, ""));
    return {
      contract: sourceFile,
      result: "Invalid"
    };
  })
).catch((err) => {
  (0, import_node_sdk4.sendErr)(`
=== For ${sourceFile} ===`);
  (0, import_node_sdk4.sendErr)(err.message.replace(/Command failed.+?\n/, ""));
  return {
    contract: sourceFile,
    result: "N/A"
  };
});
var typecheck = (parsedArgs) => {
  const sourceFile = (0, import_node_sdk4.addTzExtensionIfMissing)(parsedArgs.sourceFile);
  return typecheckContract(parsedArgs, sourceFile).then((result) => [result]).then(import_node_sdk4.sendJsonRes).catch(
    (err) => (0, import_node_sdk4.sendAsyncErr)(err, false)
  );
};
var typecheck_default = typecheck;

// typecheckAll.ts
var import_node_sdk5 = require("@taqueria/node-sdk");
var import_fast_glob = __toESM(require("fast-glob"));
var import_path3 = require("path");
var compileAll = async (parsedArgs) => {
  let p = [];
  const contractFilenames = await (0, import_fast_glob.default)(
    ["**/*.tz"],
    { cwd: (0, import_path3.join)(parsedArgs.config.projectDir, (0, import_node_sdk5.getArtifactsDir)(parsedArgs)), absolute: false }
  );
  for (const filename of contractFilenames) {
    if ((0, import_node_sdk5.isContractFile)(filename))
      p.push(typecheckContract(parsedArgs, filename));
  }
  return Promise.all(p).then(import_node_sdk5.sendJsonRes).catch((err) => (0, import_node_sdk5.sendAsyncErr)(err, false));
};
var typecheckAll_default = compileAll;

// main.ts
var main = (parsedArgs) => {
  const unsafeOpts = parsedArgs;
  switch (unsafeOpts.task) {
    case "client":
      return client_default(unsafeOpts);
    case "typecheck":
      return typecheck_default(unsafeOpts);
    case "typecheck-all":
      return typecheckAll_default(unsafeOpts);
    case "simulate":
      return simulate_default(unsafeOpts);
    case "get-image":
      return (0, import_node_sdk6.sendAsyncRes)(getClientDockerImage());
    default:
      return (0, import_node_sdk6.sendAsyncErr)(`${unsafeOpts.task} is not an understood task by the Tezos-client plugin`);
  }
};
var main_default = main;

// index.ts
import_node_sdk7.Plugin.create((i18n) => ({
  alias: "tezos-client",
  schema: "1.0",
  version: "0.1",
  tasks: [
    import_node_sdk7.Task.create({
      task: "client",
      command: "client",
      description: "This task allows you to run arbitrary octez-client native commands. Note that they might not benefit from the abstractions provided by Taqueria",
      options: [
        import_node_sdk7.Option.create({
          shortFlag: "c",
          flag: "command",
          type: "string",
          description: "The command to be passed to the underlying octez-client binary, wrapped in quotes",
          required: true
        })
      ],
      handler: "proxy",
      encoding: "none"
    }),
    import_node_sdk7.Task.create({
      task: "typecheck",
      command: "typecheck <sourceFile>",
      aliases: ["tc"],
      description: "Typecheck a Michelson contract",
      handler: "proxy",
      positionals: [
        import_node_sdk7.PositionalArg.create({
          placeholder: "sourceFile",
          description: "The name of the Michelson contract you wish to typecheck"
        })
      ],
      encoding: "json"
    }),
    import_node_sdk7.Task.create({
      task: "typecheck-all",
      command: "typecheck-all",
      description: "Typecheck all Michelson contracts in the artifacts directory",
      handler: "proxy",
      encoding: "json"
    }),
    import_node_sdk7.Task.create({
      task: "simulate",
      command: "simulate <sourceFile>",
      aliases: ["sim"],
      description: "Run a Michelson contract as a simulation",
      options: [
        import_node_sdk7.Option.create({
          flag: "storage",
          description: "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
          required: false
        }),
        import_node_sdk7.Option.create({
          flag: "param",
          description: "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
          required: true
        }),
        import_node_sdk7.Option.create({
          flag: "entrypoint",
          description: "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
          required: false
        })
      ],
      handler: "proxy",
      positionals: [
        import_node_sdk7.PositionalArg.create({
          placeholder: "sourceFile",
          description: "The name of the Michelson contract you wish to simulate"
        })
      ],
      encoding: "json"
    }),
    import_node_sdk7.Task.create({
      task: "get-image",
      command: "get-image",
      description: "Gets the name of the image to be used",
      handler: "proxy",
      hidden: true
    })
  ],
  proxy: main_default
}), process.argv);
//# sourceMappingURL=index.js.map