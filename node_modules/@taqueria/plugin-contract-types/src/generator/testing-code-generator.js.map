{"version":3,"sources":["testing-code-generator.ts"],"sourcesContent":["export { normalizeContractName } from './contract-name';\nimport { TypedMethod, TypedStorage } from './contract-parser';\nimport { parseContractInterface } from './process';\nimport { createTypescriptCodeGenerator } from './typescript-output';\n\ntype CodeGenerationFormatting = {\n\tindent?: number;\n\tuseSemicolons?: boolean;\n};\n\n// export type ContractTestingCodeGeneratorFactory = {\n//     /** Load the contract from it's .tz file */\n//     load: (contractTzPath: string) => ContractTestingCodeGenerator;\n// }\n// export type ContractTestingCodeGenerator = {\n\n//     /** Generate the required imports for the tests, like the contract types or type alias utilities */\n//     generateImports: () => string;\n\n//     /** Generate the code to setup the tezos toolkit, originate a contract (providing the default storage), wait for confirmation, and set the contract instance variable */\n//     generateOrigination: (args: {\n//         contractVarName?: string;\n//         formatting?: CodeGenerationFormatting;\n//     }) => { code: string };\n\n//     /** Generate the code to use the contract instance to call an endpoint (providing the default params) and wait for confirmation */\n//     generateMethodCall: (args: {\n//         methodName: string;\n//         formatting?: CodeGenerationFormatting;\n//     }) => { code: string };\n\n//     /** Generate the code to use the contract instance to get the storage value and set it to a variable */\n//     generateReadStorageValue: (actualVarName: 'actualResult' | string) => string;\n// }\n\ntype TypescriptCodeGenerator = ReturnType<typeof createTypescriptCodeGenerator>;\ntype TypedContract = {\n\tstorage: TypedStorage;\n\tmethods: TypedMethod[];\n};\n\nexport const createTestingCodeGenerator = ({\n\tcontractSource,\n\tcontractFormat,\n}: {\n\tcontractSource: string;\n\tcontractFormat: 'tz' | 'json';\n}) => {\n\tconst {\n\t\tstorage,\n\t\tmethods,\n\t} = parseContractInterface(contractSource, contractFormat);\n\n\tconst codeGenerator = createTypescriptCodeGenerator({ mode: 'defaultValue' });\n\n\tconst getMethodByName = (methodName: string) => {\n\t\tconst method = methods.find(x => x.name === methodName);\n\t\tif (!method) {\n\t\t\tthrow new Error(`Failed to fine method: ${methodName}`);\n\t\t}\n\t\treturn method;\n\t};\n\n\treturn {\n\t\tstorage,\n\t\tmethods,\n\t\tgenerateOrigination: ({\n\t\t\tcontractVarName,\n\t\t\tformatting,\n\t\t}: {\n\t\t\tcontractVarName?: string;\n\t\t\tformatting?: CodeGenerationFormatting;\n\t\t}) =>\n\t\t\tgenerateOrigination({\n\t\t\t\tcodeGenerator,\n\t\t\t\tstorage,\n\t\t\t\tindent: formatting?.indent,\n\t\t\t}),\n\t\tgenerateMethodCall: ({\n\t\t\tmethodName,\n\t\t\tformatting,\n\t\t}: {\n\t\t\tmethodName: string;\n\t\t\tformatting?: CodeGenerationFormatting;\n\t\t}) =>\n\t\t\tgenerateMethodCall({\n\t\t\t\tcodeGenerator,\n\t\t\t\tmethod: getMethodByName(methodName),\n\t\t\t\tindent: formatting?.indent,\n\t\t\t}),\n\t\tgenerateStorageAccess: ({\n\t\t\tstoragePath,\n\t\t}: {\n\t\t\tstoragePath: string;\n\t\t}) =>\n\t\t\tgenerateStorageAccess({\n\t\t\t\tcodeGenerator,\n\t\t\t\tstoragePath,\n\t\t\t}),\n\t};\n};\n\n/*\n    const Tezos = new TezosToolkit('RPC_URL');\n    let contract: ContractType = undefined as unknown as ContractType;\n    beforeAll(async () => {\n            // Originate contract\n            const origination = await Tezos.contract.originate<ContractType>({\n                    code: ContractCode.code,\n                    storage: tas.int(0),\n            });\n            const newContractResult = await origination.contract();\n            const newContractAddress = newContractResult.address;\n            contract = await Tezos.contract.at<ContractType>(newContractAddress);\n    });\n*/\nconst generateOrigination = ({\n\tcodeGenerator,\n\tstorage,\n\tindent = 2,\n\tuseSemicolons = true,\n\tcontractVarName = 'contract',\n\tminConfirmations = 3,\n}: {\n\tcodeGenerator: TypescriptCodeGenerator;\n\tstorage: TypedStorage;\n\tindent?: number;\n\tuseSemicolons?: boolean;\n\tcontractVarName?: string;\n\tminConfirmations?: number;\n}) => {\n\tconst {\n\t\ttabs,\n\t\targsToCode,\n\t} = codeGenerator;\n\n\tconst semi = useSemicolons ? ';' : '';\n\n\tconst code = `\n${tabs(indent)}const newContractOrigination = await Tezos.contract.originate<ContractType>({\n${tabs(indent + 1)}code: ContractCode.code,\n${tabs(indent + 1)}storage: ${argsToCode([{ type: storage.storage }], indent + 1, true)},\n${tabs(indent)}})${semi}\n${tabs(indent)}const newContractResult = await newContractOrigination.contract()${semi}\n${tabs(indent)}const newContractAddress = newContractResult.address${semi}\n${tabs(indent)}${contractVarName} = await Tezos.contract.at<ContractType>(newContractAddress)${semi}\n${tabs(indent)}`;\n\n\treturn {\n\t\tcode,\n\t};\n};\n\n/*\n    // methodsObject\n    contract.methodsObject.bid(tas.nat(0));\n    contract.methodsObject.configure({\n        asset: [{\n            fa2_address: tas.address(`tz123`),\n            fa2_batch: [{\n                amount: tas.nat(100),\n                token_id: tas.nat(`100000000000000`),\n            }],\n        }],\n        start_time: tas.timestamp(new Date()),\n        end_time: tas.timestamp(`2020-01-01`),\n        extend_time: tas.nat(10),\n        min_raise: tas.mutez(10),\n        min_raise_percent: tas.nat(10),\n        opening_price: tas.mutez(10),\n        round_time: tas.nat(10),\n    });\n\n    await (await contract.methods.bid(auctionId).send({\n        mutez: true,\n\n        // Not strictly typed yet\n        // amount: tas.add(current_bid, tas.mutez(1000)),\n        amount: tas.number(tas.add(current_bid, tas.mutez(1000))),\n    })).confirmation(100);\n*/\nconst generateMethodCall = ({\n\tcodeGenerator,\n\tmethod,\n\tindent = 2,\n\tuseSemicolons = true,\n\tcontractVarName = 'contract',\n\tminConfirmations = 3,\n}: {\n\tcodeGenerator: TypescriptCodeGenerator;\n\tmethod: TypedMethod;\n\tindent?: number;\n\tuseSemicolons?: boolean;\n\tcontractVarName?: string;\n\tminConfirmations?: number;\n}) => {\n\tconst {\n\t\ttabs,\n\t\targsToCode,\n\t} = codeGenerator;\n\n\tconst semi = useSemicolons ? ';' : '';\n\n\tconst code = `\n${tabs(indent)}const ${method.name}Request = await ${contractVarName}.methodsObject.${method.name}(${\n\t\targsToCode(method.args, indent + 1, true)\n\t}).send()${semi}\n${tabs(indent)}await ${method.name}Request.confirmation(${minConfirmations})${semi}\n${tabs(indent)}`;\n\n\treturn {\n\t\tcode,\n\t};\n};\n\n/*\n    const getAuctionInfo = async (id: nat) => {\n        const storage = await contract.storage();\n\n        const auctions = storage.auctions;\n        const auction = await auctions.get(id);\n        if (!auction) {\n            throw new Error(`Auction is missing`);\n        }\n        return auction;\n    };\n*/\nconst generateStorageAccess = ({\n\tcodeGenerator,\n\tstoragePath,\n\tindent = 2,\n\tuseSemicolons = true,\n\tcontractVarName = 'contract',\n\tgetStorageValueFunctionName,\n\tstorageVarName = 'storage',\n\tstorageValueVarName = 'value',\n}: {\n\tcodeGenerator: TypescriptCodeGenerator;\n\t/**\n\t * i.e.\n\t * - auctions[id]\n\t * - auctions[id].highest_bidder\n\t * - token_metadata[tokenId]\n\t * - token_metadata[tokenId].token_info['']\n\t */\n\tstoragePath: string;\n\tindent?: number;\n\tuseSemicolons?: boolean;\n\tcontractVarName?: string;\n\tgetStorageValueFunctionName?: string;\n\tstorageVarName?: string;\n\tstorageValueVarName?: string;\n}) => {\n\tconst {\n\t\ttabs,\n\t\targsToCode,\n\t} = codeGenerator;\n\n\tconst semi = useSemicolons ? ';' : '';\n\tconst funcName = getStorageValueFunctionName ?? `getStorageValue${\n\t\tstoragePath\n\t\t\t.split('.')\n\t\t\t.map(x => x.replace(/[^A-Za-z0-9]/g, ''))\n\t\t\t.map(x => `${x.substring(0, 1).toLocaleUpperCase()}${x.substring(1)}`)\n\t\t\t.join('')\n\t}`;\n\n\tconst getStorageValueExpr = `${storageVarName}`;\n\n\tconst funcCode = `\n${tabs(indent)}const ${funcName} = async () => {\n${tabs(indent + 1)}const ${storageVarName} = await ${contractVarName}.storage()${semi}\n${tabs(indent + 1)}const ${storageValueVarName} = ${getStorageValueExpr}${semi}\n${tabs(indent + 1)}return ${storageValueVarName}${semi}\n${tabs(indent)}}${semi}\n`;\n\n\treturn {\n\t\tgetStorageValueFunctionCode: funcCode,\n\t\tgetStorageValueFunctionName: funcName,\n\t};\n};\n"],"mappings":"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","names":[]}