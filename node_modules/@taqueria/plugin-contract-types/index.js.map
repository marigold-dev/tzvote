{"version":3,"sources":["index.ts","tasks.ts"],"sourcesContent":["import { Option, Plugin, PositionalArg, Task } from '@taqueria/node-sdk';\nimport { tasks } from './tasks';\nexport { generateContractTypesProcessContractFiles } from './src/cli-process';\n\nPlugin.create(i18n => ({\n\talias: 'contract-types',\n\tschema: '1.0',\n\tversion: '0.1',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'generate types',\n\t\t\tcommand: 'generate types [typescriptDir]',\n\t\t\tdescription: 'Generate types for a contract to be used with taquito',\n\t\t\tpositionals: [\n\t\t\t\tPositionalArg.create({\n\t\t\t\t\tplaceholder: 'typescriptDir',\n\t\t\t\t\tdescription: 'The output directory for the generated type files',\n\t\t\t\t\tdefaultValue: 'types',\n\t\t\t\t}),\n\t\t\t],\n\t\t\toptions: [\n\t\t\t\tOption.create({\n\t\t\t\t\tshortFlag: 't',\n\t\t\t\t\tflag: 'typeAliasMode',\n\t\t\t\t\tchoices: ['file', 'simple'],\n\t\t\t\t\tdescription: 'The type aliases used in the generated types',\n\t\t\t\t}),\n\t\t\t],\n\t\t\taliases: ['gen types', 'gentypes'],\n\t\t\thandler: 'proxy',\n\t\t}),\n\t],\n\tproxy: tasks.generateTypes,\n}), process.argv);\n","import { isContractFile, RequestArgs } from '@taqueria/node-sdk';\nimport glob from 'fast-glob';\nimport { join } from 'path';\nimport { generateContractTypesProcessContractFiles } from './src/cli-process';\ninterface Opts extends RequestArgs.t {\n\t// TODO: Document these\n\ttypescriptDir?: string;\n\ttypeAliasMode?: 'local' | 'file' | 'library' | 'simple';\n\tcontract?: string;\n}\n\nconst getContractAbspath = (contractFilename: string, parsedArgs: Opts) =>\n\tjoin(\n\t\tparsedArgs.config.artifactsDir ?? 'artifacts',\n\t\t/\\.tz$/.test(contractFilename) ? contractFilename : `${contractFilename}.tz`,\n\t);\n\nconst generateContractTypes = (parsedArgs: Opts) =>\n\tasync (contractFilename: string): Promise<string> => {\n\t\tconst contractAbspath = getContractAbspath(contractFilename, parsedArgs);\n\t\tawait generateContractTypesProcessContractFiles({\n\t\t\tinputTzContractDirectory: parsedArgs.config.artifactsDir ?? 'artifacts',\n\t\t\tinputFiles: [contractAbspath],\n\t\t\toutputTypescriptDirectory: parsedArgs.typescriptDir || 'types',\n\t\t\tformat: 'tz',\n\t\t\ttypeAliasMode: parsedArgs.typeAliasMode ?? 'file',\n\t\t});\n\n\t\treturn `${contractFilename}: Types generated`;\n\t};\n\nconst generateContractTypesAll = async (parsedArgs: Opts): Promise<string[]> => {\n\tconst files = await glob('**/*.tz', { cwd: parsedArgs.config.artifactsDir });\n\tconst contractFiles = files.filter(isContractFile);\n\treturn await Promise.all(contractFiles.map(generateContractTypes(parsedArgs)));\n};\n\nexport const generateTypes = (parsedArgs: Opts) => {\n\tparsedArgs.typescriptDir = parsedArgs.typescriptDir || 'types';\n\n\tconsole.log('generateTypes', {\n\t\ttypescriptDir: parsedArgs.typescriptDir,\n\t});\n\n\tconst p = parsedArgs.contract\n\t\t? generateContractTypes(parsedArgs)(parsedArgs.contract)\n\t\t: generateContractTypesAll(parsedArgs);\n\n\treturn p.then(data => {\n\t\tconsole.log(\n\t\t\t(Array.isArray(data))\n\t\t\t\t? data.join('\\n')\n\t\t\t\t: data,\n\t\t);\n\t});\n};\n\nexport const tasks = {\n\tgenerateTypes,\n};\n"],"mappings":";;;;;;AAAA,SAAS,QAAQ,QAAQ,eAAe,YAAY;;;ACApD,SAAS,sBAAmC;AAC5C,OAAO,UAAU;AACjB,SAAS,YAAY;AASrB,IAAM,qBAAqB,CAAC,kBAA0B,eACrD;AAAA,EACC,WAAW,OAAO,gBAAgB;AAAA,EAClC,QAAQ,KAAK,gBAAgB,IAAI,mBAAmB,GAAG;AACxD;AAED,IAAM,wBAAwB,CAAC,eAC9B,OAAO,qBAA8C;AACpD,QAAM,kBAAkB,mBAAmB,kBAAkB,UAAU;AACvE,QAAM,0CAA0C;AAAA,IAC/C,0BAA0B,WAAW,OAAO,gBAAgB;AAAA,IAC5D,YAAY,CAAC,eAAe;AAAA,IAC5B,2BAA2B,WAAW,iBAAiB;AAAA,IACvD,QAAQ;AAAA,IACR,eAAe,WAAW,iBAAiB;AAAA,EAC5C,CAAC;AAED,SAAO,GAAG;AACX;AAED,IAAM,2BAA2B,OAAO,eAAwC;AAC/E,QAAM,QAAQ,MAAM,KAAK,WAAW,EAAE,KAAK,WAAW,OAAO,aAAa,CAAC;AAC3E,QAAM,gBAAgB,MAAM,OAAO,cAAc;AACjD,SAAO,MAAM,QAAQ,IAAI,cAAc,IAAI,sBAAsB,UAAU,CAAC,CAAC;AAC9E;AAEO,IAAM,gBAAgB,CAAC,eAAqB;AAClD,aAAW,gBAAgB,WAAW,iBAAiB;AAEvD,UAAQ,IAAI,iBAAiB;AAAA,IAC5B,eAAe,WAAW;AAAA,EAC3B,CAAC;AAED,QAAM,IAAI,WAAW,WAClB,sBAAsB,UAAU,EAAE,WAAW,QAAQ,IACrD,yBAAyB,UAAU;AAEtC,SAAO,EAAE,KAAK,UAAQ;AACrB,YAAQ;AAAA,MACN,MAAM,QAAQ,IAAI,IAChB,KAAK,KAAK,IAAI,IACd;AAAA,IACJ;AAAA,EACD,CAAC;AACF;AAEO,IAAM,QAAQ;AAAA,EACpB;AACD;;;ADvDA,OAAO,OAAO,WAAS;AAAA,EACtB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,IACN,KAAK,OAAO;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,QACZ,cAAc,OAAO;AAAA,UACpB,aAAa;AAAA,UACb,aAAa;AAAA,UACb,cAAc;AAAA,QACf,CAAC;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACR,OAAO,OAAO;AAAA,UACb,WAAW;AAAA,UACX,MAAM;AAAA,UACN,SAAS,CAAC,QAAQ,QAAQ;AAAA,UAC1B,aAAa;AAAA,QACd,CAAC;AAAA,MACF;AAAA,MACA,SAAS,CAAC,aAAa,UAAU;AAAA,MACjC,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAAA,EACA,OAAO,MAAM;AACd,IAAI,QAAQ,IAAI;","names":[]}