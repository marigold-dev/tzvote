import {
  generateContractTypesProcessContractFiles
} from "./chunk-WOC2EYW3.js";
import "./chunk-L4VA7R4W.js";

// index.ts
import { Option, Plugin, PositionalArg, Task } from "@taqueria/node-sdk";

// tasks.ts
import { isContractFile } from "@taqueria/node-sdk";
import glob from "fast-glob";
import { join } from "path";
var getContractAbspath = (contractFilename, parsedArgs) => join(
  parsedArgs.config.artifactsDir ?? "artifacts",
  /\.tz$/.test(contractFilename) ? contractFilename : `${contractFilename}.tz`
);
var generateContractTypes = (parsedArgs) => async (contractFilename) => {
  const contractAbspath = getContractAbspath(contractFilename, parsedArgs);
  await generateContractTypesProcessContractFiles({
    inputTzContractDirectory: parsedArgs.config.artifactsDir ?? "artifacts",
    inputFiles: [contractAbspath],
    outputTypescriptDirectory: parsedArgs.typescriptDir || "types",
    format: "tz",
    typeAliasMode: parsedArgs.typeAliasMode ?? "file"
  });
  return `${contractFilename}: Types generated`;
};
var generateContractTypesAll = async (parsedArgs) => {
  const files = await glob("**/*.tz", { cwd: parsedArgs.config.artifactsDir });
  const contractFiles = files.filter(isContractFile);
  return await Promise.all(contractFiles.map(generateContractTypes(parsedArgs)));
};
var generateTypes = (parsedArgs) => {
  parsedArgs.typescriptDir = parsedArgs.typescriptDir || "types";
  console.log("generateTypes", {
    typescriptDir: parsedArgs.typescriptDir
  });
  const p = parsedArgs.contract ? generateContractTypes(parsedArgs)(parsedArgs.contract) : generateContractTypesAll(parsedArgs);
  return p.then((data) => {
    console.log(
      Array.isArray(data) ? data.join("\n") : data
    );
  });
};
var tasks = {
  generateTypes
};

// index.ts
Plugin.create((i18n) => ({
  alias: "contract-types",
  schema: "1.0",
  version: "0.1",
  tasks: [
    Task.create({
      task: "generate types",
      command: "generate types [typescriptDir]",
      description: "Generate types for a contract to be used with taquito",
      positionals: [
        PositionalArg.create({
          placeholder: "typescriptDir",
          description: "The output directory for the generated type files",
          defaultValue: "types"
        })
      ],
      options: [
        Option.create({
          shortFlag: "t",
          flag: "typeAliasMode",
          choices: ["file", "simple"],
          description: "The type aliases used in the generated types"
        })
      ],
      aliases: ["gen types", "gentypes"],
      handler: "proxy"
    })
  ],
  proxy: tasks.generateTypes
}), process.argv);
export {
  generateContractTypesProcessContractFiles
};
//# sourceMappingURL=index.js.map