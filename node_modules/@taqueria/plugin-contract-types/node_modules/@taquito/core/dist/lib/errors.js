"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProhibitedActionError = exports.DeprecationError = exports.InvalidOperationKindError = exports.InvalidOperationHashError = exports.InvalidKeyHashError = exports.InvalidChainIdError = exports.InvalidContractAddressError = exports.InvalidSignatureError = exports.InvalidPublicKeyError = exports.InvalidKeyError = exports.InvalidViewParameterError = exports.InvalidMessageError = exports.InvalidHexStringError = exports.InvalidDerivationPathError = exports.InvalidBlockHashError = exports.InvalidAddressError = exports.PermissionDeniedError = exports.NetworkError = exports.UnsupportedActionError = exports.TezosToolkitConfigError = exports.RpcError = exports.ParameterValidationError = exports.TaquitoError = void 0;
// ==========================================================================================
// parent error classes for Taquito
// ==========================================================================================
/**
 *  @category Error
 *  @description Parent error class all taquito errors to extend from
 */
class TaquitoError extends Error {
}
exports.TaquitoError = TaquitoError;
/**
 *  @category Error
 *  @description Error indicates invalid user inputs
 */
class ParameterValidationError extends TaquitoError {
}
exports.ParameterValidationError = ParameterValidationError;
/**
 *  @category Error
 *  @description Error returned by RPC node
 */
class RpcError extends TaquitoError {
}
exports.RpcError = RpcError;
/**
 *  @category Error
 *  @description Error indicates TezosToolKit has not been configured appropriately
 */
class TezosToolkitConfigError extends TaquitoError {
}
exports.TezosToolkitConfigError = TezosToolkitConfigError;
/**
 *  @category Error
 *  @description Error indicates a requested action is not supported by Taquito
 */
class UnsupportedActionError extends TaquitoError {
}
exports.UnsupportedActionError = UnsupportedActionError;
/**
 *  @category Error
 *  @description Error during a network operation
 */
class NetworkError extends TaquitoError {
}
exports.NetworkError = NetworkError;
/**
 *  @category Error
 *  @description Error indicates user attempts an action without necessary permissions
 */
class PermissionDeniedError extends TaquitoError {
}
exports.PermissionDeniedError = PermissionDeniedError;
// ==========================================================================================
// common error classes for Taquito
// ==========================================================================================
/**
 *  @category Error
 *  @description Error indicates an invalid originated or implicit address being passed or used
 */
class InvalidAddressError extends ParameterValidationError {
    constructor(address, errorDetail) {
        super();
        this.address = address;
        this.name = 'InvalidAddressError';
        this.message = `Invalid address "${address}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidAddressError = InvalidAddressError;
/**
 *  @category Error
 *  @description Error indicates an invalid block hash being passed or used
 */
class InvalidBlockHashError extends ParameterValidationError {
    constructor(blockHash, errorDetail) {
        super();
        this.blockHash = blockHash;
        this.name = 'InvalidBlockHashError';
        this.message = `Invalid block hash "${blockHash}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidBlockHashError = InvalidBlockHashError;
/**
 *  @category Error
 *  @description Error indicates an invalid derivation path being passed or used
 */
class InvalidDerivationPathError extends ParameterValidationError {
    constructor(derivationPath, errorDetail) {
        super();
        this.derivationPath = derivationPath;
        this.name = 'InvalidDerivationPathError';
        this.message = `Invalid derivation path "${derivationPath}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidDerivationPathError = InvalidDerivationPathError;
/**
 *  @category Error
 *  @description Error indicates an invalid hex string have been passed or used
 */
class InvalidHexStringError extends ParameterValidationError {
    constructor(hexString, errorDetail) {
        super();
        this.hexString = hexString;
        this.name = 'InvalidHexStringError';
        this.message = `Invalid hex string "${hexString}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidHexStringError = InvalidHexStringError;
/**
 *  @category Error
 *  @description Error that indicates an invalid message being passed or used
 */
class InvalidMessageError extends ParameterValidationError {
    constructor(msg, errorDetail) {
        super();
        this.msg = msg;
        this.name = 'InvalidMessageError';
        this.message = `Invalid message "${msg}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidMessageError = InvalidMessageError;
/**
 *  @category Error
 *  @description Error indicates invalid view parameter of a smart contract
 */
class InvalidViewParameterError extends ParameterValidationError {
    constructor(viewName, sigs, args, cause) {
        super();
        this.viewName = viewName;
        this.sigs = sigs;
        this.args = args;
        this.cause = cause;
        this.name = 'InvalidViewParameterError';
        this.message = `Invalid view arguments ${JSON.stringify(args)} received for name "${viewName}" expecting one of the following signatures ${JSON.stringify(sigs)}`;
    }
}
exports.InvalidViewParameterError = InvalidViewParameterError;
/**
 *  @category Error
 *  @description Error indicates an invalid private key being passed or used
 */
class InvalidKeyError extends ParameterValidationError {
    constructor(errorDetail) {
        super();
        this.errorDetail = errorDetail;
        this.name = 'InvalidKeyError';
        this.message = `Invalid private key`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidKeyError = InvalidKeyError;
/**
 *  @category Error
 *  @description Error indicates an Invalid Public Key being passed or used
 */
class InvalidPublicKeyError extends ParameterValidationError {
    constructor(publicKey, errorDetail) {
        super();
        this.publicKey = publicKey;
        this.name = 'InvalidPublicKeyError';
        this.message = `Invalid public key "${publicKey}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidPublicKeyError = InvalidPublicKeyError;
/**
 *  @category Error
 *  @description Error indicates an invalid signature being passed or used
 */
class InvalidSignatureError extends ParameterValidationError {
    constructor(signature, errorDetail) {
        super();
        this.signature = signature;
        this.name = 'InvalidSignatureError';
        this.message = `Invalid signature "${signature}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidSignatureError = InvalidSignatureError;
/**
 *  @category Error
 *  @description Error indicates an invalid contract address being passed or used
 */
class InvalidContractAddressError extends ParameterValidationError {
    constructor(contractAddress, errorDetail) {
        super();
        this.contractAddress = contractAddress;
        this.name = 'InvalidContractAddressError';
        this.message = `Invalid contract address "${contractAddress}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidContractAddressError = InvalidContractAddressError;
/**
 *  @category Error
 *  @description Error indicates an invalid chain id being passed or used
 */
class InvalidChainIdError extends ParameterValidationError {
    constructor(chainId, errorDetail) {
        super();
        this.chainId = chainId;
        this.name = 'InvalidChainIdError';
        this.message = `Invalid chain id "${chainId}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidChainIdError = InvalidChainIdError;
/**
 *  @category Error
 *  @description Error indicates an invalid public key hash being passed or used
 */
class InvalidKeyHashError extends ParameterValidationError {
    constructor(keyHash, errorDetail) {
        super();
        this.keyHash = keyHash;
        this.name = 'InvalidKeyHashError';
        this.message = `Invalid public key hash "${keyHash}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidKeyHashError = InvalidKeyHashError;
/**
 *  @category Error
 *  @description Error indicates an invalid operation hash being passed or used
 */
class InvalidOperationHashError extends ParameterValidationError {
    constructor(operationHash, errorDetail) {
        super();
        this.operationHash = operationHash;
        this.name = 'InvalidOperationHashError';
        this.message = `Invalid operation hash "${operationHash}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidOperationHashError = InvalidOperationHashError;
/**
 *  @category Error
 *  @description Error indicates an invalid operation kind being passed or used
 */
class InvalidOperationKindError extends ParameterValidationError {
    constructor(operationKind, errorDetail) {
        super();
        this.operationKind = operationKind;
        this.name = 'InvalidOperationKindError';
        this.message = `Invalid operation kind "${operationKind}"`;
        errorDetail ? (this.message += `${errorDetail}`) : null;
    }
}
exports.InvalidOperationKindError = InvalidOperationKindError;
/**
 *  @category Error
 *  @description General error that indicates something is no longer supported and/or deprecated
 */
class DeprecationError extends UnsupportedActionError {
    constructor(message) {
        super();
        this.message = message;
        this.name = 'DeprecationError';
    }
}
exports.DeprecationError = DeprecationError;
/**
 *  @category Error
 *  @description General error that indicates an action is prohibited or not allowed
 */
class ProhibitedActionError extends UnsupportedActionError {
    constructor(message) {
        super();
        this.message = message;
        this.name = 'ProhibitedActionError';
    }
}
exports.ProhibitedActionError = ProhibitedActionError;
//# sourceMappingURL=errors.js.map