import { ParameterValidationError, RpcError } from '@taquito/core';
import { HttpResponseError } from '@taquito/http-utils';
import { MichelsonV1Expression } from '@taquito/rpc';
/**
 *  @category Error
 *  @description Error indicates invalid smart contract parameters being passed or used
 */
export declare class InvalidParameterError extends ParameterValidationError {
    readonly smartContractMethodName: string;
    readonly sigs: any[];
    readonly invalidParams: any[];
    constructor(smartContractMethodName: string, sigs: any[], invalidParams: any[]);
}
/**
 *  @category Error
 *  @description Error indicates an invalid delegation source contract address being passed or used
 */
export declare class InvalidDelegationSource extends ParameterValidationError {
    readonly source: string;
    constructor(source: string);
}
/**
 *  @category Error
 *  @description Error indicates an invalid smart contract code parameter being passed or used
 */
export declare class InvalidCodeParameter extends ParameterValidationError {
    readonly message: string;
    readonly data: any;
    constructor(message: string, data: any);
}
/**
 *  @category Error
 *  @description Error indicates invalid smart contract init parameter being passed or used
 */
export declare class InvalidInitParameter extends ParameterValidationError {
    readonly message: string;
    readonly data: any;
    constructor(message: string, data: any);
}
/**
 *  @category Error
 *  @description Error indicates a failure when conducting a view simulation
 */
export declare class ViewSimulationError extends RpcError {
    readonly message: string;
    readonly viewName: string;
    readonly failWith?: MichelsonV1Expression | undefined;
    readonly cause?: any;
    constructor(message: string, viewName: string, failWith?: MichelsonV1Expression | undefined, cause?: any);
}
export declare const validateAndExtractFailwith: (error: HttpResponseError) => MichelsonV1Expression | undefined;
/**
 *  @category Error
 *  @description Error indicates invalid or unconfigured context when executing a view
 */
export declare class InvalidViewSimulationContext extends ParameterValidationError {
    readonly info: string;
    constructor(info: string);
}
/**
 *  @category Error
 *  @description Error indicates a mistake happening during the reveal operation
 */
export declare class RevealOperationError extends RpcError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error indicates a mistake in the parameters in the preparation of an Origination operation
 */
export declare class OriginationParameterError extends ParameterValidationError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error indicates an invalid balance being passed or used
 */
export declare class InvalidBalanceError extends ParameterValidationError {
    readonly message: string;
    constructor(message: string);
}
