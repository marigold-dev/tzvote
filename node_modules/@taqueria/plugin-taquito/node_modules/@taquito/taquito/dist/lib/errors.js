"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCResponseError = exports.ConfirmationTimeoutError = exports.InvalidConfirmationCountError = void 0;
const core_1 = require("@taquito/core");
/**
 *  @category Error
 *  @description Error indicates invalid confirmation count has been passed or configured
 */
class InvalidConfirmationCountError extends core_1.ParameterValidationError {
    constructor(invalidConfirmations) {
        super();
        this.invalidConfirmations = invalidConfirmations;
        this.name = 'InvalidConfirmationCountError';
        this.message = `Invalid confirmation count ${invalidConfirmations} expecting at least 1`;
    }
}
exports.InvalidConfirmationCountError = InvalidConfirmationCountError;
/**
 *  @category Error
 *  @description Error that indicates that confirmation polling timed out
 */
class ConfirmationTimeoutError extends core_1.NetworkError {
    constructor(message) {
        super();
        this.message = message;
        this.name = 'ConfirmationTimeoutError';
    }
}
exports.ConfirmationTimeoutError = ConfirmationTimeoutError;
/**
 *  @category Error
 *  @description Error indicates an error being returned from the RPC response
 */
class RPCResponseError extends core_1.RpcError {
    constructor(message, cause) {
        super();
        this.message = message;
        this.cause = cause;
        this.name = 'RPCResponseError';
    }
}
exports.RPCResponseError = RPCResponseError;
//# sourceMappingURL=errors.js.map