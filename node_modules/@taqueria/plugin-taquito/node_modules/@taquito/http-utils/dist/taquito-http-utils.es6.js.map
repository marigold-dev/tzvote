{"version":3,"file":"taquito-http-utils.es6.js","sources":["../src/fetch-adapter.ts","../src/errors.ts","../src/status_code.ts","../src/version.ts","../src/taquito-http-utils.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nconst settle = require('axios/lib/core/settle');\nconst buildURL = require('axios/lib/helpers/buildURL');\nconst buildFullPath = require('axios/lib/core/buildFullPath');\nconst { isUndefined, isStandardBrowserEnv, isFormData } = require('axios/lib/utils');\n\n/**\n * - Create a request object\n * - Get response body\n * - Check if timeout\n */\nexport default async function fetchAdapter(config: AxiosRequestConfig): Promise<AxiosResponse> {\n  const request = createRequest(config);\n  const promiseChain = [getResponse(request, config)];\n\n  if (config.timeout && config.timeout > 0) {\n    promiseChain.push(\n      new Promise((res) => {\n        setTimeout(() => {\n          const message = config.timeoutErrorMessage\n            ? config.timeoutErrorMessage\n            : 'timeout of ' + config.timeout + 'ms exceeded';\n          res(createError(message, config, 'ECONNABORTED', request));\n        }, config.timeout);\n      })\n    );\n  }\n\n  const data = await Promise.race(promiseChain);\n  return new Promise((resolve, reject) => {\n    if (data instanceof Error) {\n      reject(data);\n    } else {\n      const c: any = config;\n      'settle' in c && Object.prototype.toString.call(c.settle) === '[object Function]'\n        ? c.settle(resolve, reject, data)\n        : settle(resolve, reject, data);\n    }\n  });\n}\n\n/**\n * Fetch API stage two is to get response body. This function tries to retrieve\n * response body based on response's type\n */\nasync function getResponse(request: RequestInfo | URL, config: AxiosRequestConfig) {\n  try {\n    const stageOne = await fetch(request as any);\n\n    let response: {\n      ok: boolean;\n      status: number;\n      statusText: string;\n      headers: Headers;\n      config: AxiosRequestConfig;\n      request: RequestInfo | URL;\n      data?: unknown;\n    } = {\n      ok: stageOne.ok,\n      status: stageOne.status,\n      statusText: stageOne.statusText,\n      headers: new Headers(stageOne.headers), // Make a copy of headers\n      config: config,\n      request,\n    };\n    if (stageOne.status >= 400) {\n      return createError('Response Error', config, 'ERR_NETWORK', request, response);\n    }\n\n    response = {\n      ok: stageOne.ok,\n      status: stageOne.status,\n      statusText: stageOne.statusText,\n      headers: new Headers(stageOne.headers), // Make a copy of headers\n      config: config,\n      request,\n    };\n\n    if (stageOne.status >= 200 && stageOne.status !== 204) {\n      switch (config.responseType) {\n        case 'arraybuffer':\n          response.data = await stageOne.arrayBuffer();\n          break;\n        case 'blob':\n          response.data = await stageOne.blob();\n          break;\n        case 'json':\n          response.data = await stageOne.json();\n          break;\n        // TODO: the next option does not exist in response type\n        // case 'formData':\n        //     response.data = await stageOne.formData();\n        //     break;\n        default:\n          response.data = await stageOne.text();\n          break;\n      }\n    }\n\n    return response;\n  } catch (e) {\n    return createError('Network Error', config, 'ERR_NETWORK', request);\n  }\n}\n\n/**\n * This function will create a Request object based on configuration's axios\n */\nfunction createRequest(config: AxiosRequestConfig) {\n  const headers = new Headers(config.headers as any);\n\n  // HTTP basic authentication\n  if (config.auth) {\n    const username = config.auth.username || '';\n    const password = config.auth.password\n      ? decodeURI(encodeURIComponent(config.auth.password))\n      : '';\n    headers.set('Authorization', `Basic ${btoa(username + ':' + password)}`);\n  }\n\n  const method = config.method?.toUpperCase();\n  const options: RequestInit = {\n    headers: headers,\n    method,\n  };\n  if (method !== 'GET' && method !== 'HEAD') {\n    options.body = config.data;\n\n    // In these cases the browser will automatically set the correct Content-Type,\n    // but only if that header hasn't been set yet. So that's why we're deleting it.\n    if (isFormData(options.body) && isStandardBrowserEnv()) {\n      headers.delete('Content-Type');\n    }\n  }\n  const c = config as any;\n  if ('mode' in c) {\n    options.mode = c.mode as RequestMode;\n  }\n  if ('cache' in c) {\n    options.cache = c.cache as RequestCache;\n  }\n  if ('integrity' in c) {\n    options.integrity = c.integrity as string;\n  }\n  if ('redirect' in c) {\n    options.redirect = c.redirect as RequestRedirect;\n  }\n  if ('referrer' in c) {\n    options.referrer = c.referrer as string;\n  }\n  // This config is similar to XHRâ€™s withCredentials flag, but with three available values instead of two.\n  // So if withCredentials is not set, default value 'same-origin' will be used\n  if (!isUndefined(c.withCredentials)) {\n    options.credentials = c.withCredentials ? 'include' : 'omit';\n  }\n\n  const fullPath = buildFullPath(c.baseURL, c.url);\n  const url = buildURL(fullPath, c.params, c.paramsSerializer);\n\n  // Expected browser to throw error if there is any wrong configuration value\n  return new Request(url, options);\n}\n\n/**\n * Note:\n *\n *   From version >= 0.27.0, createError function is replaced by AxiosError class.\n *   So I copy the old createError function here for backward compatible.\n *\n *\n *\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nfunction createError(\n  message: string,\n  config: AxiosRequestConfig,\n  code?: string,\n  request?: RequestInfo | URL,\n  response?: object\n) {\n  // TODO: this code never runs\n  // if ('AxiosError' in axios && axios.AxiosError && typeof axios.AxiosError === 'function' && isConstructor(axios.AxiosError)) {\n  //     return new axios.AxiosError(message, axios.AxiosError[code], config, request, response);\n  // }\n\n  const error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n}\n\n/**\n *\n * Note:\n *\n *   This function is for backward compatible.\n *\n *\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nfunction enhanceError(\n  error: any,\n  config: AxiosRequestConfig,\n  code?: string,\n  request?: RequestInfo | URL,\n  response?: object\n) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: 'description' in this ? this.description : undefined,\n      number: 'number' in this ? this.number : undefined,\n      // Mozilla\n      fileName: 'fileName' in this ? this.fileName : undefined,\n      lineNumber: 'lineNumber' in this ? this.lineNumber : undefined,\n      columnNumber: 'columnNumber' in this ? this.columnNumber : undefined,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null,\n    };\n  };\n  return error;\n}\n","import { NetworkError } from '@taquito/core';\nimport { STATUS_CODE } from './status_code';\n\n/**\n *  @category Error\n *  @description Error indicates a general failure in making the HTTP request\n */\nexport class HttpRequestFailed extends NetworkError {\n  constructor(\n    public readonly method: string,\n    public readonly url: string,\n    public readonly cause: Error\n  ) {\n    super();\n    this.name = 'HttpRequestFailed';\n    this.message = `${method} ${url} ${String(cause)}`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error thrown when the endpoint returns an HTTP error to the client\n */\nexport class HttpResponseError extends NetworkError {\n  constructor(\n    public readonly message: string,\n    public readonly status: STATUS_CODE,\n    public readonly statusText: string,\n    public readonly body: string,\n    public readonly url: string\n  ) {\n    super();\n    this.name = 'HttpResponse';\n  }\n}\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n */\nexport enum STATUS_CODE {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  I_AM_A_TEAPOT = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"15732f9b7d575aa46427c94501fb8677a754b733\",\n    \"version\": \"17.1.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/http-utils\n */\n\nimport fetchAdapter from './fetch-adapter';\nimport { STATUS_CODE } from './status_code';\nimport axios from 'axios';\nimport { HttpRequestFailed, HttpResponseError } from './errors';\n\nconst isNode = typeof process !== 'undefined' && !!process?.versions?.node;\n\nconst adapter = isNode ? undefined : fetchAdapter;\n\nexport * from './status_code';\nexport { VERSION } from './version';\nexport { HttpRequestFailed, HttpResponseError } from './errors';\n\nenum ResponseType {\n  TEXT = 'text',\n  JSON = 'json',\n}\n\ntype ObjectType = Record<string, any>;\n\nexport interface HttpRequestOptions {\n  url: string;\n  method?: 'GET' | 'POST';\n  timeout?: number;\n  json?: boolean;\n  query?: ObjectType;\n  headers?: { [key: string]: string };\n  mimeType?: string;\n}\n\nexport class HttpBackend {\n  constructor(private timeout: number = 30000) {}\n\n  protected serialize(obj?: ObjectType) {\n    if (!obj) {\n      return '';\n    }\n\n    const str = [];\n    for (const p in obj) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n        const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\n        // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          continue;\n        }\n        // another use case is multiple arguments with the same name\n        // they are passed as array\n        if (Array.isArray(prop)) {\n          prop.forEach((item) => {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          continue;\n        }\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    }\n    const serialized = str.join('&');\n    if (serialized) {\n      return `?${serialized}`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   *\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\n   * @throws {@link HttpRequestFailed} | {@link HttpResponseError}\n   */\n  async createRequest<T>(\n    { url, method, timeout = this.timeout, query, headers = {}, json = true }: HttpRequestOptions,\n    data?: object | string\n  ) {\n    const urlWithQuery = url + this.serialize(query);\n    let resType: ResponseType;\n    let transformResponse = undefined;\n\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    if (!json) {\n      resType = ResponseType.TEXT;\n      transformResponse = [<Type>(v: Type) => v];\n    } else {\n      resType = ResponseType.JSON;\n    }\n\n    try {\n      const response = await axios.request<T>({\n        url: urlWithQuery,\n        method: method ?? 'GET',\n        headers: headers,\n        responseType: resType,\n        transformResponse,\n        timeout: timeout,\n        data: data,\n        adapter,\n      });\n\n      return response.data;\n    } catch (err: any) {\n      if ((axios.isAxiosError(err) && err.response) || (!isNode && err.response)) {\n        let errorData;\n\n        if (typeof err.response.data === 'object') {\n          errorData = JSON.stringify(err.response.data);\n        } else {\n          errorData = err.response.data;\n        }\n\n        throw new HttpResponseError(\n          `Http error response: (${err.response.status}) ${errorData}`,\n          err.response.status as STATUS_CODE,\n          err.response.statusText,\n          errorData,\n          urlWithQuery\n        );\n      } else {\n        throw new HttpRequestFailed(String(method), urlWithQuery, err);\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}