import { ParameterValidationError } from '@taquito/core';
import { OperationContents } from '@taquito/rpc';
/**
 *  @category Error
 *  @description Error indicates an invalid operation content being passed or used
 */ export declare class InvalidOperationSchemaError extends ParameterValidationError {
    readonly operation: OperationContents;
    readonly errorDetail?: string | undefined;
    constructor(operation: OperationContents, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an entrypoint name exceeding maximum length
 */
export declare class OversizedEntryPointError extends ParameterValidationError {
    readonly entrypoint: string;
    constructor(entrypoint: string);
}
/**
 *  @category Error
 *  @description Error indicates an invalid ballot value being used
 */
export declare class InvalidBallotValueError extends ParameterValidationError {
    readonly ballotValue: string;
    constructor(ballotValue: string);
}
/**
 *  @category Error
 *  @description Error indicates a failure when trying to decode ballot value
 */
export declare class DecodeBallotValueError extends ParameterValidationError {
    readonly ballotValue: string;
    constructor(ballotValue: string);
}
/**
 *  @category Error
 *  @description Error indicates unexpected Michelson Value being passed or used
 */
export declare class UnexpectedMichelsonValueError extends ParameterValidationError {
    readonly value: string;
    constructor(value: string);
}
/**
 *  @category Error
 *  @description Error indicates a failure when trying to decode an operation
 */
export declare class OperationDecodingError extends ParameterValidationError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error indicates a failure when trying to encode an operation
 */
export declare class OperationEncodingError extends ParameterValidationError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error indicates an unsupported operation being passed or used
 */
export declare class UnsupportedOperationError extends ParameterValidationError {
    readonly op: string;
    constructor(op: string);
}
/**
 * @cateogry Error
 * @description Error indicates an unsupported pvm being passed or used
 */
export declare class UnsupportedPvmKindError extends ParameterValidationError {
    readonly pvm: string;
    constructor(pvm: string);
}
/**
 * @category Error
 * @description Error indicates an unsupported pvm to decode
 */
export declare class DecodePvmKindError extends ParameterValidationError {
    readonly pvm: string;
    constructor(pvm: string);
}
/**
 * @category Error
 * @description Error indicates an invalid Smart Rollup Address (sr1)
 */
export declare class InvalidSmartRollupAddressError extends ParameterValidationError {
    readonly address: string;
    readonly errorDetail?: string | undefined;
    constructor(address: string, errorDetail?: string | undefined);
}
/**
 * @category Error
 * @description Error indicates an invalid Smart Rollup commitment hash (src1)
 */
export declare class InvalidSmartRollupCommitmentHashError extends ParameterValidationError {
    readonly hash: string;
    readonly errorDetail?: string | undefined;
    constructor(hash: string, errorDetail?: string | undefined);
}
