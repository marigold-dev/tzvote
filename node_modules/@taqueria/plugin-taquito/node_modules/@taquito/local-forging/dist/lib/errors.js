"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidSmartRollupCommitmentHashError = exports.InvalidSmartRollupAddressError = exports.DecodePvmKindError = exports.UnsupportedPvmKindError = exports.UnsupportedOperationError = exports.OperationEncodingError = exports.OperationDecodingError = exports.UnexpectedMichelsonValueError = exports.DecodeBallotValueError = exports.InvalidBallotValueError = exports.OversizedEntryPointError = exports.InvalidOperationSchemaError = void 0;
const core_1 = require("@taquito/core");
const constants_1 = require("./constants");
/**
 *  @category Error
 *  @description Error indicates an invalid operation content being passed or used
 */ class InvalidOperationSchemaError extends core_1.ParameterValidationError {
    constructor(operation, errorDetail) {
        super();
        this.operation = operation;
        this.errorDetail = errorDetail;
        this.name = 'InvalidOperationSchemaError';
        this.message = `Invalid operation content recevied`;
        errorDetail ? (this.message += ` ${errorDetail}.`) : '';
    }
}
exports.InvalidOperationSchemaError = InvalidOperationSchemaError;
/**
 *  @category Error
 *  @description Error indicates an entrypoint name exceeding maximum length
 */
class OversizedEntryPointError extends core_1.ParameterValidationError {
    constructor(entrypoint) {
        super();
        this.entrypoint = entrypoint;
        this.name = 'OversizedEntryPointError';
        this.message = `Invalid entrypoint length "${entrypoint.length}", maximum length is "${constants_1.ENTRYPOINT_MAX_LENGTH}".`;
    }
}
exports.OversizedEntryPointError = OversizedEntryPointError;
/**
 *  @category Error
 *  @description Error indicates an invalid ballot value being used
 */
class InvalidBallotValueError extends core_1.ParameterValidationError {
    constructor(ballotValue) {
        super();
        this.ballotValue = ballotValue;
        this.name = 'InvalidBallotValueError';
        this.message = `Invalid ballot value "${ballotValue}" expecting one of the following: "yay", "nay", "pass".`;
    }
}
exports.InvalidBallotValueError = InvalidBallotValueError;
/**
 *  @category Error
 *  @description Error indicates a failure when trying to decode ballot value
 */
class DecodeBallotValueError extends core_1.ParameterValidationError {
    constructor(ballotValue) {
        super();
        this.ballotValue = ballotValue;
        this.name = 'DecodeBallotValueError';
        this.message = `Invalid ballot value "${ballotValue}", cannot be decoded.`;
    }
}
exports.DecodeBallotValueError = DecodeBallotValueError;
/**
 *  @category Error
 *  @description Error indicates unexpected Michelson Value being passed or used
 */
class UnexpectedMichelsonValueError extends core_1.ParameterValidationError {
    constructor(value) {
        super();
        this.value = value;
        this.name = 'UnexpectedMichelsonValueError';
        this.message = `Invalid Michelson value "${value}", unalbe to encode.`;
    }
}
exports.UnexpectedMichelsonValueError = UnexpectedMichelsonValueError;
/**
 *  @category Error
 *  @description Error indicates a failure when trying to decode an operation
 */
class OperationDecodingError extends core_1.ParameterValidationError {
    constructor(message) {
        super();
        this.message = message;
        this.name = 'OperationDecodingError';
    }
}
exports.OperationDecodingError = OperationDecodingError;
/**
 *  @category Error
 *  @description Error indicates a failure when trying to encode an operation
 */
class OperationEncodingError extends core_1.ParameterValidationError {
    constructor(message) {
        super();
        this.message = message;
        this.name = 'OperationEncodingError';
    }
}
exports.OperationEncodingError = OperationEncodingError;
/**
 *  @category Error
 *  @description Error indicates an unsupported operation being passed or used
 */
class UnsupportedOperationError extends core_1.ParameterValidationError {
    constructor(op) {
        super();
        this.op = op;
        this.name = 'UnsupportedOperationError';
        this.message = `Unsupported operation "${op}", can submit an issue on our github for feature request.`;
    }
}
exports.UnsupportedOperationError = UnsupportedOperationError;
/**
 * @cateogry Error
 * @description Error indicates an unsupported pvm being passed or used
 */
class UnsupportedPvmKindError extends core_1.ParameterValidationError {
    constructor(pvm) {
        super();
        this.pvm = pvm;
        this.name = 'UnsupportedPvmKindError';
        this.message = `Invalid Pvm kind "${pvm}" expecting either "arith" or "wasm_2_0_0".`;
    }
}
exports.UnsupportedPvmKindError = UnsupportedPvmKindError;
/**
 * @category Error
 * @description Error indicates an unsupported pvm to decode
 */
class DecodePvmKindError extends core_1.ParameterValidationError {
    constructor(pvm) {
        super();
        this.pvm = pvm;
        this.name = 'DecodePvmKindError';
        this.message = `Invalid Pvm kind "${pvm}", cannot be decoded.`;
    }
}
exports.DecodePvmKindError = DecodePvmKindError;
/**
 * @category Error
 * @description Error indicates an invalid Smart Rollup Address (sr1)
 */
class InvalidSmartRollupAddressError extends core_1.ParameterValidationError {
    constructor(address, errorDetail) {
        super();
        this.address = address;
        this.errorDetail = errorDetail;
        this.name = 'InvalidSmartRollupAddress';
        this.message = `Invalid smart rollup address "${address}"`;
        errorDetail ? (this.message += ` ${errorDetail}.`) : '';
    }
}
exports.InvalidSmartRollupAddressError = InvalidSmartRollupAddressError;
/**
 * @category Error
 * @description Error indicates an invalid Smart Rollup commitment hash (src1)
 */
class InvalidSmartRollupCommitmentHashError extends core_1.ParameterValidationError {
    constructor(hash, errorDetail) {
        super();
        this.hash = hash;
        this.errorDetail = errorDetail;
        this.name = 'InvalidSmartRollupCommitmentHashError';
        this.message = `Invalid smart rollup commitment hash "${hash}"`;
        errorDetail ? (this.message += ` ${errorDetail}.`) : '';
    }
}
exports.InvalidSmartRollupCommitmentHashError = InvalidSmartRollupCommitmentHashError;
//# sourceMappingURL=errors.js.map