import { SaplingTransactionDeprecatedTokenSchema } from '../schema/types';
import { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';
/**
 *  @category Error
 *  @description Error that indicates a failure happening when parsing encoding/executing a Sapling Transaction Deprecated
 */
export declare class SaplingTransactionDeprecatedValidationError extends TokenValidationError {
    value: any;
    token: SaplingTransactionDeprecatedToken;
    name: string;
    constructor(value: any, token: SaplingTransactionDeprecatedToken, message: string);
}
export declare class SaplingTransactionDeprecatedToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'sapling_transaction_deprecated';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    /**
     * @throws {@link SaplingTransactionDeprecatedValidationError}
     */
    Execute(_val: any): void;
    /**
     * @throws {@link SaplingTransactionDeprecatedValidationError}
     */
    private validateBytes;
    private convertUint8ArrayToHexString;
    Encode(args: any[]): any;
    EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding): import("@taquito/rpc").MichelsonV1Expression;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): {
        sapling_transaction_deprecated: {
            'memo-size': number;
        };
    };
    generateSchema(): SaplingTransactionDeprecatedTokenSchema;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
