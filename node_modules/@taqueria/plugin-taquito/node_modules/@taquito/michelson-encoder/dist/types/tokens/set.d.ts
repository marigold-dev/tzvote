import { SetTokenSchema } from '../schema/types';
import { Token, TokenFactory, Semantic, TokenValidationError, ComparableToken, SemanticEncoding } from './token';
/**
 *  @category Error
 *  @description Error that indicates a failure happening when parsing encoding/executing a Set
 */
export declare class SetValidationError extends TokenValidationError {
    value: any;
    token: SetToken;
    name: string;
    constructor(value: any, token: SetToken, message: string);
}
export declare class SetToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'set';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    get KeySchema(): ComparableToken;
    /**
     * @throws {@link SetValidationError}
     */
    private validate;
    /**
     * @throws {@link SetValidationError}
     */
    Encode(args: any[]): any;
    Execute(val: any, semantics?: Semantic): any;
    /**
     * @throws {@link SetValidationError}
     */
    EncodeObject(args: any, semantic?: SemanticEncoding): any;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): "set";
    generateSchema(): SetTokenSchema;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
