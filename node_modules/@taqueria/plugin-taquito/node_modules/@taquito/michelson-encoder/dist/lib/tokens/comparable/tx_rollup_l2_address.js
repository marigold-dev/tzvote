"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxRollupL2AddressToken = exports.TxRollupL2AddressValidationError = void 0;
const utils_1 = require("@taquito/utils");
const token_1 = require("../token");
/**
 *  @category Error
 *  @description Error that indicates a failure happening when parsing encoding/executing a Tx Rollup L2 Address
 */
class TxRollupL2AddressValidationError extends token_1.TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'TxRollupL2AddressValidationError';
    }
}
exports.TxRollupL2AddressValidationError = TxRollupL2AddressValidationError;
class TxRollupL2AddressToken extends token_1.ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    ToBigMapKey(val) {
        const decoded = utils_1.b58decodeL2Address(val);
        return {
            key: { bytes: decoded },
            type: { prim: 'bytes' },
        };
    }
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    validate(value) {
        if (utils_1.validateAddress(value) !== utils_1.ValidationResult.VALID) {
            throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${JSON.stringify(value)}`);
        }
    }
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    Encode(args) {
        const val = args.pop();
        if (!val) {
            throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> "${JSON.stringify(val)}"`);
        }
        this.validate(val);
        return { string: val };
    }
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    EncodeObject(val, semantic) {
        this.validate(val);
        if (semantic && semantic[TxRollupL2AddressToken.prim]) {
            return semantic[TxRollupL2AddressToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`);
        }
        return utils_1.encodeL2Address(val.bytes);
    }
    ExtractSchema() {
        return TxRollupL2AddressToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: TxRollupL2AddressToken.prim,
            schema: TxRollupL2AddressToken.prim,
        };
    }
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    ToKey({ bytes, string }) {
        if (string) {
            return string;
        }
        if (!bytes) {
            throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${JSON.stringify(bytes)}`);
        }
        return utils_1.encodeL2Address(bytes);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (TxRollupL2AddressToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
exports.TxRollupL2AddressToken = TxRollupL2AddressToken;
TxRollupL2AddressToken.prim = 'tx_rollup_l2_address';
//# sourceMappingURL=tx_rollup_l2_address.js.map