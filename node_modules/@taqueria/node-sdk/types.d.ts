import { RequestArgs } from '@taqueria/protocol';
import * as Protocol from '@taqueria/protocol';
export { Protocol };
export { ProxyTaskArgs, RequestArgs } from '@taqueria/protocol';
import * as Environment from '@taqueria/protocol/Environment';
export { Environment };
import { i18n } from '@taqueria/protocol/i18n';
import * as LoadedConfig from '@taqueria/protocol/LoadedConfig';
export { LoadedConfig };
import * as MetadataConfig from '@taqueria/protocol/MetadataConfig';
export { MetadataConfig };
import * as NetworkConfig from '@taqueria/protocol/NetworkConfig';
export { NetworkConfig };
import * as Operation from '@taqueria/protocol/Operation';
export { Operation };
import * as Option from '@taqueria/protocol/Option';
export { Option };
import * as PersistentState from '@taqueria/protocol/PersistentState';
export { PersistentState };
import * as PluginSchema from '@taqueria/protocol/PluginSchema';
export { PluginSchema };
import * as PositionalArg from '@taqueria/protocol/PositionalArg';
export { PositionalArg };
import * as SandboxAccountConfig from '@taqueria/protocol/SandboxAccountConfig';
export { SandboxAccountConfig };
import * as SandboxConfig from '@taqueria/protocol/SandboxConfig';
export { SandboxConfig };
import * as SanitizedAbsPath from '@taqueria/protocol/SanitizedAbsPath';
export { SanitizedAbsPath };
import * as SanitizedPath from '@taqueria/protocol/SanitizedPath';
export { SanitizedPath };
import * as TaqError from '@taqueria/protocol/TaqError';
export { TaqError };
import * as Task from '@taqueria/protocol/Task';
export { Task };
import * as Template from '@taqueria/protocol/Template';
export { Template };

interface LikeAPromise<Success, TaqError> extends Promise<Success> {
}
type PositiveInt = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15;
type i18nMessage = string | {
    message: string;
    numOfArguments: PositiveInt;
};
interface StdIO {
    stdout: string;
    stderr: string;
}
type pluginDefiner = <T extends RequestArgs.t>(parsedArgs: T, i18n: i18n) => PluginSchema.RawPluginSchema;

export { LikeAPromise, PositiveInt, StdIO, i18nMessage, pluginDefiner };
