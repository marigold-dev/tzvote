{"version":3,"sources":["helpers.ts"],"sourcesContent":["import { TaqError, toFutureParseErr, toFutureParseUnknownErr } from './TaqError';\nimport { FutureInstance, resolve } from 'fluture';\nimport { ZodError } from 'zod';\n\nexport const parsingErrorMessages = (typeName: string) => {\n\tconst parseErrMsg = (value: unknown, previous: unknown) => {\n\t\tconst message = ['string', 'number', 'boolean'].includes(typeof value)\n\t\t\t? `${value} is not a valid ${typeName}`\n\t\t\t: `This is not a valid ${typeName}`;\n\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = `  ${path}: ${issue.message}`;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[message],\n\t\t\t);\n\t\t\treturn msgs.join('\\n') + '\\n';\n\t\t}\n\t\treturn message;\n\t};\n\n\tconst unknownErrMsg = (value: unknown) => 'Something went wrong trying to parse an ${typeName}';\n\n\treturn {\n\t\tparseErrMsg,\n\t\tunknownErrMsg,\n\t};\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAyB;AAElB,IAAM,uBAAuB,CAAC,aAAqB;AACzD,QAAM,cAAc,CAAC,OAAgB,aAAsB;AAC1D,UAAM,UAAU,CAAC,UAAU,UAAU,SAAS,EAAE,SAAS,OAAO,KAAK,IAClE,GAAG,wBAAwB,aAC3B,uBAAuB;AAE1B,QAAI,oBAAoB,qBAAU;AACjC,YAAM,OAAiB,SAAS,OAAO;AAAA,QACtC,CAAC,QAAQ,UAAU;AAClB,gBAAM,OAAO,MAAM,KAAK,KAAK,UAAK;AAClC,gBAAM,MAAM,KAAK,SAAS,MAAM;AAChC,iBAAO,CAAC,GAAG,QAAQ,GAAG;AAAA,QACvB;AAAA,QACA,CAAC,OAAO;AAAA,MACT;AACA,aAAO,KAAK,KAAK,IAAI,IAAI;AAAA,IAC1B;AACA,WAAO;AAAA,EACR;AAEA,QAAM,gBAAgB,CAAC,UAAmB;AAE1C,SAAO;AAAA,IACN;AAAA,IACA;AAAA,EACD;AACD;","names":[]}