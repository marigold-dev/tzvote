import { RequestArgs } from '@taqueria/protocol';
import * as Alias from '@taqueria/protocol/Alias';
import * as Operation from '@taqueria/protocol/Operation';
import * as Template from '@taqueria/protocol/Template';
import { PluginDependenciesResponse, PluginProxyResponse } from '@taqueria/protocol/types';
import { z } from 'zod';
declare const internalSchema: z.ZodObject<{
    version: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    name: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    alias: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodString]>, ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string), string>;
    operations: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, Operation.Operation, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">>, Operation.Operation[] | undefined, unknown>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    version: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    name: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    alias: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodString]>, ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string), string>;
    operations: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, Operation.Operation, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">>, Operation.Operation[] | undefined, unknown>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    version: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    name: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodEffects<z.ZodString, import("./VersionNumber").VersionNumber, string>;
    alias: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodString]>, ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string), string>;
    operations: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, Operation.Operation, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">>, Operation.Operation[] | undefined, unknown>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, z.ZodTypeAny, "passthrough">>;
export declare const rawSchema: z.ZodObject<{
    version: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodString;
    alias: z.ZodUnion<[z.ZodString, z.ZodString]>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString]>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[], unknown>>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    version: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodString;
    alias: z.ZodUnion<[z.ZodString, z.ZodString]>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString]>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[], unknown>>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    version: z.ZodString;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, import("./Task").Task, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">, import("./Task").Task[], unknown>>;
    schema: z.ZodString;
    alias: z.ZodUnion<[z.ZodString, z.ZodString]>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString]>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "strip", z.ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[], unknown>>;
    templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "strip", z.ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: z.objectInputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, Template.Template, {
        handler: (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: z.objectOutputType<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<{
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, z.ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>, Template.Template[] | undefined, unknown>;
}, z.ZodTypeAny, "passthrough">>;
type Input = z.infer<typeof internalSchema> & {
    proxy: <T extends RequestArgs.t>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
    checkRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;
    installRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;
};
export type RawPluginSchema = z.infer<typeof rawSchema> & {
    proxy: <T extends RequestArgs.t>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
    checkRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;
    installRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;
};
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    }, any>;
}, factory: {
    make: (input: Input) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    }>;
    create: (input: Input | RawPluginSchema) => {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    };
    from: (input: unknown) => {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    };
};
export type ParsedPluginInfo = z.infer<typeof generatedSchemas.schema>;
export type t = ParsedPluginInfo;
export declare const create: (input: Input | RawPluginSchema) => {
    version: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    name: string;
    schema: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    alias: (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string)) & (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | undefined);
    tasks?: import("./Task").Task[] | undefined;
    operations?: Operation.Operation[] | undefined;
    templates?: Template.Template[] | undefined;
} & {
    [k: string]: unknown;
} & {
    proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
    checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
    installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
} & {
    readonly __type: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    version: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    name: string;
    schema: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    alias: (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string)) & (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | undefined);
    tasks?: import("./Task").Task[] | undefined;
    operations?: Operation.Operation[] | undefined;
    templates?: Template.Template[] | undefined;
} & {
    [k: string]: unknown;
} & {
    proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
    checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
    installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
} & {
    readonly __type: any;
}>, make: (input: Input) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    version: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    name: string;
    schema: {
        __type: import("./VersionNumber").VersionNumber;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string;
    alias: (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string)) & (({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | undefined);
    tasks?: import("./Task").Task[] | undefined;
    operations?: Operation.Operation[] | undefined;
    templates?: Template.Template[] | undefined;
} & {
    [k: string]: unknown;
} & {
    proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
    checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
    installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
} & {
    readonly __type: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    }, any>, {
        version: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        name: string;
        schema: {
            __type: import("./VersionNumber").VersionNumber;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string;
        alias: (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string)) & (({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | undefined);
        tasks?: import("./Task").Task[] | undefined;
        operations?: Operation.Operation[] | undefined;
        templates?: Template.Template[] | undefined;
    } & {
        [k: string]: unknown;
    } & {
        proxy: <T extends RequestArgs.RequestArgs>(args: T) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;
        checkRuntimeDependencies?: (<T_1 extends RequestArgs.RequestArgs>(args: T_1) => PluginDependenciesResponse) | undefined;
        installRuntimeDependencies?: (<T_2 extends RequestArgs.RequestArgs>(args: T_2) => PluginDependenciesResponse) | undefined;
    } & {
        readonly __type: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
export {};
//# sourceMappingURL=PluginSchema.d.ts.map