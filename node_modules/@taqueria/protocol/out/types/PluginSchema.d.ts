import { TaqError } from '@taqueria/protocol/TaqError';
import { FutureInstance } from 'fluture';
import { PluginSchema } from '@taqueria/protocol/types';
import { PluginSchema as PluginSchemaStrict } from '@taqueria/protocol/out/types-strict';
export type { PluginSchemaStrict as PluginSchema };
export declare const from: (input: unknown) => PluginSchemaStrict;
export declare const create: (input: PluginSchema) => PluginSchemaStrict;
export declare const of: (input: unknown) => FutureInstance<TaqError, PluginSchemaStrict>;
export declare const make: (input: Omit<PluginSchemaStrict, '__type'>) => FutureInstance<TaqError, PluginSchemaStrict>;
export declare const schemas: {
    rawSchema: import("zod").ZodObject<{
        version: import("zod").ZodString;
        name: import("zod").ZodString;
        tasks: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            task: import("zod").ZodString;
            command: import("zod").ZodString;
            aliases: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>, "many">>;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            example: import("zod").ZodOptional<import("zod").ZodString>;
            hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
            encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
            handler: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodString]>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }, {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }>, "many">>;
        schema: import("zod").ZodString;
        alias: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>;
        operations: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            operation: import("zod").ZodString;
            command: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            handler: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                operations: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    hash: import("zod").ZodString;
                    time: import("zod").ZodNumber;
                    output: import("zod").ZodOptional<import("zod").ZodUnknown>;
                }, "strip", import("zod").ZodTypeAny, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>>;
                tasks: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    task: import("zod").ZodString;
                    plugin: import("zod").ZodString;
                    time: import("zod").ZodNumber;
                    output: import("zod").ZodOptional<import("zod").ZodUnknown>;
                }, "strip", import("zod").ZodTypeAny, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }>], import("zod").ZodUnknown>, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodVoid>>>;
        }, "strip", import("zod").ZodTypeAny, {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }, {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }>, "many">>;
        templates: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            template: import("zod").ZodString;
            command: import("zod").ZodString;
            description: import("zod").ZodString;
            hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
            handler: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
                data: import("zod").ZodOptional<import("zod").ZodUnknown>;
                render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
            }, "strip", import("zod").ZodTypeAny, {
                render: "string" | "none" | "table";
                data?: unknown;
            }, {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>, import("zod").ZodVoid]>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodObject<{
                data: import("zod").ZodOptional<import("zod").ZodUnknown>;
                render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
            }, "strip", import("zod").ZodTypeAny, {
                render: "string" | "none" | "table";
                data?: unknown;
            }, {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>, import("zod").ZodVoid]>>]>>, import("zod").ZodPromise<import("zod").ZodVoid>]>;
            encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
        }, "strip", import("zod").ZodTypeAny, {
            handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }, {
            handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }>, "many">>;
        proxy: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodVoid, import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>]>>>>;
        checkRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
            report: import("zod").ZodArray<import("zod").ZodObject<{
                version: import("zod").ZodString;
                path: import("zod").ZodString;
                name: import("zod").ZodString;
                kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
                met: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }>, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>>>>;
        installRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
            report: import("zod").ZodArray<import("zod").ZodObject<{
                version: import("zod").ZodString;
                path: import("zod").ZodString;
                name: import("zod").ZodString;
                kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
                met: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }>, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>>>>;
    }, "strip", import("zod").ZodTypeAny, {
        version: string;
        name: string;
        schema: string;
        alias: string;
        tasks?: {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        operations?: {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }[] | undefined;
        templates?: {
            handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }[] | undefined;
        proxy?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined;
        checkRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
        installRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
    }, {
        version: string;
        name: string;
        schema: string;
        alias: string;
        tasks?: {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        operations?: {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }[] | undefined;
        templates?: {
            handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }[] | undefined;
        proxy?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined;
        checkRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
        installRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
    }>;
    schema: import("zod").ZodEffects<import("zod").ZodObject<{
        version: import("zod").ZodString;
        name: import("zod").ZodString;
        tasks: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            task: import("zod").ZodString;
            command: import("zod").ZodString;
            aliases: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>, "many">>;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            example: import("zod").ZodOptional<import("zod").ZodString>;
            hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
            encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
            handler: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodString]>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }, {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }>, "many">>;
        schema: import("zod").ZodString;
        alias: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>;
        operations: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            operation: import("zod").ZodString;
            command: import("zod").ZodString;
            description: import("zod").ZodOptional<import("zod").ZodString>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            handler: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                operations: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    hash: import("zod").ZodString;
                    time: import("zod").ZodNumber;
                    output: import("zod").ZodOptional<import("zod").ZodUnknown>;
                }, "strip", import("zod").ZodTypeAny, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>>;
                tasks: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    task: import("zod").ZodString;
                    plugin: import("zod").ZodString;
                    time: import("zod").ZodNumber;
                    output: import("zod").ZodOptional<import("zod").ZodUnknown>;
                }, "strip", import("zod").ZodTypeAny, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }>], import("zod").ZodUnknown>, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodVoid>>>;
        }, "strip", import("zod").ZodTypeAny, {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }, {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }>, "many">>;
        templates: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            template: import("zod").ZodString;
            command: import("zod").ZodString;
            description: import("zod").ZodString;
            hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
            options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
                flag: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
                boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
                choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }, {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }>, "many">>;
            positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                placeholder: import("zod").ZodString;
                description: import("zod").ZodString;
                defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
                type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
                required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, "strip", import("zod").ZodTypeAny, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }, {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }>, "many">>;
            handler: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
                data: import("zod").ZodOptional<import("zod").ZodUnknown>;
                render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
            }, "strip", import("zod").ZodTypeAny, {
                render: "string" | "none" | "table";
                data?: unknown;
            }, {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>, import("zod").ZodVoid]>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodObject<{
                data: import("zod").ZodOptional<import("zod").ZodUnknown>;
                render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
            }, "strip", import("zod").ZodTypeAny, {
                render: "string" | "none" | "table";
                data?: unknown;
            }, {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>, import("zod").ZodVoid]>>]>>, import("zod").ZodPromise<import("zod").ZodVoid>]>;
            encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
        }, "strip", import("zod").ZodTypeAny, {
            handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }, {
            handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }>, "many">>;
        proxy: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodVoid, import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>]>>>>;
        checkRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
            report: import("zod").ZodArray<import("zod").ZodObject<{
                version: import("zod").ZodString;
                path: import("zod").ZodString;
                name: import("zod").ZodString;
                kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
                met: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }>, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>>>>;
        installRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
            report: import("zod").ZodArray<import("zod").ZodObject<{
                version: import("zod").ZodString;
                path: import("zod").ZodString;
                name: import("zod").ZodString;
                kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
                met: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }, {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }>, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }, {
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>>>>;
    }, "strip", import("zod").ZodTypeAny, {
        version: string;
        name: string;
        schema: string;
        alias: string;
        tasks?: {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        operations?: {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }[] | undefined;
        templates?: {
            handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                render: "string" | "none" | "table";
                data?: unknown;
            } | Promise<void | {
                render: "string" | "none" | "table";
                data?: unknown;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }[] | undefined;
        proxy?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined;
        checkRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
        installRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
    }, {
        version: string;
        name: string;
        schema: string;
        alias: string;
        tasks?: {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        operations?: {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }[] | undefined;
        templates?: {
            handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }[] | undefined;
        proxy?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined;
        checkRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
        installRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
    }>, PluginSchemaStrict, {
        version: string;
        name: string;
        schema: string;
        alias: string;
        tasks?: {
            handler: string;
            command: string;
            task: string;
            aliases?: string[] | undefined;
            description?: string | undefined;
            example?: string | undefined;
            hidden?: boolean | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        operations?: {
            operation: string;
            command: string;
            description?: string | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            handler?: ((args_0: {
                operations: Record<string, {
                    hash: string;
                    time: number;
                    output?: unknown;
                }>;
                tasks: Record<string, {
                    plugin: string;
                    task: string;
                    time: number;
                    output?: unknown;
                }>;
            }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
        }[] | undefined;
        templates?: {
            handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
                _: import("zod").ZodArray<import("zod").ZodString, "many">;
                projectDir: import("zod").ZodString;
                maxConcurrency: import("zod").ZodNumber;
                debug: import("zod").ZodBoolean;
                disableState: import("zod").ZodBoolean;
                logPluginRequests: import("zod").ZodBoolean;
                fromVsCode: import("zod").ZodBoolean;
                version: import("zod").ZodBoolean;
                build: import("zod").ZodBoolean;
                help: import("zod").ZodBoolean;
                yes: import("zod").ZodBoolean;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                env: import("zod").ZodString;
                setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
                setVersion: import("zod").ZodString;
                taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
                config: import("zod").ZodObject<{
                    sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        protocol: import("zod").ZodOptional<import("zod").ZodString>;
                        plugin: import("zod").ZodOptional<import("zod").ZodString>;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                            encryptedKey: import("zod").ZodString;
                            publicKeyHash: import("zod").ZodString;
                            secretKey: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }, {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }>, import("zod").ZodString]>>>;
                        tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                            disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                            apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        }, "strip", import("zod").ZodTypeAny, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }, {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        }>>;
                        annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }>>>;
                    language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                    metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                        name: import("zod").ZodOptional<import("zod").ZodString>;
                        projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                        authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                        license: import("zod").ZodOptional<import("zod").ZodString>;
                        homepage: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }, {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    }>>;
                    artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                    contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        sourceFile: import("zod").ZodString;
                        hash: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        sourceFile: string;
                        hash: string;
                    }, {
                        sourceFile: string;
                        hash: string;
                    }>>>;
                    plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                        name: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }, {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }>, "many">>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                        sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                        storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                        aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }, {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>, import("zod").ZodString]>>;
                    network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        label: import("zod").ZodString;
                        rpcUrl: import("zod").ZodString;
                        accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                            publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                            publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                            privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                            mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                        }, "strip", import("zod").ZodTypeAny, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }>>>;
                        faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                            pkh: import("zod").ZodString;
                            mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                            email: import("zod").ZodString;
                            password: import("zod").ZodString;
                            amount: import("zod").ZodString;
                            activation_code: import("zod").ZodString;
                        }, "strip", import("zod").ZodTypeAny, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }, {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        }>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }>>>;
                    projectDir: import("zod").ZodString;
                    configFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }, {
                    projectDir: string;
                    environment: Record<string, string | {
                        networks: string[];
                        sandboxes: string[];
                        storage?: Record<string, string> | undefined;
                        aliases?: Record<string, Record<string, string>> | undefined;
                    }>;
                    hash: string;
                    configFile: string;
                    sandbox?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        protocol?: string | undefined;
                        plugin?: string | undefined;
                        accounts?: Record<string, string | {
                            publicKeyHash: string;
                            encryptedKey: string;
                            secretKey: string;
                        }> | undefined;
                        tzkt?: {
                            disableAutostartWithSandbox?: boolean | undefined;
                            postgresqlPort?: number | undefined;
                            apiPort?: number | undefined;
                        } | undefined;
                        annotations?: Record<string, unknown> | undefined;
                    }> | undefined;
                    language?: "en" | "fr" | undefined;
                    metadata?: {
                        name?: string | undefined;
                        projectDescription?: string | undefined;
                        authors?: string[] | undefined;
                        license?: string | undefined;
                        homepage?: string | undefined;
                    } | undefined;
                    artifactsDir?: string | undefined;
                    contractsDir?: string | undefined;
                    contracts?: Record<string, {
                        sourceFile: string;
                        hash: string;
                    }> | undefined;
                    plugins?: {
                        type: "npm" | "binary" | "deno";
                        name: string;
                    }[] | undefined;
                    accounts?: Record<string, string> | undefined;
                    network?: Record<string, {
                        label: string;
                        rpcUrl: string;
                        accounts?: Record<string, {
                            publicKey?: string | undefined;
                            publicKeyHash?: string | undefined;
                            privateKey?: string | undefined;
                            mnemonic?: string | undefined;
                        }> | undefined;
                        faucet?: {
                            pkh: string;
                            mnemonic: string[];
                            email: string;
                            password: string;
                            amount: string;
                            activation_code: string;
                        } | undefined;
                    }> | undefined;
                }>;
            }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            } | Promise<void | {
                data?: unknown;
                render?: "string" | "none" | "table" | undefined;
            }>) | undefined);
            command: string;
            description: string;
            template: string;
            hidden?: boolean | undefined;
            options?: {
                description: string;
                flag: string;
                shortFlag?: string | undefined;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
                boolean?: boolean | undefined;
                choices?: string[] | undefined;
            }[] | undefined;
            positionals?: {
                description: string;
                placeholder: string;
                defaultValue?: string | number | boolean | undefined;
                type?: "string" | "number" | "boolean" | undefined;
                required?: boolean | undefined;
            }[] | undefined;
            encoding?: "none" | "json" | "application/json" | undefined;
        }[] | undefined;
        proxy?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined;
        checkRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
        installRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
            report: {
                version: string;
                path: string;
                name: string;
                kind: "required" | "optional";
                met: boolean;
            }[];
        }>) | undefined;
    }>;
};
export declare const rawSchema: import("zod").ZodObject<{
    version: import("zod").ZodString;
    name: import("zod").ZodString;
    tasks: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        task: import("zod").ZodString;
        command: import("zod").ZodString;
        aliases: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>, "many">>;
        description: import("zod").ZodOptional<import("zod").ZodString>;
        example: import("zod").ZodOptional<import("zod").ZodString>;
        hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
        encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
        handler: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodString]>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", import("zod").ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">>;
    schema: import("zod").ZodString;
    alias: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>;
    operations: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        operation: import("zod").ZodString;
        command: import("zod").ZodString;
        description: import("zod").ZodOptional<import("zod").ZodString>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            operations: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                hash: import("zod").ZodString;
                time: import("zod").ZodNumber;
                output: import("zod").ZodOptional<import("zod").ZodUnknown>;
            }, "strip", import("zod").ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                task: import("zod").ZodString;
                plugin: import("zod").ZodString;
                time: import("zod").ZodNumber;
                output: import("zod").ZodOptional<import("zod").ZodUnknown>;
            }, "strip", import("zod").ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", import("zod").ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], import("zod").ZodUnknown>, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodVoid>>>;
    }, "strip", import("zod").ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">>;
    templates: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        template: import("zod").ZodString;
        command: import("zod").ZodString;
        description: import("zod").ZodString;
        hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>>]>>, import("zod").ZodPromise<import("zod").ZodVoid>]>;
        encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
    }, "strip", import("zod").ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>;
    proxy: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodVoid, import("zod").ZodUnion<[import("zod").ZodObject<{
        data: import("zod").ZodOptional<import("zod").ZodUnknown>;
        render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
    }, "strip", import("zod").ZodTypeAny, {
        render: "string" | "none" | "table";
        data?: unknown;
    }, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }>, import("zod").ZodVoid]>]>>>>;
    checkRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
        report: import("zod").ZodArray<import("zod").ZodObject<{
            version: import("zod").ZodString;
            path: import("zod").ZodString;
            name: import("zod").ZodString;
            kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
            met: import("zod").ZodBoolean;
        }, "strip", import("zod").ZodTypeAny, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }>, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>>>>;
    installRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
        report: import("zod").ZodArray<import("zod").ZodObject<{
            version: import("zod").ZodString;
            path: import("zod").ZodString;
            name: import("zod").ZodString;
            kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
            met: import("zod").ZodBoolean;
        }, "strip", import("zod").ZodTypeAny, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }>, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>>>>;
}, "strip", import("zod").ZodTypeAny, {
    version: string;
    name: string;
    schema: string;
    alias: string;
    tasks?: {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }[] | undefined;
    operations?: {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[] | undefined;
    templates?: {
        handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }[] | undefined;
    proxy?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
        render: "string" | "none" | "table";
        data?: unknown;
    }>) | undefined;
    checkRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
    installRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
}, {
    version: string;
    name: string;
    schema: string;
    alias: string;
    tasks?: {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }[] | undefined;
    operations?: {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[] | undefined;
    templates?: {
        handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }[] | undefined;
    proxy?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }>) | undefined;
    checkRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
    installRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
}>;
export declare const internalSchema: import("zod").ZodObject<{
    version: import("zod").ZodString;
    name: import("zod").ZodString;
    tasks: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        task: import("zod").ZodString;
        command: import("zod").ZodString;
        aliases: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>, "many">>;
        description: import("zod").ZodOptional<import("zod").ZodString>;
        example: import("zod").ZodOptional<import("zod").ZodString>;
        hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
        encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
        handler: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodString]>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
    }, "strip", import("zod").ZodTypeAny, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }, {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }>, "many">>;
    schema: import("zod").ZodString;
    alias: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodString]>;
    operations: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        operation: import("zod").ZodString;
        command: import("zod").ZodString;
        description: import("zod").ZodOptional<import("zod").ZodString>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        handler: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            operations: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                hash: import("zod").ZodString;
                time: import("zod").ZodNumber;
                output: import("zod").ZodOptional<import("zod").ZodUnknown>;
            }, "strip", import("zod").ZodTypeAny, {
                hash: string;
                time: number;
                output?: unknown;
            }, {
                hash: string;
                time: number;
                output?: unknown;
            }>>;
            tasks: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                task: import("zod").ZodString;
                plugin: import("zod").ZodString;
                time: import("zod").ZodNumber;
                output: import("zod").ZodOptional<import("zod").ZodUnknown>;
            }, "strip", import("zod").ZodTypeAny, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>>;
        }, "strip", import("zod").ZodTypeAny, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }>], import("zod").ZodUnknown>, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodVoid>>>;
    }, "strip", import("zod").ZodTypeAny, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }, {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }>, "many">>;
    templates: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
        template: import("zod").ZodString;
        command: import("zod").ZodString;
        description: import("zod").ZodString;
        hidden: import("zod").ZodOptional<import("zod").ZodBoolean>;
        options: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            shortFlag: import("zod").ZodOptional<import("zod").ZodString>;
            flag: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
            boolean: import("zod").ZodOptional<import("zod").ZodBoolean>;
            choices: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }, {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }>, "many">>;
        positionals: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            placeholder: import("zod").ZodString;
            description: import("zod").ZodString;
            defaultValue: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean]>>;
            type: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"string">, import("zod").ZodLiteral<"number">, import("zod").ZodLiteral<"boolean">]>>;
            required: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }, {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        handler: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodUnion<[import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodObject<{
            data: import("zod").ZodOptional<import("zod").ZodUnknown>;
            render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
        }, "strip", import("zod").ZodTypeAny, {
            render: "string" | "none" | "table";
            data?: unknown;
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, import("zod").ZodVoid]>>]>>, import("zod").ZodPromise<import("zod").ZodVoid>]>;
        encoding: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"json">, import("zod").ZodLiteral<"application/json">]>>>;
    }, "strip", import("zod").ZodTypeAny, {
        handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }, {
        handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }>, "many">>;
    proxy: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodUnion<[import("zod").ZodVoid, import("zod").ZodUnion<[import("zod").ZodObject<{
        data: import("zod").ZodOptional<import("zod").ZodUnknown>;
        render: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"none">, import("zod").ZodLiteral<"table">, import("zod").ZodLiteral<"string">]>>;
    }, "strip", import("zod").ZodTypeAny, {
        render: "string" | "none" | "table";
        data?: unknown;
    }, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }>, import("zod").ZodVoid]>]>>>>;
    checkRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
        report: import("zod").ZodArray<import("zod").ZodObject<{
            version: import("zod").ZodString;
            path: import("zod").ZodString;
            name: import("zod").ZodString;
            kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
            met: import("zod").ZodBoolean;
        }, "strip", import("zod").ZodTypeAny, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }>, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>>>>;
    installRuntimeDependencies: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">>], import("zod").ZodUnknown>, import("zod").ZodPromise<import("zod").ZodObject<{
        report: import("zod").ZodArray<import("zod").ZodObject<{
            version: import("zod").ZodString;
            path: import("zod").ZodString;
            name: import("zod").ZodString;
            kind: import("zod").ZodUnion<[import("zod").ZodLiteral<"required">, import("zod").ZodLiteral<"optional">]>;
            met: import("zod").ZodBoolean;
        }, "strip", import("zod").ZodTypeAny, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }, {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }>, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }, {
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>>>>;
}, "strip", import("zod").ZodTypeAny, {
    version: string;
    name: string;
    schema: string;
    alias: string;
    tasks?: {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }[] | undefined;
    operations?: {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[] | undefined;
    templates?: {
        handler: (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectInputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            render: "string" | "none" | "table";
            data?: unknown;
        } | Promise<void | {
            render: "string" | "none" | "table";
            data?: unknown;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }[] | undefined;
    proxy?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
        render: "string" | "none" | "table";
        data?: unknown;
    }>) | undefined;
    checkRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
    installRuntimeDependencies?: ((args_0: import("zod").objectInputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
}, {
    version: string;
    name: string;
    schema: string;
    alias: string;
    tasks?: {
        handler: string;
        command: string;
        task: string;
        aliases?: string[] | undefined;
        description?: string | undefined;
        example?: string | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
    }[] | undefined;
    operations?: {
        operation: string;
        command: string;
        description?: string | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        handler?: ((args_0: {
            operations: Record<string, {
                hash: string;
                time: number;
                output?: unknown;
            }>;
            tasks: Record<string, {
                plugin: string;
                task: string;
                time: number;
                output?: unknown;
            }>;
        }, ...args_1: unknown[]) => (args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void) | undefined;
    }[] | undefined;
    templates?: {
        handler: (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>)) & (string | Promise<void> | ((args_0: import("zod").objectOutputType<{
            _: import("zod").ZodArray<import("zod").ZodString, "many">;
            projectDir: import("zod").ZodString;
            maxConcurrency: import("zod").ZodNumber;
            debug: import("zod").ZodBoolean;
            disableState: import("zod").ZodBoolean;
            logPluginRequests: import("zod").ZodBoolean;
            fromVsCode: import("zod").ZodBoolean;
            version: import("zod").ZodBoolean;
            build: import("zod").ZodBoolean;
            help: import("zod").ZodBoolean;
            yes: import("zod").ZodBoolean;
            plugin: import("zod").ZodOptional<import("zod").ZodString>;
            env: import("zod").ZodString;
            setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
            setVersion: import("zod").ZodString;
            taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
            config: import("zod").ZodObject<{
                sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    protocol: import("zod").ZodOptional<import("zod").ZodString>;
                    plugin: import("zod").ZodOptional<import("zod").ZodString>;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                        encryptedKey: import("zod").ZodString;
                        publicKeyHash: import("zod").ZodString;
                        secretKey: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, import("zod").ZodString]>>>;
                    tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                        disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                        apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    }, "strip", import("zod").ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }>>>;
                language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
                metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                    authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                    license: import("zod").ZodOptional<import("zod").ZodString>;
                    homepage: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
                contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    sourceFile: import("zod").ZodString;
                    hash: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                    name: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                    sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                    storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
                }, "strip", import("zod").ZodTypeAny, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }, {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>, import("zod").ZodString]>>;
                network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    label: import("zod").ZodString;
                    rpcUrl: import("zod").ZodString;
                    accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                        publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                        publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                        privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                        mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                    }, "strip", import("zod").ZodTypeAny, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }>>>;
                    faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                        pkh: import("zod").ZodString;
                        mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                        email: import("zod").ZodString;
                        password: import("zod").ZodString;
                        amount: import("zod").ZodString;
                        activation_code: import("zod").ZodString;
                    }, "strip", import("zod").ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", import("zod").ZodTypeAny, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }>>>;
                projectDir: import("zod").ZodString;
                configFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }, {
                projectDir: string;
                environment: Record<string, string | {
                    networks: string[];
                    sandboxes: string[];
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                }>;
                hash: string;
                configFile: string;
                sandbox?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    protocol?: string | undefined;
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    label: string;
                    rpcUrl: string;
                    accounts?: Record<string, {
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                        mnemonic?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                }> | undefined;
            }>;
        }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } | Promise<void | {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>) | undefined);
        command: string;
        description: string;
        template: string;
        hidden?: boolean | undefined;
        options?: {
            description: string;
            flag: string;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
            boolean?: boolean | undefined;
            choices?: string[] | undefined;
        }[] | undefined;
        positionals?: {
            description: string;
            placeholder: string;
            defaultValue?: string | number | boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
    }[] | undefined;
    proxy?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<void | {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }>) | undefined;
    checkRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
    installRuntimeDependencies?: ((args_0: import("zod").objectOutputType<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
        taqRun: import("zod").ZodUnion<[import("zod").ZodLiteral<"proxy">, import("zod").ZodLiteral<"pluginInfo">, import("zod").ZodLiteral<"checkRuntimeDependencies">, import("zod").ZodLiteral<"installRuntimeDependencies">, import("zod").ZodLiteral<"proxyTemplate">]>;
        config: import("zod").ZodObject<{
            sandbox: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                protocol: import("zod").ZodOptional<import("zod").ZodString>;
                plugin: import("zod").ZodOptional<import("zod").ZodString>;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                    encryptedKey: import("zod").ZodString;
                    publicKeyHash: import("zod").ZodString;
                    secretKey: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }, {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }>, import("zod").ZodString]>>>;
                tzkt: import("zod").ZodOptional<import("zod").ZodObject<{
                    disableAutostartWithSandbox: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    postgresqlPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                    apiPort: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodNumber>>;
                }, "strip", import("zod").ZodTypeAny, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }, {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                }>>;
                annotations: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }>>>;
            language: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"en">, import("zod").ZodLiteral<"fr">]>>>;
            metadata: import("zod").ZodOptional<import("zod").ZodObject<{
                name: import("zod").ZodOptional<import("zod").ZodString>;
                projectDescription: import("zod").ZodOptional<import("zod").ZodString>;
                authors: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
                license: import("zod").ZodOptional<import("zod").ZodString>;
                homepage: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }, {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            }>>;
            artifactsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contractsDir: import("zod").ZodOptional<import("zod").ZodDefault<import("zod").ZodString>>;
            contracts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                sourceFile: import("zod").ZodString;
                hash: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                sourceFile: string;
                hash: string;
            }, {
                sourceFile: string;
                hash: string;
            }>>>;
            plugins: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                type: import("zod").ZodUnion<[import("zod").ZodLiteral<"npm">, import("zod").ZodLiteral<"binary">, import("zod").ZodLiteral<"deno">]>;
                name: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                type: "npm" | "binary" | "deno";
                name: string;
            }, {
                type: "npm" | "binary" | "deno";
                name: string;
            }>, "many">>;
            accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
            environment: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                networks: import("zod").ZodArray<import("zod").ZodString, "many">;
                sandboxes: import("zod").ZodArray<import("zod").ZodString, "many">;
                storage: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                aliases: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>>;
            }, "strip", import("zod").ZodTypeAny, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }, {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>, import("zod").ZodString]>>;
            network: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                label: import("zod").ZodString;
                rpcUrl: import("zod").ZodString;
                accounts: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                    publicKey: import("zod").ZodOptional<import("zod").ZodString>;
                    publicKeyHash: import("zod").ZodOptional<import("zod").ZodString>;
                    privateKey: import("zod").ZodOptional<import("zod").ZodString>;
                    mnemonic: import("zod").ZodOptional<import("zod").ZodString>;
                }, "strip", import("zod").ZodTypeAny, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }>>>;
                faucet: import("zod").ZodOptional<import("zod").ZodObject<{
                    pkh: import("zod").ZodString;
                    mnemonic: import("zod").ZodArray<import("zod").ZodString, "many">;
                    email: import("zod").ZodString;
                    password: import("zod").ZodString;
                    amount: import("zod").ZodString;
                    activation_code: import("zod").ZodString;
                }, "strip", import("zod").ZodTypeAny, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }, {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                }>>;
            }, "strip", import("zod").ZodTypeAny, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }>>>;
            projectDir: import("zod").ZodString;
            configFile: import("zod").ZodString;
            hash: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }, {
            projectDir: string;
            environment: Record<string, string | {
                networks: string[];
                sandboxes: string[];
                storage?: Record<string, string> | undefined;
                aliases?: Record<string, Record<string, string>> | undefined;
            }>;
            hash: string;
            configFile: string;
            sandbox?: Record<string, {
                label: string;
                rpcUrl: string;
                protocol?: string | undefined;
                plugin?: string | undefined;
                accounts?: Record<string, string | {
                    publicKeyHash: string;
                    encryptedKey: string;
                    secretKey: string;
                }> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox?: boolean | undefined;
                    postgresqlPort?: number | undefined;
                    apiPort?: number | undefined;
                } | undefined;
                annotations?: Record<string, unknown> | undefined;
            }> | undefined;
            language?: "en" | "fr" | undefined;
            metadata?: {
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } | undefined;
            artifactsDir?: string | undefined;
            contractsDir?: string | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string;
            }> | undefined;
            plugins?: {
                type: "npm" | "binary" | "deno";
                name: string;
            }[] | undefined;
            accounts?: Record<string, string> | undefined;
            network?: Record<string, {
                label: string;
                rpcUrl: string;
                accounts?: Record<string, {
                    publicKey?: string | undefined;
                    publicKeyHash?: string | undefined;
                    privateKey?: string | undefined;
                    mnemonic?: string | undefined;
                }> | undefined;
                faucet?: {
                    pkh: string;
                    mnemonic: string[];
                    email: string;
                    password: string;
                    amount: string;
                    activation_code: string;
                } | undefined;
            }> | undefined;
        }>;
    }, import("zod").ZodTypeAny, "passthrough">, ...args_1: unknown[]) => Promise<{
        report: {
            version: string;
            path: string;
            name: string;
            kind: "required" | "optional";
            met: boolean;
        }[];
    }>) | undefined;
}>;
export type t = PluginSchemaStrict;
//# sourceMappingURL=PluginSchema.d.ts.map