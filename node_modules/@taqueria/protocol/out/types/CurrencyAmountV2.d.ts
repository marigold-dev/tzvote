import { TaqError } from '@taqueria/protocol/TaqError';
import { FutureInstance } from 'fluture';
import { CurrencyAmountV2 } from '@taqueria/protocol/types';
import { CurrencyAmountV2 as CurrencyAmountV2Strict } from '@taqueria/protocol/out/types-strict';
export type { CurrencyAmountV2Strict as CurrencyAmountV2 };
export declare const from: (input: unknown) => CurrencyAmountV2Strict;
export declare const create: (input: CurrencyAmountV2) => CurrencyAmountV2Strict;
export declare const of: (input: unknown) => FutureInstance<TaqError, CurrencyAmountV2Strict>;
export declare const make: (input: Omit<CurrencyAmountV2Strict, '__type'>) => FutureInstance<TaqError, CurrencyAmountV2Strict>;
export declare const schemas: {
    rawSchema: import("zod").ZodObject<{
        amount: import("zod").ZodString;
        units: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        amount: string;
        units: string;
    }, {
        amount: string;
        units: string;
    }>;
    schema: import("zod").ZodEffects<import("zod").ZodObject<{
        amount: import("zod").ZodString;
        units: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        amount: string;
        units: string;
    }, {
        amount: string;
        units: string;
    }>, CurrencyAmountV2Strict, {
        amount: string;
        units: string;
    }>;
};
export declare const rawSchema: import("zod").ZodObject<{
    amount: import("zod").ZodString;
    units: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    amount: string;
    units: string;
}, {
    amount: string;
    units: string;
}>;
export declare const internalSchema: import("zod").ZodObject<{
    amount: import("zod").ZodString;
    units: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    amount: string;
    units: string;
}, {
    amount: string;
    units: string;
}>;
export type t = CurrencyAmountV2Strict;
//# sourceMappingURL=CurrencyAmountV2.d.ts.map