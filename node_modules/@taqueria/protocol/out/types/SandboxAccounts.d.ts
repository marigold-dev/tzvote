import { TaqError } from '@taqueria/protocol/TaqError';
import { FutureInstance } from 'fluture';
import { SandboxAccounts } from '@taqueria/protocol/types';
import { SandboxAccounts as SandboxAccountsStrict } from '@taqueria/protocol/out/types-strict';
export type { SandboxAccountsStrict as SandboxAccounts };
export declare const from: (input: unknown) => SandboxAccountsStrict;
export declare const create: (input: SandboxAccounts) => SandboxAccountsStrict;
export declare const of: (input: unknown) => FutureInstance<TaqError, SandboxAccountsStrict>;
export declare const make: (input: Omit<SandboxAccountsStrict, '__type'>) => FutureInstance<TaqError, SandboxAccountsStrict>;
export declare const schemas: {
    rawSchema: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, import("zod").ZodTypeAny, "passthrough">>>;
    schema: import("zod").ZodEffects<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, import("zod").ZodTypeAny, "passthrough">>>, SandboxAccountsStrict, Record<string, import("zod").objectInputType<{
        type: import("zod").ZodOptional<import("zod").ZodString>;
    }, import("zod").ZodTypeAny, "passthrough">>>;
};
export declare const rawSchema: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, import("zod").ZodTypeAny, "passthrough">>>;
export declare const internalSchema: import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, "passthrough", import("zod").ZodTypeAny, import("zod").objectOutputType<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, import("zod").ZodTypeAny, "passthrough">, import("zod").objectInputType<{
    type: import("zod").ZodOptional<import("zod").ZodString>;
}, import("zod").ZodTypeAny, "passthrough">>>;
export type t = SandboxAccountsStrict;
//# sourceMappingURL=SandboxAccounts.d.ts.map