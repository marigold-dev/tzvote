"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// i18n.ts
var i18n_exports = {};
__export(i18n_exports, {
  default: () => i18n_default
});
module.exports = __toCommonJS(i18n_exports);
var import_i18next = __toESM(require("i18next"));
var i18n_default = async () => {
  const i18n = {
    ...await import_i18next.default.init({
      lng: "en",
      debug: false,
      resources: {
        en: {
          translation: {
            "appName": "Taqueria",
            "appDesc": "Taqueria is an integrated environment for compiling, testing, and deploying Tezos software.",
            "versionDesc": "Display the version number of the Taqueria program",
            "betaWarning": "Please be advised that Taqueria is currently in BETA.",
            "configDirDesc": "Config directory (default ./.taq)",
            "initDesc": "Initialize a new project",
            "optInDesc": "Opt-in to sharing anonymous usage analytics",
            "optOutDesc": "Opt-out of sharing anonymous usage analytics",
            "initPathDesc": "Path to your project directory",
            "workflowDesc": "Select a workflow to initialize your Taqueria project. Choices are (ligo|smartpy|archetype|michelson)",
            "scaffoldDesc": "Generate a new project using pre-made scaffold",
            "scaffoldUrlDesc": "Alias or Url for the scaffold project",
            "scaffoldProjectDirDesc": "Path where to create the new project. This must be a new directory.",
            "scaffoldDoneMsg": "The project was created using the scaffold.",
            "installDesc": "Install a plugin",
            "pluginInstalled": "Plugin installed successfully",
            "pluginUninstalled": "Plugin uninstalled successfully",
            "uninstallDesc": "Uninstall a plugin",
            "pluginNameDesc": "The name of the plugin",
            "promptForTask": "Please specify which task you would like to execute. If you're starting a new project, please run 'init'.\n",
            "pluginKindDesc": "Kind of plugin (NPM, Binary)",
            "pluginAlreadyInstalled": "That plugin is already installed.",
            "pluginOptionDesc": "Use the task from this plugin",
            "bootstrapMsg": "Project taq'ified!",
            "maxConcurrencyDesc": "Set the maximum concurrency limit used internally",
            "providedByMany": "Provided by more than one plugin. The option --plugin is required.",
            "pluginDesc": "Specify what plugin should execute this command. Use this when more than one plugin provide a task of the same name.",
            "listNetworks": "List known networks",
            "envDesc": "Specify an environment configuration",
            "disableStateDesc": "Does not use the saved state.json file. State is computed for each execution.",
            "logPluginCallsDesc": "Logs any execution calls to a plugin to the console",
            "npmInitRequired": "This project isn't a valid NPM project. Please run: npm init",
            "testFromVsCode": "An internal command used by VS Code to test for the taq binary",
            "fromVsCode": "An internal flag used to indicate that taq is executed via vscode",
            "buildDesc": "Display build information about the current version",
            "pluginOption": "Use to specify what plugin you'd like when running this task.",
            "yesOptionDesc": 'Select "yes" to any prompt',
            "templateNotFound": "Template not found. Perhaps you need to install a plugin?",
            "createDesc": "Create files from pre-existing templates",
            "templateDesc": "Name of the template to use"
          }
        }
      }
    }),
    __: import_i18next.default.t
  };
  return i18n;
};
//# sourceMappingURL=i18n.js.map