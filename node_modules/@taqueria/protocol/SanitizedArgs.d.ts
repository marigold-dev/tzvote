import { Url } from '@taqueria/protocol';
import * as NonEmptyString from '@taqueria/protocol/NonEmptyString';
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
export declare const scaffoldRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
        readonly __type: any;
    }, string>;
    scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
    branch: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
        readonly __type: any;
    }, string>;
    scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
    branch: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
        readonly __type: any;
    }, string>;
    scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
    branch: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
export declare const initRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    workflow: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    workflow: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    workflow: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, z.ZodTypeAny, "passthrough">>;
export type rawInitSchemaInput = z.infer<typeof initRawSchema>;
export declare const provisionRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
export declare const templateRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    template: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    template: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    template: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
export declare const managePluginRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
export declare const setEnvRawSchema: z.ZodObject<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    defaultEnvironment: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    defaultEnvironment: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    defaultEnvironment: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    }, any>;
}, factory: {
    make: (input: z.objectOutputType<{
        _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
            readonly __type: any;
        }, any>, string & {
            readonly __type: any;
        }, any>;
        maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
        debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
        env: z.ZodOptional<z.ZodString>;
        quickstart: z.ZodOptional<z.ZodString>;
        setBuild: z.ZodEffects<z.ZodString, string, unknown>;
        setVersion: z.ZodString;
        pluginName: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    }>;
    create: (input: z.objectOutputType<{
        _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
        projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
            readonly __type: any;
        }, any>, string & {
            readonly __type: any;
        }, any>;
        maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
        debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
        version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
        plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
        env: z.ZodOptional<z.ZodString>;
        quickstart: z.ZodOptional<z.ZodString>;
        setBuild: z.ZodEffects<z.ZodString, string, unknown>;
        setVersion: z.ZodString;
        pluginName: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">) => {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    };
    from: (input: unknown) => {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    };
};
export declare const create: (input: z.objectOutputType<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>, make: (input: z.objectOutputType<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export type SanitizedArgs = z.infer<typeof generatedSchemas.schema>;
export type t = SanitizedArgs;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    }, any>, {
        _: (string | number)[];
        projectDir: string & {
            readonly __type: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        setBuild: string;
        setVersion: string;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: NonEmptyString.NonEmptyString | undefined;
        env?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
    } & {
        [k: string]: unknown;
    } & {
        readonly __type: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
export declare const scaffoldTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __type: any;
            };
            scaffoldUrl: {
                __type: Url.Url;
            } & {
                __type: NonEmptyString.NonEmptyString;
            } & string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            branch?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
                readonly __type: any;
            }, string>;
            scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
            branch: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __type: any;
            };
            scaffoldUrl: {
                __type: Url.Url;
            } & {
                __type: NonEmptyString.NonEmptyString;
            } & string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            branch?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __type: any;
            };
            scaffoldUrl: {
                __type: Url.Url;
            } & {
                __type: NonEmptyString.NonEmptyString;
            } & string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            branch?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
                readonly __type: any;
            }, string>;
            scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
            branch: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __type: any;
            };
            scaffoldUrl: {
                __type: Url.Url;
            } & {
                __type: NonEmptyString.NonEmptyString;
            } & string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            branch?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __type: any;
            };
            scaffoldUrl: {
                __type: Url.Url;
            } & {
                __type: NonEmptyString.NonEmptyString;
            } & string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            branch?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export declare const provisionTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            operation: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            name?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            operation: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            operation: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            name?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            operation: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            name?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            operation: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            operation: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            name?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            operation: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
            name?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export declare const installTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export declare const uninstallTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            pluginName: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export declare const setEnvTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            defaultEnvironment: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            defaultEnvironment: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            defaultEnvironment: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            defaultEnvironment: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            defaultEnvironment: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            defaultEnvironment: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            defaultEnvironment: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export declare const createTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            template: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }, any>;
    };
    factory: {
        make: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            template: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            template: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            template: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        }>;
        create: (input: z.objectOutputType<{
            quickstart: z.ZodOptional<z.ZodString>;
            _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
                readonly __type: any;
            }, any>, string & {
                readonly __type: any;
            }, any>;
            maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
            debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
            version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
            plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
            env: z.ZodOptional<z.ZodString>;
            setBuild: z.ZodEffects<z.ZodString, string, unknown>;
            setVersion: z.ZodString;
            pluginName: z.ZodOptional<z.ZodString>;
            template: z.ZodString;
        }, z.ZodTypeAny, "passthrough">) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            template: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
        from: (input: unknown) => {
            _: (string | number)[];
            projectDir: string & {
                readonly __type: any;
            };
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            setBuild: string;
            setVersion: string;
            template: string;
            quickstart?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            plugin?: NonEmptyString.NonEmptyString | undefined;
            env?: string | undefined;
            pluginName?: string | undefined;
        } & {
            [k: string]: unknown;
        } & {
            readonly __type: any;
        };
    };
};
export type ScaffoldTaskArgs = z.infer<typeof scaffoldTaskArgs.schemas.schema>;
export type ProvisionTaskArgs = z.infer<typeof provisionTaskArgs.schemas.schema>;
export type InstallTaskArgs = z.infer<typeof installTaskArgs.schemas.schema>;
export type UninstallTaskArgs = z.infer<typeof uninstallTaskArgs.schemas.schema>;
export type SetEnvTaskArgs = z.infer<typeof setEnvTaskArgs.schemas.schema>;
export type CreateTaskArgs = z.infer<typeof createTaskArgs.schemas.schema>;
export declare const createScaffoldTaskArgs: (input: unknown) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __type: any;
    };
    scaffoldUrl: {
        __type: Url.Url;
    } & {
        __type: NonEmptyString.NonEmptyString;
    } & string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    branch?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeScaffoldTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
        readonly __type: any;
    }, string>;
    scaffoldUrl: z.ZodEffects<z.ZodString, Url.Url, string>;
    branch: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __type: any;
    };
    scaffoldUrl: {
        __type: Url.Url;
    } & {
        __type: NonEmptyString.NonEmptyString;
    } & string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    branch?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofScaffoldTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __type: any;
    };
    scaffoldUrl: {
        __type: Url.Url;
    } & {
        __type: NonEmptyString.NonEmptyString;
    } & string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    branch?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const createProvisionTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    operation: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    name?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeProvisionTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    operation: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    name?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofProvisionTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    operation: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
    name?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const createInstallTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeInstallTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofInstallTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const createUninstallTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeUninstallTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofUninstallTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    pluginName: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const createSetEnvTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    defaultEnvironment: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    defaultEnvironment: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeSetEnvTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    defaultEnvironment: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    defaultEnvironment: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofSetEnvTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    defaultEnvironment: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const createCreateTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    template: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    template: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
};
export declare const makeCreateTaskArgs: (input: z.objectOutputType<{
    quickstart: z.ZodOptional<z.ZodString>;
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __type: any;
    }, any>, string & {
        readonly __type: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodEffects<z.ZodString, NonEmptyString.NonEmptyString, string>>;
    env: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
    template: z.ZodString;
}, z.ZodTypeAny, "passthrough">) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    template: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
export declare const ofCreateTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    _: (string | number)[];
    projectDir: string & {
        readonly __type: any;
    };
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    setBuild: string;
    setVersion: string;
    template: string;
    quickstart?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    plugin?: NonEmptyString.NonEmptyString | undefined;
    env?: string | undefined;
    pluginName?: string | undefined;
} & {
    [k: string]: unknown;
} & {
    readonly __type: any;
}>;
//# sourceMappingURL=SanitizedArgs.d.ts.map