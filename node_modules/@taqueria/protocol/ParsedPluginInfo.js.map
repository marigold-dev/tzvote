{"version":3,"sources":["ParsedPluginInfo.ts","TaqError.ts","Base.ts","out/types/ParsedOperation.ts","out/types-zod.ts","out/types/Alias.ts","out/types/ParsedTemplate.ts","out/types/Task.ts","out/types/VersionNumber.ts","PluginInfo.ts"],"sourcesContent":["import createType from './Base';\nimport * as ParsedOperation from './ParsedOperation';\nimport * as PluginInfo from './PluginInfo';\nimport { z } from 'zod';\n\nconst internalSchema = PluginInfo.internalSchema.extend({\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.schemas.schema,\n\t\t\t{ description: 'ParsedOperations' },\n\t\t)\n\t\t\t.optional(),\n\t),\n}).describe('ParsedPluginInfo');\n\nexport const rawSchema = PluginInfo.internalSchema.extend({\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.rawSchema,\n\t\t\t{ description: 'ParsedOperation' },\n\t\t),\n\t)\n\t\t.optional(),\n}).describe('ParsedPluginInfo');\n\ntype Input = z.infer<typeof internalSchema>;\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) =>\n\t\t`The following plugin info gave us trouble when parsing the following plugin information: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the plugin information',\n});\n\nexport type ParsedPluginInfo = z.infer<typeof generatedSchemas.schema>;\nexport type t = ParsedPluginInfo;\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as ParsedPluginInfo),\n};\n","import { map, reject } from 'fluture';\nimport { ZodError } from 'zod';\n\nexport type ErrorType =\n\t| 'E_INVALID_PATH_DOES_NOT_EXIST'\n\t| 'E_INVALID_PATH_EXISTS_AND_NOT_AN_EMPTY_DIR'\n\t| 'E_INVALID_PATH_ALREADY_EXISTS'\n\t| 'E_INVALID_CONFIG'\n\t| 'E_INVALID_JSON'\n\t| 'E_FORK'\n\t| 'E_INVALID_TASK'\n\t| 'E_READFILE'\n\t| 'E_NPM_INIT'\n\t| 'E_INVALID_PLUGIN_RESPONSE'\n\t| 'E_INVALID_ARGS'\n\t| 'E_MKDIR_FAILED'\n\t| 'E_GIT_CLONE_FAILED'\n\t| 'E_PROVISION'\n\t| 'E_PARSE'\n\t| 'E_PARSE_UNKNOWN'\n\t| 'E_INVALID_ARCH'\n\t| 'E_NO_PROVISIONS'\n\t| 'E_INTERNAL_LOGICAL_VALIDATION_FAILURE'\n\t| 'E_EXEC'\n\t| 'E_OPT_IN_WARNING'\n\t| 'E_INVALID_OPTION'\n\t| 'E_TAQ_PROJECT_NOT_FOUND';\n\nexport interface TaqError {\n\treadonly kind: ErrorType;\n\tmsg: string;\n\tprevious?: TaqError | Error | unknown;\n\tcontext?: unknown;\n}\n\nexport type t = TaqError;\n\nexport class E_TaqError extends Error {\n\treadonly context;\n\treadonly kind;\n\treadonly previous;\n\tconstructor(taqErr: TaqError) {\n\t\tsuper(taqErr.msg);\n\t\tthis.context = taqErr.context;\n\t\tthis.kind = taqErr.kind;\n\t\tthis.name = this.kind;\n\t\tthis.previous = taqErr.previous;\n\t}\n}\n\nexport const toFutureParseErr = <T>(previous: ZodError, msg: string, context?: unknown) =>\n\treject(toParseErr(previous, msg, context))\n\t\t.pipe(map((val: unknown) => val as T));\n\nexport const toParseErr = (previous: ZodError, msg: string, context?: unknown) =>\n\tcreate({\n\t\tkind: 'E_PARSE',\n\t\tmsg: msg,\n\t\tcontext,\n\t\tprevious,\n\t});\n\nexport const toParseUnknownErr = (previous: Error | TaqError | E_TaqError | unknown, msg: string, context?: unknown) =>\n\tcreate({\n\t\tkind: 'E_PARSE_UNKNOWN',\n\t\tmsg: msg,\n\t\tcontext,\n\t\tprevious,\n\t});\n\nexport const toFutureParseUnknownErr = <T>(\n\tprevious: Error | TaqError | E_TaqError | unknown,\n\tmsg: string,\n\tcontext?: unknown,\n) =>\n\treject(toParseUnknownErr(previous, msg, context))\n\t\t.pipe(map((val: unknown) => val as T));\n\nexport const create = (err: TaqError) => err;\n","import { toFutureParseErr, toFutureParseUnknownErr } from './TaqError';\nimport { FutureInstance, resolve } from 'fluture';\nimport { z, ZodError, ZodSchema } from 'zod';\n\ntype Future<L, R> = FutureInstance<L, R>;\n\ntype ErrMsg = string | ((value: unknown, previous?: unknown) => string);\n\ninterface CreateSchemaParams {\n\trawSchema: ZodSchema;\n\tinternalSchema?: ZodSchema;\n\ttransformer?: (value: unknown) => unknown;\n\tisStringLike?: boolean;\n}\n\ninterface CreateTypeParams extends CreateSchemaParams {\n\tparseErrMsg: ErrMsg;\n\tunknownErrMsg: ErrMsg;\n}\nexport type Flatten<T> = { [k in keyof T]: T[k] };\n\nexport const createSchema = <I>(params: CreateSchemaParams) => {\n\tconst { rawSchema, isStringLike } = params;\n\tconst internalSchema = params.internalSchema ?? params.rawSchema;\n\tconst noop = (val: unknown) => val;\n\tconst transformer = params.transformer ?? noop;\n\n\tconst schema = isStringLike\n\t\t? internalSchema\n\t\t\t.transform((val: unknown) =>\n\t\t\t\ttransformer(val) as I & {\n\t\t\t\t\treadonly __type: 'generated' & z.infer<typeof internalSchema>;\n\t\t\t\t}\n\t\t\t)\n\t\t: internalSchema\n\t\t\t.transform((val: unknown) =>\n\t\t\t\ttransformer(val) as Flatten<\n\t\t\t\t\tI & {\n\t\t\t\t\t\treadonly __type: 'generated' & z.infer<typeof internalSchema>;\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t);\n\n\ttype GeneratedSchema = typeof schema;\n\n\treturn {\n\t\trawSchema,\n\t\tinternalSchema,\n\t\tschema,\n\t};\n};\n\n// TODO:\n// TypeScript appears to have a bug with default generic values\n// For instance, I'd like to use this:\n// export const createType = <R, I = R>(params: CreateTypeParams) => {\n//\n// However, I == unknown when having I default to R if no I was given.\n// So, we need to require R and I explicitly\nexport const createType = <R, I>(params: CreateTypeParams) => {\n\tconst schemas = createSchema<I>(params);\n\tconst { parseErrMsg, unknownErrMsg } = params;\n\n\ttype T = z.infer<typeof schemas.schema>;\n\n\tconst internalOf = (input: unknown) => {\n\t\ttry {\n\t\t\treturn resolve<T>(schemas.schema.parse(input));\n\t\t} catch (previous) {\n\t\t\tconst parseMsg = typeof parseErrMsg === 'string'\n\t\t\t\t? parseErrMsg\n\t\t\t\t: parseErrMsg(input, previous);\n\n\t\t\tconst unknownMsg = typeof unknownErrMsg === 'string'\n\t\t\t\t? unknownErrMsg\n\t\t\t\t: unknownErrMsg(input);\n\n\t\t\tif (previous instanceof ZodError) {\n\t\t\t\treturn toFutureParseErr<T>(previous, parseMsg, input);\n\t\t\t}\n\t\t\treturn toFutureParseUnknownErr<T>(previous, unknownMsg, input);\n\t\t}\n\t};\n\tconst of = internalOf;\n\n\tconst make = (input: I) => internalOf(input);\n\n\tconst create = (input: R | I) => schemas.schema.parse(input) as T;\n\n\tconst from = (input: unknown) => schemas.schema.parse(input) as T;\n\n\tconst factory = {\n\t\tmake,\n\t\tof,\n\t\tcreate,\n\t\tfrom,\n\t};\n\n\treturn {\n\t\tschemas,\n\t\tfactory,\n\t};\n};\n\nexport default createType;\n","// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '../../TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { ParsedOperation } from '../../types';\nimport { ParsedOperation as ParsedOperationStrict } from '../types-strict';\nimport { parsedOperationSchema } from '../types-zod';\n\nexport type { ParsedOperationStrict as ParsedOperation };\n\nexport const from = (input: unknown): ParsedOperationStrict => {\n\ttry {\n\t\treturn parsedOperationSchema.parse(input) as ParsedOperationStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"ParsedOperation is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a ParsedOperation.\")\n\t}\n    \n};\n\nexport const create = (input: ParsedOperation): ParsedOperationStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, ParsedOperationStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<ParsedOperationStrict, '__type'>): FutureInstance<TaqError, ParsedOperationStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: parsedOperationSchema,\n\tschema: parsedOperationSchema.transform(val => val as ParsedOperationStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = parsedOperationSchema;\n\nexport type t = ParsedOperationStrict;\n        ","// Generated by ts-to-zod\nimport { z } from \"zod\";\n\nexport const nonEmptyStringSchema = z.string().min(1);\n\nexport const singleCharSchema = nonEmptyStringSchema.regex(/^[A-Za-z]$/);\n\nexport const verbSchema = nonEmptyStringSchema.regex(/^[A-Za-z\\-\\ ]+/);\n\nexport const aliasSchema = z.union([verbSchema, singleCharSchema]);\n\nexport const humanReadableIdentifierSchema = nonEmptyStringSchema.regex(\n  /^[A-Za-z]+[A-Za-z0-9-_ ]*$/\n);\n\nexport const sanitizedAbsPathSchema = nonEmptyStringSchema;\n\nexport const sanitizedPathSchema = nonEmptyStringSchema;\n\nexport const settingsSchema = z.object({\n  consent: z.union([\n    z.literal(\"opt_in\"),\n    z.literal(\"opt_out\"),\n    z.literal(\"unspecified\"),\n  ]),\n});\n\nexport const timestampSchema = z.number().min(1651846877);\n\nexport const tzSchema = nonEmptyStringSchema.min(1).regex(/^\\d([\\d_]+\\d)?$/);\n\nexport const versionNumberSchema = nonEmptyStringSchema\n  .min(1)\n  .regex(/^\\d+\\.\\d+(\\.\\d+)*$/);\n\nexport const urlSchema = nonEmptyStringSchema.url();\n\nexport const commandSchema = nonEmptyStringSchema;\n\nexport const optionSchema = z.object({\n  shortFlag: singleCharSchema.optional(),\n  flag: verbSchema,\n  description: nonEmptyStringSchema,\n  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),\n  type: z\n    .union([z.literal(\"string\"), z.literal(\"number\"), z.literal(\"boolean\")])\n    .optional(),\n  required: z.boolean().optional(),\n  boolean: z.boolean().optional(),\n  choices: z.array(nonEmptyStringSchema).optional(),\n});\n\nexport const positionalArgSchema = z.object({\n  placeholder: humanReadableIdentifierSchema,\n  description: nonEmptyStringSchema,\n  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),\n  type: z\n    .union([z.literal(\"string\"), z.literal(\"number\"), z.literal(\"boolean\")])\n    .optional(),\n  required: z.boolean().optional(),\n});\n\nexport const installedPluginSchema = z.object({\n  type: z.union([z.literal(\"npm\"), z.literal(\"binary\"), z.literal(\"deno\")]),\n  name: nonEmptyStringSchema,\n});\n\nexport const runtimeDependencySchema = z.object({\n  name: humanReadableIdentifierSchema,\n  path: z.string(),\n  version: z.string(),\n  kind: z.union([z.literal(\"required\"), z.literal(\"optional\")]),\n});\n\nexport const runtimeDependencyReportSchema = runtimeDependencySchema.extend(\n({\n    met: z.boolean(),\n  })\n);\n\nexport const pluginDependenciesResponseSchema = z.object({\n  report: z.array(runtimeDependencyReportSchema),\n});\n\nexport const pluginJsonResponseSchema = z.union([\n  z.object({\n    data: z.unknown().optional(),\n    render: z\n      .union([z.literal(\"none\"), z.literal(\"table\"), z.literal(\"string\")])\n      .default(\"none\"),\n  }),\n  z.void(),\n]);\n\nexport const pluginProxyResponseSchema = z.union([\n  z.void(),\n  pluginJsonResponseSchema,\n]);\n\nexport const pluginResponseEncodingSchema = z\n  .union([z.literal(\"none\"), z.literal(\"json\"), z.literal(\"application/json\")])\n  .default(\"none\");\n\nexport const buildNumberSchema = z.number();\n\nexport const sanitizedArgsSchema = z.object({\n  _: z.array(z.string()),\n  projectDir: sanitizedPathSchema,\n  maxConcurrency: z.number(),\n  debug: z.boolean(),\n  disableState: z.boolean(),\n  logPluginRequests: z.boolean(),\n  fromVsCode: z.boolean(),\n  version: z.boolean(),\n  build: z.boolean(),\n  help: z.boolean(),\n  yes: z.boolean(),\n  plugin: nonEmptyStringSchema.optional(),\n  env: nonEmptyStringSchema,\n  quickstart: nonEmptyStringSchema,\n  setBuild: z.union([nonEmptyStringSchema, buildNumberSchema]),\n  setVersion: nonEmptyStringSchema,\n}).passthrough();\n\nexport const pluginActionNameSchema = z.union([\n  z.literal(\"proxy\"),\n  z.literal(\"pluginInfo\"),\n  z.literal(\"checkRuntimeDependencies\"),\n  z.literal(\"installRuntimeDependencies\"),\n  z.literal(\"proxyTemplate\"),\n]);\n\nexport const economicalProtocolHashSchema = z.string();\n\nexport const publicKeyHashSchema = z.string().regex(/^tz\\d[A-Za-z0-9]{33}$/);\n\nexport const sha256Schema = z.string().regex(/^[A-Fa-f0-9]{64}$/);\n\nexport const contractSchema = z.object({\n  sourceFile: nonEmptyStringSchema,\n  hash: sha256Schema,\n});\n\nexport const faucetSchema = z.object({\n  pkh: publicKeyHashSchema,\n  mnemonic: z.array(z.string()),\n  email: z.string().email(),\n  password: z.string(),\n  amount: z.string().regex(/^\\d+$/),\n  activation_code: z.string(),\n});\n\nconst tzKtConfigPostgresqlPortSchema = z.number().default(5432);\n\nconst tzKtConfigApiPortSchema = z.number().default(5000);\n\nexport const tzKtConfigSchema = z.object({\n  disableAutostartWithSandbox: z.boolean().optional(),\n  postgresqlPort: tzKtConfigPostgresqlPortSchema.optional(),\n  apiPort: tzKtConfigApiPortSchema.optional(),\n});\n\nexport const persistedTaskSchema = z.object({\n  task: verbSchema,\n  plugin: nonEmptyStringSchema,\n  time: timestampSchema,\n  output: z.unknown().optional(),\n});\n\nexport const persistedOperationSchema = z.object({\n  hash: sha256Schema,\n  time: timestampSchema,\n  output: z.unknown().optional(),\n});\n\nexport const provisionerIDSchema = z\n  .string()\n  .min(1)\n  .regex(\n    /^[A-Za-z0-9]+[A-Za-z0-9-_]+\\.[A-Za-z0-9]+[A-Za-z0-9-_]+\\.[A-Za-z0-9]+[A-Za-z0-9-_]+$/\n  );\n\nexport const provisionerSchema = z.object({\n  id: provisionerIDSchema,\n  plugin: nonEmptyStringSchema,\n  operation: z.union([nonEmptyStringSchema, z.literal(\"custom\")]),\n  command: z.string().optional(),\n  label: z.string().optional(),\n  depends_on: z.array(provisionerIDSchema).optional(),\n});\n\nexport const provisionsSchema = z.array(provisionerSchema);\n\nexport const environmentSchema = z.object({\n  networks: z.array(nonEmptyStringSchema),\n  sandboxes: z.array(nonEmptyStringSchema),\n  storage: z.record(nonEmptyStringSchema).optional(),\n  aliases: z.record(z.record(nonEmptyStringSchema)).optional(),\n});\n\nconst environmentNameSchema = nonEmptyStringSchema.min(\n  1,\n  \"Default environment must reference the name of an existing environment.\"\n);\n\nconst humanLanguageSchema = z\n  .union([z.literal(\"en\"), z.literal(\"fr\")])\n  .default(\"en\");\n\nexport const configContractsDirSchema = z.string().min(1).default(\"contracts\");\n\nexport const configArtifactsDirSchema = z.string().min(1).default(\"artifacts\");\n\nexport const currencyAmountV2Schema = z.object({\n  amount: z.string(),\n  units: z.string(),\n});\n\nconst versionV2Schema = z.string().regex(/^v2$/);\n\nexport const sandboxAccountSchema = z.object({\n  type: z.string().optional(),\n}).passthrough();\n\nexport const sandboxAccountsSchema = z.record(sandboxAccountSchema);\n\nexport const configEnvironmentFileV2Schema = z.object({\n  type: z.string().optional(),\n  accounts: sandboxAccountsSchema.optional(),\n  accountDefault: z.any().optional(),\n  contracts: z\n    .record(\n      z.object({\n        address: z.string().optional(),\n      })\n    )\n    .optional(),\n}).passthrough();\n\nexport const metadataConfigSchema = z.object({\n  name: z.string().optional(),\n  projectDescription: z.string().optional(),\n  authors: z.array(z.string()).optional(),\n  license: z.string().optional(),\n  homepage: z.string().optional(),\n});\n\nexport const networkAccountConfigSchema = z.object({\n  publicKey: nonEmptyStringSchema.optional(),\n  publicKeyHash: publicKeyHashSchema.optional(),\n  privateKey: nonEmptyStringSchema.optional(),\n  mnemonic: nonEmptyStringSchema.optional(),\n});\n\nexport const sandboxAccountConfigSchema = z.object({\n  encryptedKey: nonEmptyStringSchema,\n  publicKeyHash: publicKeyHashSchema,\n  secretKey: nonEmptyStringSchema,\n});\n\nexport const sandboxConfigSchema = z.object({\n  label: nonEmptyStringSchema,\n  rpcUrl: urlSchema,\n  protocol: economicalProtocolHashSchema.optional(),\n  plugin: verbSchema.optional(),\n  accounts: z\n    .record(z.union([sandboxAccountConfigSchema, nonEmptyStringSchema]))\n    .optional(),\n  tzkt: tzKtConfigSchema.optional(),\n  annotations: z.record(z.unknown()).optional(),\n});\n\nexport const scaffoldConfigSchema = z.object({\n  postInit: z.string().optional(),\n});\n\nexport const taskSchema = z.object({\n  task: verbSchema,\n  command: commandSchema,\n  aliases: z.array(aliasSchema).optional(),\n  description: nonEmptyStringSchema.min(3).optional(),\n  example: nonEmptyStringSchema.optional(),\n  hidden: z.boolean().optional(),\n  encoding: pluginResponseEncodingSchema.optional(),\n  handler: z.union([z.literal(\"proxy\"), nonEmptyStringSchema]),\n  options: z.array(optionSchema).optional(),\n  positionals: z.array(positionalArgSchema).optional(),\n});\n\nexport const persistentStateSchema = z.object({\n  operations: z.record(persistedOperationSchema),\n  tasks: z.record(persistedTaskSchema),\n});\n\nexport const configAccountSchema = z.object({\n  balance: currencyAmountV2Schema,\n});\n\nexport const configFileV2Schema = z.object({\n  version: versionV2Schema,\n  language: humanLanguageSchema.optional(),\n  metadata: metadataConfigSchema.optional(),\n  artifactsDir: configArtifactsDirSchema.optional(),\n  contractsDir: configContractsDirSchema.optional(),\n  accounts: z.record(configAccountSchema).optional(),\n  contracts: z.record(contractSchema).optional(),\n  environmentDefault: environmentNameSchema.optional(),\n  environments: z.record(configEnvironmentFileV2Schema).optional(),\n  plugins: z.array(installedPluginSchema).optional(),\n});\n\nexport const networkConfigSchema = z.object({\n  label: humanReadableIdentifierSchema,\n  rpcUrl: urlSchema,\n  accounts: z.record(networkAccountConfigSchema).optional(),\n  faucet: faucetSchema.optional(),\n});\n\nconst pluginSchemaBaseSchema = z.object({\n  name: nonEmptyStringSchema,\n  version: versionNumberSchema,\n  schema: versionNumberSchema,\n  alias: aliasSchema,\n  tasks: z.array(taskSchema).optional(),\n});\n\nexport const configSchema = z.object({\n  language: humanLanguageSchema.optional(),\n  metadata: metadataConfigSchema.optional(),\n  artifactsDir: configArtifactsDirSchema.optional(),\n  contractsDir: configContractsDirSchema.optional(),\n  contracts: z.record(contractSchema).optional(),\n  plugins: z.array(installedPluginSchema).optional(),\n  accounts: z.record(tzSchema).optional(),\n  environment: z.record(z.union([environmentSchema, environmentNameSchema])),\n  network: z.record(networkConfigSchema).optional(),\n  sandbox: z.record(sandboxConfigSchema).optional(),\n});\n\nexport const configFileV1Schema = z.object({\n  language: humanLanguageSchema.optional(),\n  plugins: z.array(installedPluginSchema).optional(),\n  contractsDir: configContractsDirSchema.optional(),\n  artifactsDir: configArtifactsDirSchema.optional(),\n  network: z.record(networkConfigSchema).optional(),\n  sandbox: z.record(sandboxConfigSchema).optional(),\n  environment: z\n    .record(z.union([environmentSchema, environmentNameSchema]))\n    .optional(),\n  accounts: z.record(tzSchema).optional(),\n  contracts: z.record(contractSchema).optional(),\n  metadata: metadataConfigSchema.optional(),\n});\n\nexport const loadedConfigSchema = configSchema.extend(\n({\n    projectDir: sanitizedAbsPathSchema,\n    configFile: sanitizedAbsPathSchema,\n    hash: sha256Schema,\n  })\n);\n\nexport const parsedConfigSchema = configSchema.omit({ sandbox: true }).extend(\n({\n    sandbox: z.record(z.union([sandboxConfigSchema, nonEmptyStringSchema])),\n  })\n);\n\nexport const requestArgsSchema = sanitizedArgsSchema\n  .omit({ quickstart: true })\n  .extend(\n({\n      taqRun: pluginActionNameSchema,\n      config: loadedConfigSchema,\n    })\n  ).passthrough();\n\nexport const proxyTaskArgsSchema = requestArgsSchema.extend(\n({\n    task: nonEmptyStringSchema,\n  })\n).passthrough();\n\nexport const proxyTemplateArgsSchema = requestArgsSchema.extend(\n({\n    template: nonEmptyStringSchema,\n  })\n).passthrough();\n\nexport const operationSchema = z.object({\n  operation: verbSchema,\n  command: commandSchema,\n  description: nonEmptyStringSchema.optional(),\n  positionals: z.array(positionalArgSchema).optional(),\n  options: z.array(optionSchema).optional(),\n  handler: z\n    .function()\n    .args(persistentStateSchema)\n    .returns(z.function().args(requestArgsSchema).returns(z.void()))\n    .optional(),\n});\n\nexport const parsedOperationSchema = operationSchema.omit({ handler: true });\n\nconst templateHandlerSchema = z.union([\n  nonEmptyStringSchema,\n  z\n    .function()\n    .args(requestArgsSchema)\n    .returns(\n      z.union([pluginJsonResponseSchema, z.promise(pluginJsonResponseSchema)])\n    ),\n  z.promise(z.void()),\n]);\n\nexport const templateSchema = z.object({\n  template: verbSchema,\n  command: commandSchema,\n  description: nonEmptyStringSchema,\n  hidden: z.boolean().optional(),\n  options: z.array(optionSchema).optional(),\n  positionals: z.array(positionalArgSchema).optional(),\n  handler: templateHandlerSchema,\n  encoding: pluginResponseEncodingSchema.optional(),\n});\n\nexport const parsedTemplateSchema = templateSchema.omit({ handler: true }).extend(\n({\n    handler: z.string(),\n  })\n);\n\nexport const pluginInfoSchema = pluginSchemaBaseSchema.extend(\n({\n    operations: z.array(parsedOperationSchema).optional(),\n    templates: z.array(parsedTemplateSchema).optional(),\n  })\n);\n\nexport const pluginSchemaSchema = pluginSchemaBaseSchema.extend(\n({\n    operations: z.array(operationSchema).optional(),\n    templates: z.array(templateSchema).optional(),\n    proxy: z\n      .function()\n      .args(requestArgsSchema)\n      .returns(z.promise(pluginProxyResponseSchema))\n      .optional(),\n    checkRuntimeDependencies: z\n      .function()\n      .args(requestArgsSchema)\n      .returns(z.promise(pluginDependenciesResponseSchema))\n      .optional(),\n    installRuntimeDependencies: z\n      .function()\n      .args(requestArgsSchema)\n      .returns(z.promise(pluginDependenciesResponseSchema))\n      .optional(),\n  })\n);\n\nexport const ephemeralStateSchema = z.object({\n  build: z.string(),\n  configHash: z.string(),\n  tasks: z.record(installedPluginSchema.and(taskSchema)),\n  operations: z.record(installedPluginSchema.and(parsedOperationSchema)),\n  templates: z.record(installedPluginSchema.and(parsedTemplateSchema)),\n  plugins: z.array(pluginInfoSchema),\n});\n","// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '../../TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { Alias } from '../../types';\nimport { Alias as AliasStrict } from '../types-strict';\nimport { aliasSchema } from '../types-zod';\n\nexport type { AliasStrict as Alias };\n\nexport const from = (input: unknown): AliasStrict => {\n\ttry {\n\t\treturn aliasSchema.parse(input) as AliasStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"Alias is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a Alias.\")\n\t}\n    \n};\n\nexport const create = (input: Alias): AliasStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, AliasStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<AliasStrict, '__type'>): FutureInstance<TaqError, AliasStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: aliasSchema,\n\tschema: aliasSchema.transform(val => val as AliasStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = aliasSchema;\n\nexport type t = AliasStrict;\n        ","// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '../../TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { ParsedTemplate } from '../../types';\nimport { ParsedTemplate as ParsedTemplateStrict } from '../types-strict';\nimport { parsedTemplateSchema } from '../types-zod';\n\nexport type { ParsedTemplateStrict as ParsedTemplate };\n\nexport const from = (input: unknown): ParsedTemplateStrict => {\n\ttry {\n\t\treturn parsedTemplateSchema.parse(input) as ParsedTemplateStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"ParsedTemplate is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a ParsedTemplate.\")\n\t}\n    \n};\n\nexport const create = (input: ParsedTemplate): ParsedTemplateStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, ParsedTemplateStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<ParsedTemplateStrict, '__type'>): FutureInstance<TaqError, ParsedTemplateStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: parsedTemplateSchema,\n\tschema: parsedTemplateSchema.transform(val => val as ParsedTemplateStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = parsedTemplateSchema;\n\nexport type t = ParsedTemplateStrict;\n        ","// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '../../TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { Task } from '../../types';\nimport { Task as TaskStrict } from '../types-strict';\nimport { taskSchema } from '../types-zod';\n\nexport type { TaskStrict as Task };\n\nexport const from = (input: unknown): TaskStrict => {\n\ttry {\n\t\treturn taskSchema.parse(input) as TaskStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"Task is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a Task.\")\n\t}\n    \n};\n\nexport const create = (input: Task): TaskStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, TaskStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<TaskStrict, '__type'>): FutureInstance<TaqError, TaskStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: taskSchema,\n\tschema: taskSchema.transform(val => val as TaskStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = taskSchema;\n\nexport type t = TaskStrict;\n        ","// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '../../TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { VersionNumber } from '../../types';\nimport { VersionNumber as VersionNumberStrict } from '../types-strict';\nimport { versionNumberSchema } from '../types-zod';\n\nexport type { VersionNumberStrict as VersionNumber };\n\nexport const from = (input: unknown): VersionNumberStrict => {\n\ttry {\n\t\treturn versionNumberSchema.parse(input) as VersionNumberStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"VersionNumber is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a VersionNumber.\")\n\t}\n    \n};\n\nexport const create = (input: VersionNumber): VersionNumberStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, VersionNumberStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<VersionNumberStrict, '__type'>): FutureInstance<TaqError, VersionNumberStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: versionNumberSchema,\n\tschema: versionNumberSchema.transform(val => val as VersionNumberStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = versionNumberSchema;\n\nexport type t = VersionNumberStrict;\n        ","import * as Alias from './Alias';\nimport createType, { Flatten } from './Base';\nimport * as ParsedOperation from './ParsedOperation';\nimport * as ParsedTemplate from './ParsedTemplate';\nimport * as Task from './Task';\nimport * as VersionNumber from './VersionNumber';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tname: z.string({ description: 'Plugin Name' }).min(1),\n\tversion: VersionNumber.rawSchema.describe('Plugin Version #'),\n\tschema: VersionNumber.rawSchema.describe('Plugin Schema Version #'),\n\talias: Alias.rawSchema.describe('Plugin Alias'),\n\ttasks: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTask.schemas.schema.describe('Plugin Task'),\n\t\t\t{ description: 'Plugin Tasks' },\n\t\t),\n\t).optional(),\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.schemas.schema.describe('Plugin Operation'),\n\t\t\t{ description: 'Plugin Operations' },\n\t\t),\n\t).optional(),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedTemplate.schemas.schema.describe('Plugin Template'),\n\t\t),\n\t).optional(),\n});\n\nexport const internalSchema = rawSchema.extend({\n\tversion: VersionNumber.schemas.schema.describe('Plugin Version #'),\n\tschema: VersionNumber.schemas.schema.describe('Plugin Schema Version #'),\n\talias: Alias.schemas.schema.describe('Plugin Alias'),\n\ttasks: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTask.schemas.schema.describe('Plugin Task'),\n\t\t\t{ description: 'Plugin Tasks' },\n\t\t),\n\t).optional(),\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.schemas.schema.describe('Plugin Operation'),\n\t\t\t{ description: 'Plugin Operations' },\n\t\t),\n\t).optional(),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedTemplate.schemas.schema.describe('Plugin Template'),\n\t\t),\n\t).optional(),\n}).describe('Plugin Schema');\n\n// export const rawSchema = internalSchema;\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = Flatten<z.infer<typeof internalSchema>>;\n\nexport const { schemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: 'The schema returned from the plugin is invalid',\n\tunknownErrMsg: 'Something went wrong parsing the schema from a plugin',\n});\n\nexport type PluginInfo = Flatten<z.infer<typeof schemas.schema>>;\nexport type t = PluginInfo;\nexport const { create, of, make } = factory;\n"],"mappings":"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","names":["create","factory","make","of","rawSchema","schemas","import_fluture","rawSchema","internalSchema","schemas","of","make","create","factory","import_fluture","import_zod","import_zod","import_fluture","import_zod","schemas","rawSchema","import_fluture","import_zod","schemas","rawSchema","import_fluture","import_zod","schemas","rawSchema","import_fluture","import_zod","schemas","rawSchema","import_zod","rawSchema","schemas","create","import_zod","internalSchema","rawSchema","factory","create","of","make","schemas"]}