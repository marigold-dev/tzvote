"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entrypointNameEncoderProto14 = exports.valueParameterDecoderProto14 = exports.valueParameterEncoderProto14 = exports.parametersEncoderProto14 = exports.entrypointDecoderProto14 = exports.entrypointEncoderProto14 = exports.parametersDecoderProto14 = void 0;
const error_1 = require("../error");
const constants_1 = require("../constants");
const codec_proto14_1 = require("./michelson/codec-proto14");
const codec_1 = require("../michelson/codec");
const uint8array_consumer_1 = require("../uint8array-consumer");
const utils_1 = require("../utils");
const constants_proto14_1 = require("./constants-proto14");
const parametersDecoderProto14 = (val) => {
    const preamble = val.consume(1);
    if (preamble[0] === 0x00) {
        return;
    }
    else {
        const encodedEntrypoint = exports.entrypointDecoderProto14(val);
        const params = codec_1.extractRequiredLen(val);
        const parameters = codec_proto14_1.valueDecoderProto14(new uint8array_consumer_1.Uint8ArrayConsumer(params));
        return {
            entrypoint: encodedEntrypoint,
            value: parameters,
        };
    }
};
exports.parametersDecoderProto14 = parametersDecoderProto14;
const entrypointEncoderProto14 = (entrypoint) => {
    if (entrypoint in constants_proto14_1.entrypointMappingReverseProto14) {
        return `${constants_proto14_1.entrypointMappingReverseProto14[entrypoint]}`;
    }
    else {
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        const value = { string: entrypoint };
        return `ff${codec_proto14_1.valueEncoderProto14(value).slice(8)}`;
    }
};
exports.entrypointEncoderProto14 = entrypointEncoderProto14;
const entrypointDecoderProto14 = (value) => {
    const preamble = utils_1.pad(value.consume(1)[0], 2);
    if (preamble in constants_proto14_1.entrypointMappingProto14) {
        return constants_proto14_1.entrypointMappingProto14[preamble];
    }
    else {
        const entry = codec_1.extractRequiredLen(value, 1);
        const entrypoint = Buffer.from(entry).toString('utf8');
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        return entrypoint;
    }
};
exports.entrypointDecoderProto14 = entrypointDecoderProto14;
const parametersEncoderProto14 = (val) => {
    if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {
        return '00';
    }
    const encodedEntrypoint = exports.entrypointEncoderProto14(val.entrypoint);
    const parameters = codec_proto14_1.valueEncoderProto14(val.value);
    const length = (parameters.length / 2).toString(16).padStart(8, '0');
    return `ff${encodedEntrypoint}${length}${parameters}`;
};
exports.parametersEncoderProto14 = parametersEncoderProto14;
const valueParameterEncoderProto14 = (value) => {
    const valueEncoded = codec_proto14_1.valueEncoderProto14(value);
    return `${utils_1.pad(valueEncoded.length / 2)}${valueEncoded}`;
};
exports.valueParameterEncoderProto14 = valueParameterEncoderProto14;
const valueParameterDecoderProto14 = (val) => {
    const value = codec_1.extractRequiredLen(val);
    return codec_proto14_1.valueDecoderProto14(new uint8array_consumer_1.Uint8ArrayConsumer(value));
};
exports.valueParameterDecoderProto14 = valueParameterDecoderProto14;
const entrypointNameEncoderProto14 = (entrypoint) => {
    const value = { string: entrypoint };
    return `${codec_proto14_1.valueEncoderProto14(value).slice(2)}`;
};
exports.entrypointNameEncoderProto14 = entrypointNameEncoderProto14;
//# sourceMappingURL=codec-proto14.js.map