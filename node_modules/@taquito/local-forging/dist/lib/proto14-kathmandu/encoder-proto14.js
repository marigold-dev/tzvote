"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodersProto14 = void 0;
const codec_1 = require("../codec");
const constants_1 = require("../constants");
const codec_proto14_1 = require("./codec-proto14");
const codec_proto14_2 = require("./michelson/codec-proto14");
const operation_1 = require("../schema/operation");
exports.encodersProto14 = {
    [constants_1.CODEC.SECRET]: (val) => val,
    [constants_1.CODEC.RAW]: (val) => val,
    [constants_1.CODEC.TZ1]: codec_1.tz1Encoder,
    [constants_1.CODEC.BRANCH]: codec_1.branchEncoder,
    [constants_1.CODEC.ZARITH]: codec_1.zarithEncoder,
    [constants_1.CODEC.PUBLIC_KEY]: codec_1.publicKeyEncoder,
    [constants_1.CODEC.PKH]: codec_1.pkhEncoder,
    [constants_1.CODEC.DELEGATE]: codec_1.delegateEncoder,
    [constants_1.CODEC.SCRIPT]: codec_proto14_2.scriptEncoderProto14,
    [constants_1.CODEC.BALLOT_STATEMENT]: codec_1.ballotEncoder,
    [constants_1.CODEC.PROPOSAL]: codec_1.proposalEncoder,
    [constants_1.CODEC.PROPOSAL_ARR]: codec_1.proposalsEncoder,
    [constants_1.CODEC.INT32]: codec_1.int32Encoder,
    [constants_1.CODEC.PARAMETERS]: codec_proto14_1.parametersEncoderProto14,
    [constants_1.CODEC.ADDRESS]: codec_1.addressEncoder,
    [constants_1.CODEC.SMART_CONTRACT_ADDRESS]: codec_1.smartContractAddressEncoder,
    [constants_1.CODEC.VALUE]: codec_proto14_1.valueParameterEncoderProto14,
    [constants_1.CODEC.INT16]: codec_1.int16Encoder,
    [constants_1.CODEC.BLOCK_PAYLOAD_HASH]: codec_1.blockPayloadHashEncoder,
    [constants_1.CODEC.ENTRYPOINT]: codec_proto14_1.entrypointNameEncoderProto14,
    [constants_1.CODEC.TX_ROLLUP_ORIGINATION_PARAM]: codec_1.txRollupOriginationParamEncoder,
    [constants_1.CODEC.TX_ROLLUP_ID]: codec_1.txRollupIdEncoder,
    [constants_1.CODEC.TX_ROLLUP_BATCH_CONTENT]: codec_1.txRollupBatchContentEncoder,
    [constants_1.CODEC.BURN_LIMIT]: codec_1.burnLimitEncoder,
};
exports.encodersProto14[constants_1.CODEC.OPERATION] = operation_1.operationEncoder(exports.encodersProto14);
exports.encodersProto14[constants_1.CODEC.OP_ACTIVATE_ACCOUNT] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.ActivationSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_DELEGATION] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.DelegationSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_TRANSACTION] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.TransactionSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_ORIGINATION] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.OriginationSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_BALLOT] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.BallotSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_ENDORSEMENT] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.EndorsementSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_SEED_NONCE_REVELATION] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.SeedNonceRevelationSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_PROPOSALS] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.ProposalsSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_REVEAL] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.RevealSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.RegisterGlobalConstantSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_TRANSFER_TICKET] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.TransferTicketSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.TxRollupOriginationSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.TxRollupSubmitBatchSchema)(val);
exports.encodersProto14[constants_1.CODEC.OP_INCREASE_PAID_STORAGE] = (val) => operation_1.schemaEncoder(exports.encodersProto14)(operation_1.IncreasePaidStorageSchema)(val);
exports.encodersProto14[constants_1.CODEC.MANAGER] = operation_1.schemaEncoder(exports.encodersProto14)(operation_1.ManagerOperationSchema);
//# sourceMappingURL=encoder-proto14.js.map