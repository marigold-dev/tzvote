{"version":3,"file":"taquito-signer.umd.js","sources":["../src/ed-key.ts","../src/ec-key.ts","../src/errors.ts","../src/derivation-tools/utils.ts","../src/derivation-tools/ecdsa.ts","../src/derivation-tools/index.ts","../src/derivation-tools/ed25519.ts","../src/helpers.ts","../src/import-key.ts","../src/version.ts","../src/taquito-signer.ts"],"sourcesContent":["import { hash } from '@stablelib/blake2b';\nimport { generateKeyPairFromSeed, sign } from '@stablelib/ed25519';\nimport {\n  b58cencode,\n  b58cdecode,\n  prefix,\n  buf2hex,\n  isValidPrefix,\n  InvalidKeyError,\n} from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n\n/**\n * @description Provide signing logic for ed25519 curve based key (tz1)\n */\nexport class Tz1 {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n  private isInit: Promise<boolean>;\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(private key: string, encrypted: boolean, decrypt: (k: any) => any) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new InvalidKeyError(key, 'Key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    this._publicKey = this._key.slice(32);\n\n    if (!this._key) {\n      throw new InvalidKeyError(key, 'Unable to decode');\n    }\n\n    this.isInit = this.init();\n  }\n\n  private async init() {\n    if (this._key.length !== 64) {\n      const { publicKey, secretKey } = generateKeyPairFromSeed(new Uint8Array(this._key));\n      this._publicKey = publicKey;\n      this._key = secretKey;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    await this.isInit;\n    const signature = sign(new Uint8Array(this._key), new Uint8Array(bytesHash));\n    const signatureBuffer = toBuffer(signature);\n    const sbytes = bytes + buf2hex(signatureBuffer);\n\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, prefix.edsig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    await this.isInit;\n    return b58cencode(this._publicKey, prefix['edpk']);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await this.isInit;\n    return b58cencode(hash(new Uint8Array(this._publicKey), 20), prefix.tz1);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    await this.isInit;\n    let key = this._key;\n    const { secretKey } = generateKeyPairFromSeed(new Uint8Array(key).slice(0, 32));\n    key = toBuffer(secretKey);\n\n    return b58cencode(key, prefix[`edsk`]);\n  }\n}\n","import { hash } from '@stablelib/blake2b';\nimport { b58cencode, b58cdecode, prefix, isValidPrefix, InvalidKeyError } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport elliptic from 'elliptic';\n\nconst pref = {\n  p256: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  secp256k1: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\n/**\n * @description Provide signing logic for elliptic curve based key (tz2, tz3)\n */\nexport class ECKey {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n\n  /**\n   *\n   * @param curve Curve to use with the key\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(\n    private curve: 'p256' | 'secp256k1',\n    private key: string,\n    encrypted: boolean,\n    decrypt: (k: any) => any\n  ) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new InvalidKeyError(key, 'Key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    const keyPair = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const keyPairY = keyPair.getPublic().getY().toArray();\n    const parityByte = keyPairY.length < 32 ? keyPairY[keyPairY.length - 1] : keyPairY[31];\n    const pref = parityByte % 2 ? 3 : 2;\n    const pad = new Array(32).fill(0);\n    this._publicKey = toBuffer(\n      new Uint8Array([pref].concat(pad.concat(keyPair.getPublic().getX().toArray()).slice(-32)))\n    );\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    const key = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const sig = key.sign(bytesHash, { canonical: true });\n    const signature = sig.r.toString('hex', 64) + sig.s.toString('hex', 64);\n\n    const sbytes = bytes + signature;\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, pref[this.curve].sig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return b58cencode(this._publicKey, pref[this.curve].pk);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return b58cencode(hash(new Uint8Array(this._publicKey), 20), pref[this.curve].pkh);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    const key = this._key;\n\n    return b58cencode(key, pref[this.curve].sk);\n  }\n}\n\n/**\n * @description Tz3 key class using the p256 curve\n */\nexport const Tz3 = ECKey.bind(null, 'p256');\n\n/**\n * @description Tz2 key class using the secp256k1 curve\n */\nexport const Tz2 = ECKey.bind(null, 'secp256k1');\n","export class InvalidDerivationPathError extends Error {\n  public name = 'InvalidDerivationPathError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport class InvalidMnemonicError extends Error {\n  public name = 'InvalidMnemonicError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport class InvalidBitSize extends Error {\n  public name = 'InvalidBitSize';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport class InvalidCurveError extends Error {\n  public name = 'InvalidCurveError';\n  constructor(public curve: string) {\n    super(`This Curve is not supported: ${curve}`);\n  }\n}\n\nexport class InvalidSeedLengthError extends Error {\n  public name = 'InvalidSeedLengthError';\n  constructor(public seedLength: number) {\n    super(`The seed has an invalid length: ${seedLength}`);\n  }\n}\n\nexport class PrivateKeyError extends Error {\n  public name = 'PrivateKeyError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport class ToBeImplemented extends Error {\n  public name = 'ToBeImplemented';\n  constructor() {\n    super('This feature is under developement');\n  }\n}\n","import { InvalidHexStringError } from '@taquito/utils';\n\nexport function parseHex(s: string): Uint8Array {\n  const res: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const ss = s.slice(i, i + 2);\n    const x = parseInt(ss, 16);\n    if (Number.isNaN(x)) {\n      throw new InvalidHexStringError(`invalid hexadecimal number ${ss}`);\n    }\n    res.push(x);\n  }\n  return new Uint8Array(res);\n}\n","/* eslint-disable @typescript-eslint/no-this-alias */\nimport { ec, curve } from 'elliptic';\nimport { Hard, ExtendedPrivateKey } from './index';\nimport { HMAC } from '@stablelib/hmac';\nimport { SHA512 } from '@stablelib/sha512';\nimport BN from 'bn.js';\nimport { parseHex } from './utils';\nimport { InvalidBitSize, InvalidCurveError, InvalidSeedLengthError, PrivateKeyError } from '../errors';\n\nexport type CurveName = 'p256' | 'secp256k1';\n\nconst seedKey: Record<CurveName, string> = {\n  p256: 'Nist256p1 seed',\n  secp256k1: 'Bitcoin seed',\n};\n\ninterface KeyPair extends ec.KeyPair {\n  priv: BN | null;\n  pub: curve.base.BasePoint | null;\n}\n\n// MinSeedSize is the minimal allowed seed byte length\nconst minSeedSize = 16;\n// MaxSeedSize is the maximal allowed seed byte length\nconst maxSeedSize = 64;\n\nexport class PrivateKey implements ExtendedPrivateKey {\n  readonly keyPair: KeyPair;\n  /**\n   *\n   * @param priv key pair priv (BN) pub (curve.base.BasePint) if applicable\n   * @param chainCode slice 32->n HMAC hash key and seedkey (first instance curve default seedKey. after hmac value slice 32->n)\n   */\n  constructor(priv: ec.KeyPair, public readonly chainCode: Uint8Array) {\n    this.keyPair = <KeyPair>priv;\n  }\n  /**\n   * @param seedSrc result of Bip39.mnemonicToSeed\n   * @param curve known supported curve p256 or secp256k1\n   * @returns instance of PrivateKey non-HD keys derived\n   */\n  static fromSeed(seedSrc: Uint8Array | string, curve: CurveName): PrivateKey {\n    let seed = typeof seedSrc === 'string' ? parseHex(seedSrc) : seedSrc;\n    if (seed.length < minSeedSize || seed.length > maxSeedSize) {\n      throw new InvalidSeedLengthError(seed.length);\n    }\n    if (!Object.prototype.hasOwnProperty.call(seedKey, curve)) {\n      throw new InvalidCurveError(`unknown curve ${curve}`);\n    }\n    const c = new ec(curve);\n    if (c.n?.bitLength() !== 256) {\n      throw new InvalidBitSize(`invalid curve bit size ${c.n?.bitLength()}`);\n    }\n\n    const key = new TextEncoder().encode(seedKey[curve]);\n    let d: BN | null = null;\n    let chain: Uint8Array = new Uint8Array();\n    let i = 0;\n    while (i === 0) {\n      const sum = new HMAC(SHA512, key).update(seed).digest();\n      d = new BN(sum.subarray(0, 32));\n      chain = sum.subarray(32);\n      if (d.isZero() || d.cmp(c.n as BN) >= 0) {\n        seed = sum;\n      } else {\n        i++;\n      }\n    }\n\n    const keyPair = <KeyPair>c.keyPair({});\n    keyPair.priv = d;\n    return new PrivateKey(keyPair, chain);\n  }\n  /**\n   *\n   * @param index derivation path item pre-hardened if applicable ie: 44' -> 2^31 + 44\n   * @returns child PrivateKey of the current PrivateKey\n   */\n  derive(index: number): PrivateKey {\n    const data = new Uint8Array(37);\n    if ((index & Hard) !== 0) {\n      // hardened derivation\n      data.set(this.keyPair.getPrivate().toArray(), 1);\n    } else {\n      data.set(this.keyPair.getPublic().encodeCompressed(), 0);\n    }\n    new DataView(data.buffer).setUint32(33, index);\n\n    let d: BN = new BN(0);\n    let chain: Uint8Array = new Uint8Array;\n    let i = 0;\n    while (i === 0) {\n      const sum = new HMAC(SHA512, this.chainCode).update(data).digest();\n      d = new BN(sum.subarray(0, 32));\n      chain = sum.subarray(32);\n      if (this.keyPair.ec.n && d.cmp(this.keyPair.ec.n as BN) < 0) {\n        d = d.add(this.keyPair.getPrivate() as BN).mod(this.keyPair.ec.n as BN);\n        if (!d.isZero()) {\n          i++;\n        }\n      }\n      data.set(chain, 1);\n      data[0] = 1;\n    }\n    const keyPair = <KeyPair>this.keyPair.ec.keyPair({});\n    keyPair.priv = d;\n    return new PrivateKey(keyPair, chain);\n  }\n  /**\n   *\n   * @param path pre-hardened (if applicable) derivation path items ie 44'/1729'/0/0 -> 2^31 + 44/2^31 + 1729/0/0\n   * @returns final child of the full HD keys derivation\n   */\n  derivePath(path: Iterable<number>): PrivateKey {\n    let key: PrivateKey = this;\n    for (const x of path) {\n      key = key.derive(x);\n    }\n    return key;\n  }\n  /**\n   *\n   * @returns Uint8Array (if contains a private key)\n   */\n  bytes(): Uint8Array {\n    if (!this.keyPair.priv) {\n      throw new PrivateKeyError('not a private key');\n    }\n    // pad to 32 bytes as toArray() length argument seems to be ignored (BN bug)\n    const src = this.keyPair.priv.toArray();\n    const out = new Uint8Array(32);\n    out.set(src, out.length - src.length);\n    return out;\n  }\n}\n\n","import { InvalidDerivationPathError } from '../errors';\n\nexport * as ECDSA from './ecdsa';\nexport * as Ed25519 from './ed25519';\n\nexport const Hard = 0x80000000;\n\nexport interface ExtendedKey {\n  readonly chainCode: Uint8Array;\n  derive(index: number): ExtendedKey;\n  derivePath(path: Iterable<number>): ExtendedKey;\n}\n\nexport interface ExtendedPrivateKey extends ExtendedKey {\n  derive(index: number): ExtendedPrivateKey;\n  derivePath(path: number[]): ExtendedPrivateKey;\n}\n\nexport class Path extends Array<number> {\n  static from(iterable: Iterable<number> | ArrayLike<number>): Path {\n    return super.from(iterable).map((x) => x >>> 0);\n  }\n  /**\n   *\n   * @param s derivation path eg: 44'/1729'/0'/0'\n   * @returns applied hardened values\n   */\n  static fromString(s: string): Path {\n    if (s.length === 0) {\n      return new Path();\n    }\n    let parts = s.split('/');\n    const out: number[] = [];\n    if (parts[0] === 'm') {\n      parts = parts.slice(1);\n    }\n    for (let p of parts) {\n      if (p.length === 0) {\n        throw new InvalidDerivationPathError(`invalid BIP32 path: ${s}`);\n      }\n      let h = 0;\n      const last = p[p.length - 1];\n      if (last === \"'\" || last === 'h' || last === 'H') {\n        h = Hard;\n        p = p.slice(0, p.length - 1);\n      }\n      const index = (parseInt(p, 10) | h) >>> 0;\n      out.push(index);\n    }\n    return Path.from(out);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-this-alias */\nimport { HMAC } from '@stablelib/hmac';\nimport { SHA512 } from '@stablelib/sha512';\nimport { generateKeyPairFromSeed } from '@stablelib/ed25519';\nimport { ExtendedPrivateKey, Hard } from './index';\nimport { parseHex } from './utils';\nimport { InvalidDerivationPathError, InvalidSeedLengthError } from '../errors';\n\n// MinSeedSize is the minimal allowed seed byte length\nconst minSeedSize = 16;\n// MaxSeedSize is the maximal allowed seed byte length\nconst maxSeedSize = 64;\n\nconst ed25519Key = 'ed25519 seed';\n\nexport class PrivateKey implements ExtendedPrivateKey {\n  /**\n   *\n   * @param priv generated keypair 0->32 private key 32->n public key\n   * @param chainCode new HMAC hash with new key\n   */\n  constructor(readonly priv: Uint8Array, readonly chainCode: Uint8Array) {}\n\n  /**\n   *\n   * @param seedSrc result of Bip39.mnemonicToSeed\n   * @returns instance of PrivateKey\n   */\n  static fromSeed(seedSrc: Uint8Array | string): PrivateKey {\n    const seed = typeof seedSrc === 'string' ? parseHex(seedSrc) : seedSrc;\n    if (seed.length < minSeedSize || seed.length > maxSeedSize) {\n      throw new InvalidSeedLengthError(seed.length);\n    }\n    const key = new TextEncoder().encode(ed25519Key);\n    const sum = new HMAC(SHA512, key).update(seed).digest();\n    return new PrivateKey(generateKeyPairFromSeed(sum.subarray(0, 32)).secretKey, sum.subarray(32));\n  }\n  /**\n   *\n   * @returns slice(0, 32) of current priv for new seed for next derived priv\n   */\n  seed(): Uint8Array {\n    return this.priv.subarray(0, 32);\n  }\n  /**\n   * @index current derivation path item ie: 1729'\n   * @returns derivation path child of original private key pair\n   */\n  derive(index: number): PrivateKey {\n    if ((index & Hard) === 0) {\n      throw new InvalidDerivationPathError('Non-hardened derivation path');\n    }\n    const data = new Uint8Array(37);\n    data.set(this.seed(), 1);\n    new DataView(data.buffer).setUint32(33, index);\n    const sum = new HMAC(SHA512, this.chainCode).update(data).digest();\n    return new PrivateKey(generateKeyPairFromSeed(sum.subarray(0, 32)).secretKey, sum.subarray(32));\n  }\n  /**\n   * @param path array of numbers pre adjusted for hardened paths ie: 44' -> 2^31 + 44\n   * @returns final child of full derivation path private key pair\n   */\n  derivePath(path: Iterable<number>): PrivateKey {\n    let key: PrivateKey = this;\n    for (const index of path) {\n      key = key.derive(index);\n    }\n    return key;\n  }\n}\n","import { b58cencode, prefix } from \"@taquito/utils\";\nimport { PrivateKey as PrivateKeyEd } from \"./derivation-tools/ed25519\";\nimport { PrivateKey as PrivateKeyEc } from \"./derivation-tools/ecdsa\";\nimport { Path } from \"./derivation-tools\";\nimport { InvalidCurveError, ToBeImplemented } from \"./errors\";\n\nexport type Curves = 'ed25519' | 'secp256k1' | 'p256' | 'bip25519';\n\n// bip32 when supported add to @param curve bip25519\n/**\n *\n * @param seed bip39.mnemonicToSeed\n * @param derivationPath Tezos Requirement 44'/1729' for HD key address default 44'/1729'/0'/0'\n * @param curve 'ed25519' | 'secp256k1' | 'p256''\n * @returns final Derivation of HD keys tezos Secret key\n */\nexport const generateSecretKey = (seed: Uint8Array, derivationPath: string, curve: Curves) => {\n  const path = Path.fromString(derivationPath);\n  let node: PrivateKeyEc | PrivateKeyEd;\n\n  switch (curve) {\n    case 'ed25519': {\n      node = PrivateKeyEd.fromSeed(seed).derivePath(path);\n      const sk = b58cencode(node.seed().slice(0, 32), prefix.edsk2);\n      return sk;\n    }\n    case 'secp256k1':\n    case 'p256': {\n      const prefixType = curve === 'secp256k1' ? prefix.spsk : prefix.p2sk;\n      let privKey = PrivateKeyEc.fromSeed(seed, curve);\n      privKey = privKey.derivePath(path);\n      const uint8arr = new Uint8Array(privKey.keyPair.getPrivate().toArray());\n      const sk = b58cencode(uint8arr, prefixType);\n      return sk;\n    }\n    case 'bip25519': {\n      throw new ToBeImplemented();\n    }\n    default: {\n      throw new InvalidCurveError(curve);\n    }\n  }\n};\n","import { InMemorySigner } from './taquito-signer';\nimport { TezosToolkit } from '@taquito/taquito';\n\n/**\n *\n * @description Import a key to sign operation with the side-effect of setting the Tezos instance to use the InMemorySigner provider\n *\n * @warn The JSON faucets are no longer available on https://teztnets.xyz/\n * @param toolkit The toolkit instance to attach a signer\n * @param privateKeyOrEmail Key to load in memory\n * @param passphrase If the key is encrypted passphrase to decrypt it\n * @param mnemonic Faucet mnemonic\n * @param secret Faucet secret\n */\nexport async function importKey(\n  toolkit: TezosToolkit,\n  privateKeyOrEmail: string,\n  passphrase?: string,\n  mnemonic?: string,\n  secret?: string\n) {\n  if (privateKeyOrEmail && passphrase && mnemonic && secret) {\n    const signer = InMemorySigner.fromFundraiser(privateKeyOrEmail, passphrase, mnemonic);\n    toolkit.setProvider({ signer });\n    const pkh = await signer.publicKeyHash();\n    let op;\n    try {\n      op = await toolkit.tz.activate(pkh, secret);\n    } catch (ex: any) {\n      const isInvalidActivationError = ex && ex.body && /Invalid activation/.test(ex.body);\n      if (!isInvalidActivationError) {\n        throw ex;\n      }\n    }\n    if (op) {\n      await op.confirmation();\n    }\n  } else {\n    // Fallback to regular import\n    const signer = await InMemorySigner.fromSecretKey(privateKeyOrEmail, passphrase);\n    toolkit.setProvider({ signer });\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"178bea7c6a3b3c58f23163fcc72e28aa5f08702a\",\n    \"version\": \"15.1.0\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/signer\n */\nimport { openSecretBox } from '@stablelib/nacl';\nimport { hash } from '@stablelib/blake2b';\nimport { hex2buf, mergebuf, b58cencode, prefix, InvalidKeyError } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport { Tz1 } from './ed-key';\nimport { Tz2, ECKey, Tz3 } from './ec-key';\nimport pbkdf2 from 'pbkdf2';\nimport * as Bip39 from 'bip39';\nimport { Curves, generateSecretKey } from './helpers';\nimport { InvalidMnemonicError } from './errors';\n\nexport * from './import-key';\nexport { VERSION } from './version';\nexport * from './derivation-tools';\nexport * from './helpers';\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid passphrase being passed or used\n */\nexport class InvalidPassphraseError extends Error {\n  public name = 'InvalidPassphraseError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport interface FromMnemonicParams {\n  mnemonic: string;\n  password?: string;\n  derivationPath?: string;\n  curve?: Curves;\n}\n\n/**\n * @description A local implementation of the signer. Will represent a Tezos account and be able to produce signature in its behalf\n *\n * @warn If running in production and dealing with tokens that have real value, it is strongly recommended to use a HSM backed signer so that private key material is not stored in memory or on disk\n *\n */\nexport class InMemorySigner {\n  private _key!: Tz1 | ECKey;\n\n  static fromFundraiser(email: string, password: string, mnemonic: string) {\n    if (!Bip39.validateMnemonic(mnemonic)) {\n      throw new InvalidMnemonicError(`Invalid mnemonic: ${mnemonic}`);\n    }\n    const seed = Bip39.mnemonicToSeedSync(mnemonic, `${email}${password}`);\n    const key = b58cencode(seed.slice(0, 32), prefix.edsk2);\n    return new InMemorySigner(key);\n  }\n\n  static async fromSecretKey(key: string, passphrase?: string) {\n    return new InMemorySigner(key, passphrase);\n  }\n\n  /**\n   *\n   * @description Instantiation of an InMemorySigner instance from a mnemonic\n   * @param mnemonic 12-24 word mnemonic\n   * @param password password used to encrypt the mnemonic to seed value\n   * @param derivationPath default 44'/1729'/0'/0' (44'/1729' mandatory)\n   * @param curve currently only supported for tz1, tz2, tz3 addresses. soon bip25519\n   * @returns InMemorySigner\n   */\n  static fromMnemonic({ mnemonic, password = '', derivationPath = \"44'/1729'/0'/0'\", curve = 'ed25519' }: FromMnemonicParams) {\n    // check if curve is defined if not default tz1\n    if (!Bip39.validateMnemonic(mnemonic)) {\n      // avoiding exposing mnemonic again in case of mistake making invalid\n      throw new InvalidMnemonicError('Mnemonic provided is invalid');\n    }\n    const seed = Bip39.mnemonicToSeedSync(mnemonic, password);\n\n    const sk = generateSecretKey(seed, derivationPath, curve);\n\n    return new InMemorySigner(sk);\n  }\n  /**\n   *\n   * @param key Encoded private key\n   * @param passphrase Passphrase to decrypt the private key if it is encrypted\n   *\n   */\n  constructor(key: string, passphrase?: string) {\n    const encrypted = key.substring(2, 3) === 'e';\n\n    let decrypt = (k: any) => k;\n\n    if (encrypted) {\n      if (!passphrase) {\n        throw new InvalidPassphraseError('Encrypted key provided without a passphrase.');\n      }\n\n      decrypt = (constructedKey: Uint8Array) => {\n        const salt = toBuffer(constructedKey.slice(0, 8));\n        const encryptedSk = constructedKey.slice(8);\n        const encryptionKey = pbkdf2.pbkdf2Sync(passphrase, salt, 32768, 32, 'sha512');\n\n        return openSecretBox(\n          new Uint8Array(encryptionKey),\n          new Uint8Array(24),\n          new Uint8Array(encryptedSk)\n        );\n      };\n    }\n\n    switch (key.substr(0, 4)) {\n      case 'edes':\n      case 'edsk':\n        this._key = new Tz1(key, encrypted, decrypt);\n        break;\n      case 'spsk':\n      case 'spes':\n        this._key = new Tz2(key, encrypted, decrypt);\n        break;\n      case 'p2sk':\n      case 'p2es':\n        this._key = new Tz3(key, encrypted, decrypt);\n        break;\n      default:\n        throw new InvalidKeyError(key, 'Unsupported key type');\n    }\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param watermark Watermark to append to the bytes\n   */\n  async sign(bytes: string, watermark?: Uint8Array) {\n    let bb = hex2buf(bytes);\n    if (typeof watermark !== 'undefined') {\n      bb = mergebuf(watermark, bb);\n    }\n\n    const bytesHash = hash(bb, 32);\n\n    return this._key.sign(bytes, bytesHash);\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return this._key.publicKey();\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return this._key.publicKeyHash();\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    return this._key.secretKey();\n  }\n}\n"],"names":["isValidPrefix","InvalidKeyError","b58cdecode","prefix","generateKeyPairFromSeed","sign","toBuffer","buf2hex","b58cencode","hash","elliptic","InvalidHexStringError","minSeedSize","maxSeedSize","PrivateKey","ec","HMAC","SHA512","BN","PrivateKeyEd","PrivateKeyEc","pbkdf2","openSecretBox","Bip39","hex2buf","mergebuf"],"mappings":"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"}