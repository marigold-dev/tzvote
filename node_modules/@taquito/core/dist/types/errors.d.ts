/**
 *  @category Error
 *  @description Parent error class all taquito errors to extend from
 */
export declare class TaquitoError extends Error {
}
/**
 *  @category Error
 *  @description Error indicates invalid user inputs
 */
export declare class ParameterValidationError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error returned by RPC node
 */
export declare class RpcError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error indicates TezosToolKit has not been configured appropriately
 */
export declare class TezosToolkitConfigError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error indicates a requested action is not supported by Taquito
 */
export declare class UnsupportedActionError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error during a network operation
 */
export declare class NetworkError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error indicates user attempts an action without necessary permissions
 */
export declare class PermissionDeniedError extends TaquitoError {
}
/**
 *  @category Error
 *  @description Error indicates an invalid originated or implicit address being passed or used
 */
export declare class InvalidAddressError extends ParameterValidationError {
    readonly address: string;
    readonly errorDetail?: string | undefined;
    constructor(address: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid block hash being passed or used
 */
export declare class InvalidBlockHashError extends ParameterValidationError {
    readonly blockHash: string;
    readonly errorDetail?: string | undefined;
    constructor(blockHash: string, errorDetail?: string | undefined);
}
/**
 * @category Error
 * @description Error indicates an invalid amount of tez being passed as a parameter
 */
export declare class InvalidAmountError extends ParameterValidationError {
    readonly amount: string;
    constructor(amount: string);
}
/**
 *  @category Error
 *  @description Error indicates an invalid derivation path being passed or used
 */
export declare class InvalidDerivationPathError extends ParameterValidationError {
    readonly derivationPath: string;
    readonly errorDetail?: string | undefined;
    constructor(derivationPath: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid hex string have been passed or used
 */
export declare class InvalidHexStringError extends ParameterValidationError {
    readonly hexString: string;
    readonly errorDetail?: string | undefined;
    constructor(hexString: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid message being passed or used
 */
export declare class InvalidMessageError extends ParameterValidationError {
    readonly msg: string;
    readonly errorDetail?: string | undefined;
    constructor(msg: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates invalid view parameter of a smart contract
 */
export declare class InvalidViewParameterError extends ParameterValidationError {
    readonly viewName: string;
    readonly sigs: any;
    readonly args: any;
    readonly cause?: any;
    constructor(viewName: string, sigs: any, args: any, cause?: any);
}
/**
 *  @category Error
 *  @description Error indicates an invalid private key being passed or used
 */
export declare class InvalidKeyError extends ParameterValidationError {
    readonly errorDetail?: string | undefined;
    constructor(errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an Invalid Public Key being passed or used
 */
export declare class InvalidPublicKeyError extends ParameterValidationError {
    readonly publicKey: string;
    readonly errorDetail?: string | undefined;
    constructor(publicKey: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid signature being passed or used
 */
export declare class InvalidSignatureError extends ParameterValidationError {
    readonly signature: string;
    readonly errorDetail?: string | undefined;
    constructor(signature: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid contract address being passed or used
 */
export declare class InvalidContractAddressError extends ParameterValidationError {
    readonly contractAddress: string;
    readonly errorDetail?: string | undefined;
    constructor(contractAddress: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid chain id being passed or used
 */
export declare class InvalidChainIdError extends ParameterValidationError {
    readonly chainId: string;
    readonly errorDetail?: string | undefined;
    constructor(chainId: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid public key hash being passed or used
 */
export declare class InvalidKeyHashError extends ParameterValidationError {
    readonly keyHash: string;
    readonly errorDetail?: string | undefined;
    constructor(keyHash: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid operation hash being passed or used
 */
export declare class InvalidOperationHashError extends ParameterValidationError {
    readonly operationHash: string;
    readonly errorDetail?: string | undefined;
    constructor(operationHash: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error indicates an invalid operation kind being passed or used
 */
export declare class InvalidOperationKindError extends ParameterValidationError {
    readonly operationKind: string;
    readonly errorDetail?: string | undefined;
    constructor(operationKind: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description General error that indicates something is no longer supported and/or deprecated
 */
export declare class DeprecationError extends UnsupportedActionError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description General error that indicates an action is prohibited or not allowed
 */
export declare class ProhibitedActionError extends UnsupportedActionError {
    readonly message: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error indicates a failure in grabbing the public key
 */
export declare class PublicKeyNotFoundError extends TaquitoError {
    readonly pkh: string;
    readonly cause?: any;
    constructor(pkh: string, cause?: any);
}
