import { RpcClientInterface } from '@taquito/rpc';
import { DelegateParams, RevealParams, RegisterGlobalConstantParams, TransferParams, OriginateParams, TxRollupOriginateParams, TxRollupBatchParams, UpdateConsensusKeyParams, TransferTicketParams, IncreasePaidStorageParams, BallotParams, ProposalsParams, DrainDelegateParams, ParamsWithKind } from '../operations/types';
import { PreparationProvider, PreparedOperation } from './interface';
import { Context } from '../context';
import { ContractMethod } from '../contract/contract-methods/contract-method-flat-param';
import { ContractMethodObject } from '../contract/contract-methods/contract-method-object-param';
import { ContractProvider } from '../contract/interface';
import { DefaultContractType, ContractStorageType } from '../contract';
/**
 * @description PrepareProvider is a utility class to output the prepared format of an operation
 */
export declare class PrepareProvider implements PreparationProvider {
    #private;
    protected context: Context;
    constructor(context: Context);
    get rpc(): RpcClientInterface;
    get signer(): import("../taquito").Signer;
    get estimate(): import("../estimate").RPCEstimateProvider;
    get parser(): import("../taquito").ParserProvider;
    private getPkh;
    private getBlockHash;
    private getProtocolHash;
    private getHeadCounter;
    private getFee;
    private getSource;
    private buildEstimates;
    private addRevealOperationIfNeeded;
    private convertIntoArray;
    private constructOpContents;
    /**
     *
     * @description Method to prepare a reveal operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    reveal(params: RevealParams): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare an origination operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    originate<TContract extends DefaultContractType = DefaultContractType>(params: OriginateParams<ContractStorageType<TContract>>, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a transaction operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    transaction(params: TransferParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a delegation operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    delegation(params: DelegateParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a register_global_constant operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    registerGlobalConstant(params: RegisterGlobalConstantParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a tx_rollup_origination operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    txRollupOrigination(params?: TxRollupOriginateParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a tx_rollup_submit_batch operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    txRollupSubmitBatch(params: TxRollupBatchParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare an update_consensus_key operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    updateConsensusKey(params: UpdateConsensusKeyParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare an increase_paid_storage operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    increasePaidStorage(params: IncreasePaidStorageParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a ballot operation
     * @param operation RPCOperation object or RPCOperation array
     * @returns a PreparedOperation object
     */
    ballot(params: BallotParams): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a proposals operation
     * @param operation RPCOperation object or RPCOperation array
     * @returns a PreparedOperation object
     */
    proposals(params: ProposalsParams): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a drain_delegate operation
     * @param operation RPCOperation object or RPCOperation array
     * @returns a PreparedOperation object
     */
    drainDelegate(params: DrainDelegateParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a transfer_ticket operation
     * @param operation RPCOperation object or RPCOperation array
     * @param source string or undefined source pkh
     * @returns a PreparedOperation object
     */
    transferTicket(params: TransferTicketParams, source?: string): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a batch operation
     * @param operation RPCOperation object or RPCOperation array
     * @returns a PreparedOperation object
     */
    batch(batchParams: ParamsWithKind[]): Promise<PreparedOperation>;
    /**
     *
     * @description Method to prepare a batch operation
     * @param operation RPCOperation object or RPCOperation array
     * @returns a PreparedOperation object
     */
    contractCall(contractMethod: ContractMethod<ContractProvider> | ContractMethodObject<ContractProvider>): Promise<PreparedOperation>;
}
