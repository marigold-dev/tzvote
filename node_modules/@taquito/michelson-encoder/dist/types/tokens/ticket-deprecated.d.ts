import { TicketDeprecatedTokenSchema } from '../schema/types';
import { Token, TokenFactory, Semantic, SemanticEncoding } from './token';
/**
 *  @category Error
 *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain
 */
export declare class EncodeTicketDeprecatedError extends Error {
    name: string;
    constructor();
}
export declare class TicketDeprecatedToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'ticket_deprecated';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    get valueToken(): Token;
    Encode(_args: any[]): any;
    EncodeObject(args: any, semantic?: SemanticEncoding): any;
    Execute(val: any, semantics?: Semantic): any;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): {
        ticketer: "contract";
        value: any;
        amount: "int";
    };
    generateSchema(): TicketDeprecatedTokenSchema;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
