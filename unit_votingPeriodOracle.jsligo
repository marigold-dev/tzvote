#include "votingPeriodOracle.jsligo"

//util function
let assert_failure = (result : test_exec_result) : bool => {
  return match(result,{
    Success: (_ : nat) => false,
    Fail: ( tee : test_exec_error ) => { 
      Test.log (["Exception correctly caught", 
      match(tee,{
        Other: () =>"Other", 
        Rejected: (s:[michelson_program , address])=>{Test.log(s[0]);return "(see previous log above)"} })
      ]) ; 
      return true}
    })
  };
  
  //util

  let initAccount = (keypair: [string,key]) : address => {
    Test.log("For keypair :");  
    Test.log(keypair);
    //add this account to test context
    Test.add_account(keypair[0],keypair[1]);
    //create the account in Tezos
    const hk : key_hash = Crypto.hash_key(keypair[1]);
    let c : contract<unit> = Tezos.implicit_account(hk);
    Test.log("New account");
    Test.log(Tezos.address(c));
    Test.log(Test.get_balance(Tezos.address(c)));
    Test.log("with voting power :");
    let vp : michelson_program = Test.run((phk : key_hash) => Tezos.voting_power(phk) , hk )  ;
    Test.log(Test.decompile(vp) as nat);
    return Tezos.address(c); 
  };

  
  let _1 = Test.reset_state ( 3 as nat, list([]) as list <tez> );
  let baker1 = Test.nth_bootstrap_account(0);
  let admin = Test.nth_bootstrap_account(1);
  
  let senderKey1 : [string,key] = Test.new_account();
  let sender1 = initAccount(senderKey1);
  

  let votingInitial_storage = 
  {  name : "Which is the cutiest pokemon?",
  votingPeriodIndex : 25,  
  options : list(["Mew","Pikachu"]) ,  
  votes : (Map.empty as map<address, string>), 
  results : (Map.empty as map<string, int>) } ;

  let initial_storage = {
    admin : admin,
    votingPeriodIndexes: Map.empty as map<string, nat>
  };
  
  let _2 = Test.set_source(admin);
  let _3 = Test.set_baker(baker1);
  
  let mStorage = Test.compile_value(votingInitial_storage);
  let [votingtaddr, _, _] = Test.originate_from_file("tezosTemplate3.jsligo" ,"main", mStorage, 0 as tez); //TODO FIX BUG
  let tvotingtaddr : typed_address<[list<operation>, storage],storage> = Test.cast_address(votingtaddr) ;
  let votingContract = Test.to_contract(tvotingtaddr);
  
  let [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  
  let _testOriginate = () : bool => {
    assert((Test.get_storage(taddr) as storage).admin  == admin);
    assert((Test.get_storage(taddr) as storage).votingPeriodIndexes  == (Map.empty as map<string,nat>));
    return true ;
  }
  
  let _testUpdate = ([s,key,value] : [address,string,nat]) : bool => {
    Test.set_source(s);
    let _ = Test.transfer_to_contract_exn(contr, (UpdateCurrentVotingPeriod([key,value])), 1 as mutez)
    let st = (Test.get_storage(taddr) as storage);
    Test.log(st);
    assert(Option.unopt(Map.find_opt(key,st.votingPeriodIndexes))  == value);
    return true;
  }
  
  let _testUpdateFail = ( [s,key,value] : [address,string,nat]) : bool => {
    Test.set_source(s);
    return assert_failure(Test.transfer_to_contract(contr, (UpdateCurrentVotingPeriod([key,value])), 1 as mutez));
  }
  
  let _testGet = ([s,senderHashKey,key,value] : [address,key_hash,string,nat]) : bool => {
    Test.set_source(s);
    //let _ = Test.transfer_to_contract_exn(contr, (GetCurrentVotingPeriod( [key, "anyopt", senderHashKey, votingContract])), 1 as mutez);  //TODO FIX BUG
    return true;
  }
  
  let testOriginate = _testOriginate();
  
  //FILL
  let testSender1UpdateNotAdmin = _testUpdateFail(sender1, "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx",25 as nat);
  let testAdminUpdateHangzhou = _testUpdate(admin,"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx",25 as nat);
  let testAdminUpdateHangzhouAgain = _testUpdate(admin,"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx",26 as nat);
  let testAdminUpdateGranada = _testUpdate(admin,"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV",254 as nat);
  
  //GET
  let testSender1GetGranada = _testGet(sender1,Crypto.hash_key(senderKey1[1]),"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV",254 as nat);