//redefining find_opt function
export const find_opt = <T>(f : (x : T) => bool, xs : list<T>) : option<T> =>
match(xs ,list([
  ([] : list<T>) => None(),
  ([x,... xs] : list<T>) => {
    if(f(x)) { return Some(x); } else {return find_opt(f, xs); } 
  } 
]));

//redefining reverse
export const reverse = <T>(xs : list<T>) : list<T> => {
        let f = ([ys, x] : [list<T>, T]) : list<T> => list([x, ...ys]);
        return List.fold_left(f, list([]) as list<T>, xs);
    };

//redefining concat
export const concat = <T>(xs : list<T>, ys : list<T>) : list<T> => {
   let f = ([x,ys] : [T,list<T>]) : list<T> => list([x,...ys]);
   return List.fold_right(f ,xs ,ys)
  };

export const remove = <T>(f : (x : T) => bool, xs : list<T>, acc : list<T>) : list<T> =>
match(xs ,list([
  ([] : list<T>) => reverse(acc),
  ([x,... xs] : list<T>) => {
    if(f(x)) { return concat(reverse(acc),xs); } else {return remove(f, xs, list([x,...acc])); } 
  } 
]));