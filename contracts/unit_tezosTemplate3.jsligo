#import "tezosTemplate3.jsligo" "TZ"

#import "votingPeriodOracle.jsligo" "VPO"

//util function

const assert_failure = (result: test_exec_result, message: string): bool => {
  return match(result) {
    when (Success(_)):
      false
    when (Fail(tee)):
      match(tee) {
        when (Other(msg)):
          do { Test.log("ERROR Other : " + msg); return false }
        when (Balance_too_low(_record)):
          do { Test.log("ERROR Balance_too_low"); return false }
        when (Rejected(s)):
          do {
            Test.log(["expected error : ", message, " Actual : "]);
            Test.log(s[0]);
            return ((Test.eval(message)) == s[0])
          }
      }
  }
};

const initAccount = ([accList, keypair]: [list<address>, [string, key]]): list<
  address
> => {
  Test.log("For keypair :");
  Test.log(keypair);
  //add this account to test context

  Test.
  add_account(keypair[0], keypair[1]);
  //create the account in Tezos

  const hk: key_hash = Crypto.hash_key(keypair[1]);
  let c: contract<unit> = Tezos.implicit_account(hk);
  //set balance to avoid empty implicit accounts

  Test.
  transfer_to_contract(c, unit, (1000 as tez));
  Test.log("New account");
  Test.log(Tezos.address(c));
  Test.log(Test.get_balance(Tezos.address(c)));
  Test.log("with voting power :");
  let vp: michelson_program =
    Test.run((phk: key_hash) => Tezos.voting_power(phk), hk);
  Test.log(Test.decompile(vp) as nat);
  return list([Tezos.address(c), ...accList])
};

// account list

const senderKey1: [string, key] = Test.new_account();

const _ = Test.baker_account(senderKey1, Some((6500 as tez)));

const senderKey2: [string, key] = Test.new_account();

const _1 = Test.baker_account(senderKey2, Some((12500 as tez)));

const senderKey3: [string, key] = Test.new_account();

const _2 = Test.baker_account(senderKey3, Some((18500 as tez)));

const johndoeKey: [string, key] = Test.new_account();

const keys: list<[string, key]> =
  list([senderKey1, senderKey2, senderKey3, johndoeKey]);

// reset state

const _3 = Test.reset_state(2 as nat, list([]) as list<tez>);

const faucet = Test.nth_bootstrap_account(0);

const addresses: list<address> =
  List.fold(initAccount, keys, list([]) as list<address>);

const johndoe: address = Option.unopt(List.head_opt(addresses));

const sender3: address =
  Option.unopt(List.head_opt(Option.unopt(List.tail_opt(addresses))));

const sender2: address =
  Option.unopt(
    List.head_opt(
      Option.unopt(List.tail_opt(Option.unopt(List.tail_opt(addresses))))
    )
  );

const sender1: address =
  Option.unopt(
    List.head_opt(
      Option.unopt(
        List.tail_opt(
          Option.unopt(List.tail_opt(Option.unopt(List.tail_opt(addresses))))
        )
      )
    )
  );

const _4 = Test.set_baker(faucet);

const _5 = Test.set_source(sender1);

/**
  * PREPARE ORACLE
  */

const oracleInitialStorage = { admin: faucet, votingPeriodIndex: 25 as nat };

const mStorage = Test.compile_value(oracleInitialStorage);

const [oracletaddr, _b, _6] =
  Test.originate_module(contract_of(VPO), oracleInitialStorage, 0 as tez);

const oracleContract = Test.to_contract(oracletaddr);

const _7 = Test.log("oracleContract");

const _8 = Test.log(oracleContract);

/**
  * END PREPARE ORACLE
  */

const initial_storage: TZ.storage = {
  name: "Which is the cutiest pokemon?",
  votingPeriodIndex: 25 as nat,
  options: list(["Mew", "Pikachu"]),
  votes: (Map.empty as map<address, string>),
  results: (Map.empty as map<string, int>),
  votingPeriodOracle: Tezos.address(oracleContract)
};

const [taddr, _a, _9] =
  Test.originate_module(contract_of(TZ), initial_storage, 0 as tez);

const contr = Test.to_contract(taddr);

const _10 = Test.log("voteContract");

const _11 = Test.log(contr);

const _testOriginate = (): bool => {
  Test.assert(
    (Test.get_storage(taddr) as TZ.storage).name
    == "Which is the cutiest pokemon?"
  );
  Test.assert(
    (Test.get_storage(taddr) as TZ.storage).votingPeriodIndex == (25 as nat)
  );
  return true
};

const _testVote = (s: address, o: string, k: key_hash, voteCount: int): bool => {
  Test.set_source(s);
  Test.log("BEFORE RUN");
  Test.log(s);
  Test.log(Test.get_balance(s));
  const status = Test.transfer_to_contract(contr, (Vote([o, k])), 1 as mutez);
  Test.log(status);
  Test.log("AFTER RUN");
  Test.log(Test.get_balance(s));
  const st = (Test.get_storage(taddr) as TZ.storage);
  Test.log(st);
  Test.assert_with_error(
    Option.unopt(Map.find_opt(s, st.votes)) == o,
    "Cannot find vote"
  );
  Test.log(["expected voteCount : ", voteCount]);
  Test.log(["actual voteCount : ", Option.unopt(Map.find_opt(o, st.results))]);
  Test.assert_with_error(
    Option.unopt(Map.find_opt(o, st.results)) == voteCount,
    "Result of vote count is different to expected one"
  );
  return true
};

const _testVoteFail = (s: address, o: string, k: key_hash, message: string): bool => {
  Test.set_source(s);
  return assert_failure(
    Test.transfer_to_contract(contr, (Vote([o, k])), 1 as mutez),
    message
  )
};

const _testVoteFailOutOfDate = (
  s: address,
  o: string,
  k: key_hash,
  message: string
): bool => {
  let initial_storage = {
    name: "Which is the cutiest pokemon?",
    votingPeriodIndex: 99999 as nat,
    options: list(["Mew", "Pikachu"]),
    votes: (Map.empty as map<address, string>),
    results: (Map.empty as map<string, int>),
    votingPeriodOracle: Tezos.address(oracleContract)
  };
  const [taddr, _, _1] =
    Test.originate_module(contract_of(TZ), initial_storage, 0 as tez);
  const oldContr = Test.to_contract(taddr);
  Test.set_source(s);
  return assert_failure(
    Test.transfer_to_contract(oldContr, (Vote([o, k])), 1 as mutez),
    message
  )
};

const testOriginate = _testOriginate();

const _12 = Test.log("************* testSender1VoteUnknownOption *************");

const testSender1VoteUnknownOption =
  _testVoteFail(
    sender1,
    "Batman",
    Crypto.hash_key(senderKey1[1]),
    "Option does not exist"
  );

const _13 = Test.log("************* testSender1VotePikachu *************");

const testSender1VotePikachu =
  _testVote(sender1, "Pikachu", Crypto.hash_key(senderKey1[1]), 6500000000);

const _14 =
  Test.log("************* testSender1VotePikachuAgainAndFail *************");

const testSender1VotePikachuAgainAndFail =
  _testVoteFail(
    sender1,
    "Pikachu",
    Crypto.hash_key(senderKey1[1]),
    "A vote with option Pikachu  already exists for this user"
  );

const _15 = Test.log("************* testSender2VotePikachu *************");

const testSender2VotePikachu =
  _testVote(sender2, "Pikachu", Crypto.hash_key(senderKey2[1]), 19000000000);

const _16 = Test.log("************* testSender2VoteMewAndFail *************");

const testSender2VoteMewAndFail =
  _testVoteFail(
    sender2,
    "Mew",
    Crypto.hash_key(senderKey2[1]),
    "A vote with option Pikachu  already exists for this user"
  );

const _17 = Test.log("************* testSender3VoteMew *************");

const testSender3VoteMew =
  _testVote(sender3, "Mew", Crypto.hash_key(senderKey3[1]), 18500000000);

const _18 = Test.log("************* testjohndoeNotABaker *************");

const testjohndoeNotABaker =
  _testVoteFail(
    johndoe,
    "Mew",
    Crypto.hash_key(johndoeKey[1]),
    "Sender has no rolls and cannot vote"
  );

//test out of time period for voting

const _19 = Test.log("************* testVoteOutOfDate *************");

const testVoteOutOfDate =
  _testVoteFailOutOfDate(
    sender1,
    "Pikachu",
    Crypto.hash_key(senderKey1[1]),
    "Not yet the time to vote"
  );
