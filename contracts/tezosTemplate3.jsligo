export type storage = {
  name: string,
  votingPeriodIndex: nat,
  options: list<string>,
  votes: map<address, string>, // votes by user
  results: map<string, int>, // results by option
  votingPeriodOracle: address
};

type return_ = [list<operation>, storage];

@entry
const vote = ([opt, senderHashKey]: [string, key_hash], store: storage): return_ => {
  //check if sender is a baker who has rolls

  if ((int(Tezos.voting_power(senderHashKey)) == 0)) return failwith(
    "Sender has no rolls and cannot vote"
  );
  //check if option exists

  let opt_: option<string> =
    List.find_opt(((s: string) => s == opt), store.options);
  if (opt_ == (None() as option<string>)) return failwith(
    "Option does not exist"
  );
  //check if sender has not yet voted

  match(Map.find_opt(Tezos.get_source(), store.votes)) {
    when (Some(voted)):
      failwith("A vote with option " + voted + "  already exists for this user")
    when (None()):
      unit
  };
  //call view

  let votingPeriodIndexOpt: option<nat> =
    Tezos.call_view("currentVotingPeriod", unit, store.votingPeriodOracle);
  return match(votingPeriodIndexOpt) {
    when (Some(votingPeriodIndex)):
      do {
        if (votingPeriodIndex != store.votingPeriodIndex) return failwith(
          "Not yet the time to vote"
        );
        //update results cache & finally add the new vote

        return [
          list([]) as list<operation>,
          {
            ...store,
            results: match(Map.find_opt(opt, store.results)) {
              when (Some(r)):
                Map.add(
                  opt,
                  r + (int(Tezos.voting_power(senderHashKey))),
                  store.results
                )
              when (None()):
                Map.add(
                  opt,
                  (int(Tezos.voting_power(senderHashKey))),
                  store.results
                )
            },
            votes: Map.add(Tezos.get_source(), opt, store.votes)
          }
        ]
      }
    when (None()):
      failwith("Cannot find view currentVotingPeriod on given oracle address")
  }
};
