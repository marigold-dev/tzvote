#include "../src/contracttemplates/votingPeriodOracle.jsligo" 
#import "../src/contracttemplates/tezosTemplate3.jsligo" "TezosTemplate"


//util function
let assert_failure = ([result,message] : [test_exec_result,string]) : bool => {
  return match(result,{
    Success: (_ : nat) => false,
    Fail: ( tee : test_exec_error ) => 
      match(tee,{
        Other: (msg : string) => {Test.log("ERROR Other : "+msg) ; return false}, 
        Balance_too_low : (record : [ address ,  tez , tez ]) => {Test.log("ERROR Balance_too_low") ; return false}, 
        Rejected: (s:[michelson_program , address])=>{  Test.log (["expected error : ", message, " Actual : "]) ; Test.log(s[0]) ; return ((Test.eval(message)) == s[0]) } }) 
    })
  };
  
  //util
  
  let initAccount = (keypair: [string,key]) : address => {
    Test.log("For keypair :");  
    Test.log(keypair);
    //add this account to test context
    Test.add_account(keypair[0],keypair[1]);
    //create the account in Tezos
    const hk : key_hash = Crypto.hash_key(keypair[1]);
    let c : contract<unit> = Tezos.implicit_account(hk);
    //set balance to avoid empty implicit accounts
    let _ : test_exec_result = Test.transfer_to_contract (c,unit,(1000 as tez));
    Test.log("New account");
    Test.log(Tezos.address(c));
    Test.log(Test.get_balance(Tezos.address(c)));
    Test.log("with voting power :");
    let vp : michelson_program = Test.run((phk : key_hash) => Tezos.voting_power(phk) , hk )  ;
    Test.log(Test.decompile(vp) as nat);
    return Tezos.address(c); 
  };
  
  
  let _ = Test.reset_state ( 3 as nat, list([]) as list <tez> );
  let baker1 = Test.nth_bootstrap_account(0);
  let admin = Test.nth_bootstrap_account(1);
  
  let senderKey1 : [string,key] = Test.new_account();
  let sender1 = initAccount(senderKey1);
  
  
  
  
  let _ = Test.set_source(admin);
  let _ = Test.set_baker(baker1);
  
  
  let initial_storage = {
    admin : admin,
    votingPeriodIndexes: Map.empty as map<string, nat> //Map.literal(list([   ["ghostnet",25 as nat], ["granadanet",254 as nat]   ])) as map<string, nat>
  };
  
  
  let [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  let contrAddress = Tezos.address(contr);
  
  
  let votingInitial_storage = 
  {  name : "Which is the cutiest pokemon?",
  votingPeriodIndex : 25 as nat,  
  options : list(["Mew","Pikachu"]) ,  
  votes : (Map.empty as map<address, string>), 
  results : (Map.empty as map<string, int>),
  votingPeriodOracle : contrAddress,
  protocol : "ghostnet" } ;
  
  
  let [tvotingtaddr, _, _] = Test.originate(TezosTemplate.main, votingInitial_storage, 0 as tez); 
  let votingContract = Test.to_contract(tvotingtaddr);
  let votingContractAddress = Tezos.address(votingContract);

  
  let _testOriginate = () : bool => {
    assert((Test.get_storage(taddr) as oracleStorage).admin  == admin);
    assert((Test.get_storage(taddr) as oracleStorage).votingPeriodIndexes  == (Map.empty as map<string,nat>));
    return true ;
  }
  
  let _testUpdate = ([s,key,value] : [address,string,nat]) : bool => {
    Test.set_source(s);
    let _ = Test.transfer_to_contract_exn(contr, UpdateCurrentVotingPeriod([key,value]), 1 as mutez)
    let st = (Test.get_storage(taddr) as oracleStorage);
    Test.log(st);
    assert(Option.unopt(Map.find_opt(key,st.votingPeriodIndexes))  == value);
    return true;
  }
  
  let _testUpdateFail = ( [s,key,value,message] : [address,string,nat,string]) : bool => {
    Test.set_source(s);
    return assert_failure(Test.transfer_to_contract(contr, UpdateCurrentVotingPeriod([key,value]), 1 as mutez),message);
  }
  
  let _testGet = ([s,senderHashKey,key,value] : [address,key_hash,string,nat]) : bool => {
    Test.set_source(s);
    let callback : contract<returned_val> = Test.to_entrypoint("voteCallback", tvotingtaddr);
    
    let st = (Test.get_storage(taddr) as oracleStorage);
    Test.log(st);
    let st2 = (Test.get_storage(tvotingtaddr) as storage);
    Test.log(st2);
    let _ = Test.transfer_to_contract_exn(contr,GetCurrentVotingPeriod([key,"anyopt", senderHashKey, callback ]), 1 as mutez); 
    //it should have same period otherwise it fails with error
    return true;
  }

  let _testGetFail = ([s,senderHashKey,key,value,message] : [address,key_hash,string,nat,string]) : bool => {
    Test.set_source(s);
    let callback : contract<returned_val> = Test.to_entrypoint("voteCallback", tvotingtaddr);
    return assert_failure(Test.transfer_to_contract(contr, GetCurrentVotingPeriod( [key, "anyopt", senderHashKey, callback]), 1 as mutez),message);  
  }
  
  let testOriginate = _testOriginate();
  
  //FILL
  let testSender1UpdateNotAdmin = _testUpdateFail(sender1, "ghostnet",25 as nat,"You are not the admin !!!");
  let testAdminUpdateGhost = _testUpdate(admin,"ghostnet",25 as nat);
  let testAdminUpdateGhostAgain = _testUpdate(admin,"ghostnet",26 as nat);
  let testAdminUpdateGranada = _testUpdate(admin,"granadanet",254 as nat);
  
  //GET
  let _ = _testUpdate(admin,"ghostnet",25 as nat); //reset
  let testSender1GetGhost = _testGet(sender1,Crypto.hash_key(senderKey1[1]),"ghostnet",25 as nat);
  let testSender1GetUnknown = _testGetFail(sender1,Crypto.hash_key(senderKey1[1]),"Unknown",254 as nat,"Cannot find current voting period index for protocol "+"Unknown");