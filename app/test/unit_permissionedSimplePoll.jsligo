#include "../src/contracttemplates/permissionedSimplePoll.jsligo"

//util function
let assert_failure = ([result,message] : [test_exec_result,string]) : bool => {
  return match(result,{
    Success: (_ : nat) => false,
    Fail: ( tee : test_exec_error ) => 
      match(tee,{
        Other: () => false, 
        Rejected: (s:[michelson_program , address])=>{  Test.log (["expected error : ", message, " Actual : "]) ; Test.log(s[0]) ; return ((Test.eval(message)) == s[0]) } }) 
    })
  };
  
  // reset state
  let _ = Test.reset_state ( 10 as nat, list([]) as list <tez> );
  let faucet = Test.nth_bootstrap_account(0);
  let sender1 : address = Test.nth_bootstrap_account(1);
  let sender2 : address = Test.nth_bootstrap_account(2);
  let sender3 : address = Test.nth_bootstrap_account(3);                        
  let johndoe : address = Test.nth_bootstrap_account(4);           
  
  let _ = Test.set_baker(faucet);
  let _ = Test.set_source(sender1);

  
  let initial_storage = 
  {  name : "Which is the cutiest pokemon?",
  from : ("2022-01-01t00:00:00Z" as timestamp),  
  to : ("2023-01-01t00:00:00Z" as timestamp), 
  options : list(["Mew","Pikachu"]) ,  
  owner : sender1,
  registeredVoters : list([sender1,sender2,sender3]) as list<address>, 
  votes : (Map.empty as map<address, string>), 
  results : (Map.empty as map<string, int>)
} ;


let [taddr, _, _] = Test.originate(main, initial_storage, (0 as tez));
let contr = Test.to_contract(taddr);
let _ = Test.log("voteContract");
let _ = Test.log(contr);

let _testOriginate = () : bool => {
  assert((Test.get_storage(taddr) as storage).name  == "Which is the cutiest pokemon?");
  return true ;
};

let _testVote = ([s,o,voteCount] : [address,string,int]) : bool => {
  Test.set_source(s);
  let status = Test.transfer_to_contract(contr, (Vote(o)), 1 as mutez);
  Test.log(status);
  let st = (Test.get_storage(taddr) as storage);
  Test.log(st);
  assert(Option.unopt(Map.find_opt(s,st.votes))  == o);
  Test.log (["expected voteCount : ", voteCount]) ;
  Test.log (["actual voteCount : ",Option.unopt(Map.find_opt(o,st.results))]) ;
  assert(Option.unopt(Map.find_opt(o,st.results))  == voteCount);
  return true;
};

let _testVoteFail = ( [s,o,message] : [address,string,string]) : bool => {
  Test.set_source(s);
  return assert_failure(Test.transfer_to_contract(contr, (Vote(o)), 1 as mutez),message);
};

let _testVoteFailOutOfDate = ( [s,o,message] : [address,string,string]) : bool => {
  let [taddr, _, _] = Test.originate(main, initial_storage, (0 as tez));
  let oldContr = Test.to_contract(taddr);
  Test.set_source(s);
  return assert_failure(Test.transfer_to_contract(oldContr, (Vote(o)), 1 as mutez),message);
};


let _testAddVoter = ([s1,s2] : [address,address]) : bool => {
  Test.set_source(s1);
  let status = Test.transfer_to_contract(contr, (AddVoter(s2)), 1 as mutez);
  Test.log(status);
  let st = (Test.get_storage(taddr) as storage);
  Test.log(st);
  assert(Option.unopt(find_opt(( (a : address) => a == s2),st.registeredVoters))  == s2);
  return true;
};

let _testAddVoterFail = ( [s1,s2,message] : [address,address,string]) : bool => {
  Test.set_source(s1);
  return assert_failure(Test.transfer_to_contract(contr, (AddVoter(s2)), 1 as mutez),message);
};


let _testRemoveVoter = ([s1,s2] : [address,address]) : bool => {
  Test.set_source(s1);
  let status = Test.transfer_to_contract(contr, (RemoveVoter(s2)), 1 as mutez);
  Test.log(status);
  let st = (Test.get_storage(taddr) as storage);
  Test.log(st);
  assert(find_opt(( (a : address) => a == s2),st.registeredVoters)  == (None() as option<address>));
  return true;
};

let _testRemoveVoterFail = ( [s1,s2,message] : [address,address,string]) : bool => {
  Test.set_source(s1);
  return assert_failure(Test.transfer_to_contract(contr, (RemoveVoter(s2)), 1 as mutez),message);
};

let testOriginate = _testOriginate();

let _ = Test.set_now("2022-03-01T00:00:00Z" as timestamp);
//votes
let testSender1VoteUnknownOption = _testVoteFail(sender1, "Batman","Option does not exist");
let testSender1VotePikachu = _testVote(sender1,"Pikachu",1);
let testSender1VotePikachuAgainAndFail = _testVoteFail(sender1,"Pikachu","A vote with option Pikachu  already exists for this user");
let testSender2VotePikachu = _testVote(sender2,"Pikachu",2);
let testSender2VoteMewAndFail = _testVoteFail(sender2,"Mew","A vote with option Pikachu  already exists for this user");
let testSender3VoteMew = _testVote(sender3,"Mew",1);
let testjohndoeNotRegistered = _testVoteFail(johndoe,"Mew","User is not registered");
//owner actions
let testjohndoeAddjohndoe = _testAddVoterFail(johndoe,johndoe,"User has to be owner");
let testSender1Addjohndoe = _testAddVoter(sender1,johndoe);
let testSender1AddjohndoeAgainAndFail = _testAddVoterFail(sender1,johndoe,"User is already registered");
let testjohndoeRemovejohndoe = _testRemoveVoterFail(johndoe,johndoe,"User has to be owner");
let testSender1Removejohndoe = _testRemoveVoter(sender1,johndoe);
let testSender1RemovejohndoeAgainAndFail = _testRemoveVoterFail(sender1,johndoe,"User not found");

//test out of time period for voting
let _ = Test.set_now("2024-02-01T00:00:00Z" as timestamp);
let testVoteOutOfDate = _testVoteFailOutOfDate(sender1,"Pikachu","Not yet the time to vote");