{ parameter (or (or (address %addVoter) (address %removeVoter)) (string %vote)) ;
  storage
    (pair (pair (pair (timestamp %from_) (string %name)) (list %options string) (address %owner))
          (pair (list %registeredVoters address) (map %results string int))
          (timestamp %to)
          (map %votes address string)) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 SOURCE ;
                 COMPARE ;
                 NEQ ;
                 IF { DROP 2 ; PUSH string "User has to be owner" ; FAILWITH }
                    { DUP 2 ;
                      CDR ;
                      CAR ;
                      CAR ;
                      LAMBDA (pair address address) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
                      DUP 3 ;
                      APPLY ;
                      PAIR ;
                      LEFT (option address) ;
                      LOOP_LEFT
                        { UNPAIR ;
                          SWAP ;
                          IF_CONS
                            { DUP ;
                              DUP 4 ;
                              SWAP ;
                              EXEC ;
                              IF { SWAP ;
                                   DIG 2 ;
                                   DROP 2 ;
                                   SOME ;
                                   RIGHT (pair (lambda address bool) (list address)) }
                                 { DROP ; SWAP ; PAIR ; LEFT (option address) } }
                            { DROP ; NONE address ; RIGHT (pair (lambda address bool) (list address)) } } ;
                      NONE address ;
                      SWAP ;
                      COMPARE ;
                      NEQ ;
                      IF { DROP 2 ; PUSH string "User is already registered" ; FAILWITH }
                         { DUP 2 ;
                           CDR ;
                           CDR ;
                           CAR ;
                           NOW ;
                           COMPARE ;
                           GT ;
                           IF { DROP 2 ; PUSH string "Too late to add voter" ; FAILWITH }
                              { DUP 2 ;
                                CDR ;
                                CDR ;
                                DUP 3 ;
                                CDR ;
                                CAR ;
                                CDR ;
                                DUP 4 ;
                                CDR ;
                                CAR ;
                                CAR ;
                                DIG 3 ;
                                CONS ;
                                PAIR ;
                                PAIR ;
                                SWAP ;
                                CAR ;
                                PAIR ;
                                NIL operation ;
                                PAIR } } } }
               { DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 SOURCE ;
                 COMPARE ;
                 NEQ ;
                 IF { DROP 2 ; PUSH string "User has to be owner" ; FAILWITH }
                    { DUP 2 ;
                      CDR ;
                      CAR ;
                      CAR ;
                      LAMBDA (pair address address) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
                      DUP 3 ;
                      APPLY ;
                      PAIR ;
                      LEFT (option address) ;
                      LOOP_LEFT
                        { UNPAIR ;
                          SWAP ;
                          IF_CONS
                            { DUP ;
                              DUP 4 ;
                              SWAP ;
                              EXEC ;
                              IF { SWAP ;
                                   DIG 2 ;
                                   DROP 2 ;
                                   SOME ;
                                   RIGHT (pair (lambda address bool) (list address)) }
                                 { DROP ; SWAP ; PAIR ; LEFT (option address) } }
                            { DROP ; NONE address ; RIGHT (pair (lambda address bool) (list address)) } } ;
                      NONE address ;
                      SWAP ;
                      COMPARE ;
                      EQ ;
                      IF { DROP 2 ; PUSH string "User not found" ; FAILWITH }
                         { DUP 2 ;
                           CDR ;
                           CDR ;
                           CAR ;
                           NOW ;
                           COMPARE ;
                           GT ;
                           IF { DROP 2 ; PUSH string "Too late to remove voter" ; FAILWITH }
                              { DUP 2 ;
                                CDR ;
                                CDR ;
                                CDR ;
                                DUP 2 ;
                                GET ;
                                IF_NONE
                                  {}
                                  { PUSH string "  already exists for this user, we cannot remove it" ;
                                    SWAP ;
                                    PUSH string "A vote with option " ;
                                    CONCAT ;
                                    CONCAT ;
                                    FAILWITH } ;
                                DUP 2 ;
                                CDR ;
                                CDR ;
                                DUP 3 ;
                                CDR ;
                                CAR ;
                                CDR ;
                                NIL address ;
                                DUP 5 ;
                                CDR ;
                                CAR ;
                                CAR ;
                                LAMBDA (pair address address) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
                                DUP 6 ;
                                APPLY ;
                                DIG 5 ;
                                DROP ;
                                PAIR ;
                                PAIR ;
                                LEFT (list address) ;
                                LOOP_LEFT
                                  { UNPAIR ;
                                    UNPAIR ;
                                    SWAP ;
                                    IF_CONS
                                      { DUP ;
                                        DUP 4 ;
                                        SWAP ;
                                        EXEC ;
                                        IF { DIG 2 ;
                                             DROP 2 ;
                                             LAMBDA (pair (list address) address) (list address) { UNPAIR ; SWAP ; CONS } ;
                                             DIG 2 ;
                                             NIL address ;
                                             DIG 2 ;
                                             SWAP ;
                                             DIG 2 ;
                                             ITER { SWAP ; PAIR ; DUP 2 ; SWAP ; EXEC } ;
                                             SWAP ;
                                             DROP ;
                                             LAMBDA (pair address (list address)) (list address) { UNPAIR ; CONS } ;
                                             DUG 2 ;
                                             NIL address ;
                                             SWAP ;
                                             ITER { CONS } ;
                                             ITER { PAIR ; DUP 2 ; SWAP ; EXEC } ;
                                             SWAP ;
                                             DROP ;
                                             RIGHT (pair (pair (lambda address bool) (list address)) (list address)) }
                                           { DIG 3 ; SWAP ; CONS ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT (list address) } }
                                      { DROP ;
                                        LAMBDA (pair (list address) address) (list address) { UNPAIR ; SWAP ; CONS } ;
                                        SWAP ;
                                        NIL address ;
                                        DIG 2 ;
                                        SWAP ;
                                        DIG 2 ;
                                        ITER { SWAP ; PAIR ; DUP 2 ; SWAP ; EXEC } ;
                                        SWAP ;
                                        DROP ;
                                        RIGHT (pair (pair (lambda address bool) (list address)) (list address)) } } ;
                                PAIR ;
                                PAIR ;
                                SWAP ;
                                CAR ;
                                PAIR ;
                                NIL operation ;
                                PAIR } } } } }
           { DUP 2 ;
             CDR ;
             CAR ;
             CAR ;
             LAMBDA address bool { SOURCE ; SWAP ; COMPARE ; EQ } ;
             PAIR ;
             LEFT (option address) ;
             LOOP_LEFT
               { UNPAIR ;
                 SWAP ;
                 IF_CONS
                   { DUP ;
                     DUP 4 ;
                     SWAP ;
                     EXEC ;
                     IF { SWAP ;
                          DIG 2 ;
                          DROP 2 ;
                          SOME ;
                          RIGHT (pair (lambda address bool) (list address)) }
                        { DROP ; SWAP ; PAIR ; LEFT (option address) } }
                   { DROP ; NONE address ; RIGHT (pair (lambda address bool) (list address)) } } ;
             NONE address ;
             SWAP ;
             COMPARE ;
             EQ ;
             IF { DROP 2 ; PUSH string "User is not registered" ; FAILWITH }
                { DUP 2 ;
                  CAR ;
                  CDR ;
                  CAR ;
                  LAMBDA (pair string string) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
                  DUP 3 ;
                  APPLY ;
                  PAIR ;
                  LEFT (option string) ;
                  LOOP_LEFT
                    { UNPAIR ;
                      SWAP ;
                      IF_CONS
                        { DUP ;
                          DUP 4 ;
                          SWAP ;
                          EXEC ;
                          IF { SWAP ; DIG 2 ; DROP 2 ; SOME ; RIGHT (pair (lambda string bool) (list string)) }
                             { DROP ; SWAP ; PAIR ; LEFT (option string) } }
                        { DROP ; NONE string ; RIGHT (pair (lambda string bool) (list string)) } } ;
                  NONE string ;
                  SWAP ;
                  COMPARE ;
                  EQ ;
                  IF { DROP 2 ; PUSH string "Option does not exist" ; FAILWITH }
                     { DUP 2 ;
                       CDR ;
                       CDR ;
                       CDR ;
                       SOURCE ;
                       GET ;
                       IF_NONE
                         {}
                         { PUSH string "  already exists for this user" ;
                           SWAP ;
                           PUSH string "A vote with option " ;
                           CONCAT ;
                           CONCAT ;
                           FAILWITH } ;
                       DUP 2 ;
                       CDR ;
                       CDR ;
                       CAR ;
                       NOW ;
                       COMPARE ;
                       GT ;
                       DUP 3 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       NOW ;
                       COMPARE ;
                       LT ;
                       OR ;
                       IF { DROP 2 ; PUSH string "Not yet the time to vote" ; FAILWITH }
                          { DUP 2 ;
                            CDR ;
                            CDR ;
                            DUP 3 ;
                            CDR ;
                            CAR ;
                            CDR ;
                            DUP 3 ;
                            GET ;
                            IF_NONE
                              { DUP 3 ;
                                CDR ;
                                CAR ;
                                CDR ;
                                PUSH int 1 ;
                                DUP 4 ;
                                SWAP ;
                                SOME ;
                                SWAP ;
                                UPDATE }
                              { DUP 4 ;
                                CDR ;
                                CAR ;
                                CDR ;
                                PUSH int 1 ;
                                DIG 2 ;
                                ADD ;
                                DUP 4 ;
                                SWAP ;
                                SOME ;
                                SWAP ;
                                UPDATE } ;
                            DUP 4 ;
                            CDR ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            PAIR ;
                            DUP 3 ;
                            CAR ;
                            PAIR ;
                            DIG 2 ;
                            CDR ;
                            CDR ;
                            CDR ;
                            DIG 2 ;
                            SOURCE ;
                            SWAP ;
                            SOME ;
                            SWAP ;
                            UPDATE ;
                            DUP 2 ;
                            CDR ;
                            CDR ;
                            CAR ;
                            PAIR ;
                            DUP 2 ;
                            CDR ;
                            CAR ;
                            PAIR ;
                            SWAP ;
                            CAR ;
                            PAIR ;
                            NIL operation ;
                            PAIR } } } } } }

