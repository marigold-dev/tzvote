type storage = {
  name : string,
  dateTo : timestamp,
  dateFrom : timestamp,
  options : list<string>,
  votes : map<address, string>, // votes by user
  results : map<string, int> // results by option
}

type parameter =
| ["Vote", string, key_hash];

type return_ = [list<operation>, storage];

//redefining find_opt function
let find_opt : (f : (x : _a) => bool, xs : list<_a>) => option<_a> 
    = (f : (x : _a) => bool, xs : list<_a>) : option<_a> =>
    match(xs ,list([
      ([] : list<_a>) => None(),
      ([x,... xs] : list<_a>) => {
          if(f(x)) { return Some(x); } else {return find_opt(f, xs); } 
        } 
    ]));

let vote = ([store, opt, senderHashKey] : [storage, string, key_hash]) : storage => {

//check if date now is between from/to dates
if (Tezos.now < store.dateFrom || Tezos.now > store.dateTo) failwith ("Not yet the time to vote");

//check if option exists
let opt_ : option<string> = find_opt(( (s : string) => s == opt), store.options);
if( opt_ == (None () as option<string>)) failwith ("Option does not exist") ;

//check if sender is a baker who has rolls
if ( (int(Tezos.voting_power(senderHashKey)) == 0 )) failwith ("Sender has no rolls and cannot vote") ;

//check if sender has not yet voted
match(Map.find_opt(Tezos.sender,store.votes), { 
Some : (voted : string) => failwith ("A vote with option " + voted + "  already exists for this user"),
None : () => unit
});

//update results cache & finally add the new vote
return ({...store, 
             results : match(Map.find_opt(opt,store.results),{
               Some : (r:int) => Map.add(opt,r+(int( Tezos.voting_power(senderHashKey) ) ),store.results),
               None: ()=> Map.add(opt,( int( Tezos.voting_power(senderHashKey) ) ),store.results)}) ,
             votes : Map.add(Tezos.sender, opt, store.votes) }); 
};



/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
let main = ([action, store] : [parameter, storage]) : return_ => {
 return [
   (list([]) as list <operation>),    // No operations
   (match (action, {
    Vote: (params: [string,key_hash]) => vote([store, params[0], params[1]])} 
    ))
  ]
};