"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.clientSessionKeys = exports.serverSessionKeys = exports.clientSessionKeysFromSharedKey = exports.serverSessionKeysFromSharedKey = exports.X25519Session = void 0;
/**
 * Package x25519-session implements libsodium compatible session keys generation based on X25519 key agreement.
 */
const blake2b_1 = require("@stablelib/blake2b");
const x25519_1 = require("@stablelib/x25519");
var keyagreement_1 = require("./keyagreement");
Object.defineProperty(exports, "X25519Session", { enumerable: true, get: function () { return keyagreement_1.X25519Session; } });
const SESSION_KEY_LENGTH = 32;
/**
 * Generates server-side session encryption keys from the shared key obtained during agreement phase.
 */
function serverSessionKeysFromSharedKey(sharedKey, myPublicKey, theirPublicKey, hash = blake2b_1.BLAKE2b) {
    const state = new hash();
    if (state.digestLength !== SESSION_KEY_LENGTH * 2) {
        throw new Error("X25519: incorrect digest length");
    }
    const h = state.update(sharedKey).update(theirPublicKey).update(myPublicKey).digest();
    return {
        send: h.subarray(0, SESSION_KEY_LENGTH),
        receive: h.subarray(SESSION_KEY_LENGTH),
    };
}
exports.serverSessionKeysFromSharedKey = serverSessionKeysFromSharedKey;
/**
 * Generates client-side session encryption keys from the shared key obtained during agreement phase.
 */
function clientSessionKeysFromSharedKey(sharedKey, myPublicKey, theirPublicKey, hash = blake2b_1.BLAKE2b) {
    const state = new hash();
    if (state.digestLength !== SESSION_KEY_LENGTH * 2) {
        throw new Error("X25519: incorrect digest length");
    }
    const h = state.update(sharedKey).update(myPublicKey).update(theirPublicKey).digest();
    return {
        receive: h.subarray(0, SESSION_KEY_LENGTH),
        send: h.subarray(SESSION_KEY_LENGTH),
    };
}
exports.clientSessionKeysFromSharedKey = clientSessionKeysFromSharedKey;
/**
 * Generates server-side session encryption keys. Uses a key pair and a peer's public key to generate the shared key.
 */
function serverSessionKeys(myKeyPair, theirPublicKey, hash = blake2b_1.BLAKE2b) {
    const sk = (0, x25519_1.sharedKey)(myKeyPair.secretKey, theirPublicKey);
    return serverSessionKeysFromSharedKey(sk, myKeyPair.publicKey, theirPublicKey, hash);
}
exports.serverSessionKeys = serverSessionKeys;
/**
 * Generates client-side session encryption keys. Uses a key pair and a peer's public key to generate the shared key.
 */
function clientSessionKeys(myKeyPair, theirPublicKey, hash = blake2b_1.BLAKE2b) {
    const sk = (0, x25519_1.sharedKey)(myKeyPair.secretKey, theirPublicKey);
    return clientSessionKeysFromSharedKey(sk, myKeyPair.publicKey, theirPublicKey, hash);
}
exports.clientSessionKeys = clientSessionKeys;
//# sourceMappingURL=x25519-session.js.map