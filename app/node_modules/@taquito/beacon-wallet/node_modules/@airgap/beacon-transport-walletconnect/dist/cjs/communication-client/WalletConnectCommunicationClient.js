"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletConnectCommunicationClient = exports.PermissionScopeEvents = exports.PermissionScopeMethods = exports.NetworkType = void 0;
var beacon_core_1 = require("@airgap/beacon-core");
var sign_client_1 = require("@walletconnect/sign-client");
var utils_1 = require("@walletconnect/utils");
var error_1 = require("../error");
var beacon_types_1 = require("@airgap/beacon-types");
var beacon_utils_1 = require("@airgap/beacon-utils");
var TEZOS_PLACEHOLDER = 'tezos';
var NetworkType;
(function (NetworkType) {
    NetworkType["MAINNET"] = "mainnet";
    NetworkType["GHOSTNET"] = "ghostnet";
    NetworkType["MONDAYNET"] = "mondaynet";
    NetworkType["DAILYNET"] = "dailynet";
    NetworkType["KATHMANDUNET"] = "kathmandunet";
    NetworkType["LIMANET"] = "limanet";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
var PermissionScopeMethods;
(function (PermissionScopeMethods) {
    PermissionScopeMethods["GET_ACCOUNTS"] = "tezos_getAccounts";
    PermissionScopeMethods["OPERATION_REQUEST"] = "tezos_send";
    PermissionScopeMethods["SIGN"] = "tezos_sign";
})(PermissionScopeMethods = exports.PermissionScopeMethods || (exports.PermissionScopeMethods = {}));
var PermissionScopeEvents;
(function (PermissionScopeEvents) {
    PermissionScopeEvents["CHAIN_CHANGED"] = "chainChanged";
    PermissionScopeEvents["ACCOUNTS_CHANGED"] = "accountsChanged";
})(PermissionScopeEvents = exports.PermissionScopeEvents || (exports.PermissionScopeEvents = {}));
var WalletConnectCommunicationClient = /** @class */ (function (_super) {
    __extends(WalletConnectCommunicationClient, _super);
    function WalletConnectCommunicationClient(wcOptions) {
        var _this = _super.call(this) || this;
        _this.wcOptions = wcOptions;
        _this.activeListeners = new Map();
        _this.channelOpeningListeners = new Map();
        return _this;
    }
    WalletConnectCommunicationClient.getInstance = function (wcOptions) {
        if (!WalletConnectCommunicationClient.instance) {
            WalletConnectCommunicationClient.instance = new WalletConnectCommunicationClient(wcOptions);
        }
        return WalletConnectCommunicationClient.instance;
    };
    WalletConnectCommunicationClient.prototype.listenForEncryptedMessage = function (senderPublicKey, messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var callbackFunction;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.activeListeners.has(senderPublicKey)) {
                    return [2 /*return*/];
                }
                callbackFunction = function (message, context) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        messageCallback(message, context);
                        return [2 /*return*/];
                    });
                }); };
                this.activeListeners.set(senderPublicKey, callbackFunction);
                return [2 /*return*/];
            });
        });
    };
    WalletConnectCommunicationClient.prototype.listenForChannelOpening = function (messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var callbackFunction;
            var _this = this;
            return __generator(this, function (_a) {
                callbackFunction = function (pairingResponse) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        messageCallback(pairingResponse);
                        return [2 /*return*/];
                    });
                }); };
                this.channelOpeningListeners.set('channelOpening', callbackFunction);
                return [2 /*return*/];
            });
        });
    };
    WalletConnectCommunicationClient.prototype.unsubscribeFromEncryptedMessages = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    WalletConnectCommunicationClient.prototype.unsubscribeFromEncryptedMessage = function (_senderPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    WalletConnectCommunicationClient.prototype.sendMessage = function (_message, _peer) {
        return __awaiter(this, void 0, void 0, function () {
            var serializer, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serializer = new beacon_core_1.Serializer();
                        return [4 /*yield*/, serializer.deserialize(_message)];
                    case 1:
                        message = (_a.sent());
                        this.currentMessageId = message.id;
                        if ((message === null || message === void 0 ? void 0 : message.type) === beacon_types_1.BeaconMessageType.PermissionRequest) {
                            this.requestPermissions();
                        }
                        if ((message === null || message === void 0 ? void 0 : message.type) === beacon_types_1.BeaconMessageType.OperationRequest) {
                            this.sendOperations(message);
                        }
                        if ((message === null || message === void 0 ? void 0 : message.type) === beacon_types_1.BeaconMessageType.SignPayloadRequest) {
                            this.signPayload(message);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    WalletConnectCommunicationClient.prototype.requestPermissions = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var session, network, result, permissionResponse;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        console.log('#### Requesting permissions');
                        session = this.getSession();
                        if (!this.getPermittedMethods().includes(PermissionScopeMethods.GET_ACCOUNTS)) {
                            throw new error_1.MissingRequiredScope(PermissionScopeMethods.GET_ACCOUNTS);
                        }
                        network = this.getActiveNetwork();
                        console.log('#### Requesting public keys');
                        return [4 /*yield*/, ((_a = this.signClient) === null || _a === void 0 ? void 0 : _a.request({
                                topic: session.topic,
                                chainId: "".concat(TEZOS_PLACEHOLDER, ":").concat(network),
                                request: {
                                    method: PermissionScopeMethods.GET_ACCOUNTS,
                                    params: {}
                                }
                            }))];
                    case 1:
                        result = _c.sent();
                        console.log('##### GET ACCOUNTS', result);
                        if (!result || result.length < 1) {
                            throw new Error('No account shared by wallet');
                        }
                        if (result.some(function (account) { return !account.pubkey; })) {
                            throw new Error('Public Key in `tezos_getAccounts` is empty!');
                        }
                        permissionResponse = {
                            type: beacon_types_1.BeaconMessageType.PermissionResponse,
                            appMetadata: {
                                senderId: session.peer.publicKey,
                                name: session.peer.metadata.name,
                                icon: session.peer.metadata.icons[0]
                            },
                            publicKey: (_b = result[0]) === null || _b === void 0 ? void 0 : _b.pubkey,
                            network: { type: NetworkType.MAINNET },
                            scopes: [beacon_types_1.PermissionScope.SIGN, beacon_types_1.PermissionScope.OPERATION_REQUEST],
                            id: this.currentMessageId
                        };
                        this.sendResponse(session, permissionResponse);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @description Once the session is establish, send payload to be approved and signed by the wallet.
     * @error MissingRequiredScope is thrown if permission to sign payload was not granted
     */
    WalletConnectCommunicationClient.prototype.signPayload = function (signPayloadRequest) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var session, network, account;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        session = this.getSession();
                        if (!this.getPermittedMethods().includes(PermissionScopeMethods.SIGN)) {
                            throw new error_1.MissingRequiredScope(PermissionScopeMethods.SIGN);
                        }
                        network = this.getActiveNetwork();
                        return [4 /*yield*/, this.getPKH()];
                    case 1:
                        account = _b.sent();
                        this.validateNetworkAndAccount(network, account);
                        // TODO: Type
                        (_a = this.signClient) === null || _a === void 0 ? void 0 : _a.request({
                            topic: session.topic,
                            chainId: "".concat(TEZOS_PLACEHOLDER, ":").concat(network),
                            request: {
                                method: PermissionScopeMethods.SIGN,
                                params: {
                                    account: account,
                                    payload: signPayloadRequest.payload
                                }
                            }
                        }).then(function (response) {
                            var signPayloadResponse = {
                                type: beacon_types_1.BeaconMessageType.SignPayloadResponse,
                                signingType: signPayloadRequest.signingType,
                                signature: response === null || response === void 0 ? void 0 : response.signature,
                                id: _this.currentMessageId
                            };
                            _this.sendResponse(session, signPayloadResponse);
                        }).catch(function () { return __awaiter(_this, void 0, void 0, function () {
                            var errorResponse;
                            return __generator(this, function (_a) {
                                errorResponse = {
                                    type: beacon_types_1.BeaconMessageType.Error,
                                    id: this.currentMessageId,
                                    errorType: beacon_types_1.BeaconErrorType.ABORTED_ERROR
                                };
                                this.sendResponse(session, errorResponse);
                                return [2 /*return*/];
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @description Once the session is established, send Tezos operations to be approved, signed and inject by the wallet.
     * @error MissingRequiredScope is thrown if permission to send operation was not granted
     */
    WalletConnectCommunicationClient.prototype.sendOperations = function (operationRequest) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var session, network, account;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        session = this.getSession();
                        if (!this.getPermittedMethods().includes(PermissionScopeMethods.OPERATION_REQUEST)) {
                            throw new error_1.MissingRequiredScope(PermissionScopeMethods.OPERATION_REQUEST);
                        }
                        network = this.getActiveNetwork();
                        return [4 /*yield*/, this.getPKH()];
                    case 1:
                        account = _b.sent();
                        this.validateNetworkAndAccount(network, account);
                        (_a = this.signClient) === null || _a === void 0 ? void 0 : _a.request({
                            topic: session.topic,
                            chainId: "".concat(TEZOS_PLACEHOLDER, ":").concat(network),
                            request: {
                                method: PermissionScopeMethods.OPERATION_REQUEST,
                                params: {
                                    account: account,
                                    operations: operationRequest.operationDetails
                                }
                            }
                        }).then(function (response) {
                            var _a, _b, _c;
                            var sendOperationResponse = {
                                type: beacon_types_1.BeaconMessageType.OperationResponse,
                                transactionHash: (_c = (_b = (_a = response.operationHash) !== null && _a !== void 0 ? _a : response.transactionHash) !== null && _b !== void 0 ? _b : response.hash) !== null && _c !== void 0 ? _c : '',
                                id: _this.currentMessageId
                            };
                            _this.sendResponse(session, sendOperationResponse);
                        }).catch(function () { return __awaiter(_this, void 0, void 0, function () {
                            var errorResponse;
                            return __generator(this, function (_a) {
                                errorResponse = {
                                    type: beacon_types_1.BeaconMessageType.Error,
                                    id: this.currentMessageId,
                                    errorType: beacon_types_1.BeaconErrorType.ABORTED_ERROR
                                };
                                this.sendResponse(session, errorResponse);
                                return [2 /*return*/];
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    WalletConnectCommunicationClient.prototype.init = function (forceNewConnection) {
        var _a;
        if (forceNewConnection === void 0) { forceNewConnection = false; }
        return __awaiter(this, void 0, void 0, function () {
            var connectParams, _b, sessions, _i, sessions_1, session, _c, uri, approval;
            var _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        connectParams = {
                            permissionScope: {
                                networks: [NetworkType.MAINNET],
                                events: [],
                                methods: [
                                    PermissionScopeMethods.GET_ACCOUNTS,
                                    PermissionScopeMethods.OPERATION_REQUEST,
                                    PermissionScopeMethods.SIGN
                                ]
                            },
                            pairingTopic: undefined
                        };
                        _b = this;
                        return [4 /*yield*/, sign_client_1.SignClient.init(this.wcOptions)];
                    case 1:
                        _b.signClient = _e.sent();
                        sessions = this.signClient.session.getAll();
                        if (!forceNewConnection) return [3 /*break*/, 6];
                        _i = 0, sessions_1 = sessions;
                        _e.label = 2;
                    case 2:
                        if (!(_i < sessions_1.length)) return [3 /*break*/, 5];
                        session = sessions_1[_i];
                        return [4 /*yield*/, this.signClient.disconnect({
                                topic: session.topic,
                                reason: {
                                    code: 0,
                                    message: 'Force new connection'
                                }
                            })];
                    case 3:
                        _e.sent();
                        _e.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5:
                        this.clearState();
                        sessions = this.signClient.session.getAll();
                        _e.label = 6;
                    case 6:
                        if (sessions && sessions.length > 0) {
                            this.session = sessions[0];
                            this.setDefaultAccountAndNetwork();
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.signClient.connect({
                                requiredNamespaces: (_d = {},
                                    _d[TEZOS_PLACEHOLDER] = {
                                        chains: connectParams.permissionScope.networks.map(function (network) { return "".concat(TEZOS_PLACEHOLDER, ":").concat(network); }),
                                        methods: connectParams.permissionScope.methods,
                                        events: (_a = connectParams.permissionScope.events) !== null && _a !== void 0 ? _a : []
                                    },
                                    _d),
                                pairingTopic: connectParams.pairingTopic
                            })];
                    case 7:
                        _c = _e.sent(), uri = _c.uri, approval = _c.approval;
                        approval().then(function (session) { return __awaiter(_this, void 0, void 0, function () {
                            var pairingResponse;
                            var _a;
                            return __generator(this, function (_b) {
                                this.session = (_a = this.session) !== null && _a !== void 0 ? _a : session;
                                this.validateReceivedNamespace(connectParams.permissionScope, this.session.namespaces);
                                this.setDefaultAccountAndNetwork();
                                pairingResponse = {
                                    id: this.session.peer.publicKey,
                                    type: 'walletconnect-pairing-response',
                                    name: session.peer.metadata.name,
                                    publicKey: session.peer.publicKey,
                                    senderId: this.session.peer.publicKey,
                                    extensionId: this.session.peer.metadata.name,
                                    version: '3'
                                };
                                this.channelOpeningListeners.forEach(function (listener) {
                                    listener(pairingResponse);
                                });
                                return [2 /*return*/];
                            });
                        }); });
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    WalletConnectCommunicationClient.prototype.getPairingRequestInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.init(true)];
                    case 1:
                        uri = _b.sent();
                        _a = {};
                        return [4 /*yield*/, (0, beacon_utils_1.generateGUID)()];
                    case 2:
                        _a.id = _b.sent(),
                            _a.type = 'walletconnect-pairing-request',
                            _a.name = 'WalletConnect',
                            _a.version = beacon_core_1.BEACON_VERSION,
                            _a.uri = uri;
                        return [4 /*yield*/, (0, beacon_utils_1.generateGUID)()];
                    case 3:
                        _a.senderId = _b.sent();
                        return [4 /*yield*/, (0, beacon_utils_1.generateGUID)()];
                    case 4: return [2 /*return*/, (_a.publicKey = _b.sent(),
                            _a)];
                }
            });
        });
    };
    WalletConnectCommunicationClient.prototype.validateReceivedNamespace = function (scope, receivedNamespaces) {
        if (receivedNamespaces[TEZOS_PLACEHOLDER]) {
            this.validateMethods(scope.methods, receivedNamespaces[TEZOS_PLACEHOLDER].methods);
            if (scope.events) {
                this.validateEvents(scope.events, receivedNamespaces['tezos'].events);
            }
            this.validateAccounts(scope.networks, receivedNamespaces[TEZOS_PLACEHOLDER].accounts);
        }
        else {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('All namespaces must be approved', (0, utils_1.getSdkError)('USER_REJECTED').code, 'incomplete', 'tezos');
        }
    };
    WalletConnectCommunicationClient.prototype.validateMethods = function (requiredMethods, receivedMethods) {
        var missingMethods = [];
        requiredMethods.forEach(function (method) {
            if (!receivedMethods.includes(method)) {
                missingMethods.push(method);
            }
        });
        if (missingMethods.length > 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('All methods must be approved', (0, utils_1.getSdkError)('USER_REJECTED_METHODS').code, 'incomplete', missingMethods);
        }
    };
    WalletConnectCommunicationClient.prototype.validateEvents = function (requiredEvents, receivedEvents) {
        var missingEvents = [];
        requiredEvents.forEach(function (method) {
            if (!receivedEvents.includes(method)) {
                missingEvents.push(method);
            }
        });
        if (missingEvents.length > 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('All events must be approved', (0, utils_1.getSdkError)('USER_REJECTED_EVENTS').code, 'incomplete', missingEvents);
        }
    };
    WalletConnectCommunicationClient.prototype.validateAccounts = function (requiredNetwork, receivedAccounts) {
        if (receivedAccounts.length === 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('Accounts must not be empty', (0, utils_1.getSdkError)('USER_REJECTED_CHAINS').code, 'incomplete');
        }
        var receivedChains = [];
        var invalidChains = [];
        var missingChains = [];
        var invalidChainsNamespace = [];
        receivedAccounts.forEach(function (chain) {
            var accountId = chain.split(':');
            if (accountId.length !== 3) {
                invalidChains.push(chain);
            }
            if (accountId[0] !== TEZOS_PLACEHOLDER) {
                invalidChainsNamespace.push(chain);
            }
            var network = accountId[1];
            if (!receivedChains.includes(network)) {
                receivedChains.push(network);
            }
        });
        if (invalidChains.length > 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('Accounts must be CAIP-10 compliant', (0, utils_1.getSdkError)('USER_REJECTED_CHAINS').code, 'invalid', invalidChains);
        }
        if (invalidChainsNamespace.length > 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('Accounts must be defined in matching namespace', (0, utils_1.getSdkError)('UNSUPPORTED_ACCOUNTS').code, 'invalid', invalidChainsNamespace);
        }
        requiredNetwork.forEach(function (network) {
            if (!receivedChains.includes(network)) {
                missingChains.push(network);
            }
        });
        if (missingChains.length > 0) {
            this.clearState();
            throw new error_1.InvalidReceivedSessionNamespace('All chains must have at least one account', (0, utils_1.getSdkError)('USER_REJECTED_CHAINS').code, 'incomplete', missingChains);
        }
    };
    WalletConnectCommunicationClient.prototype.validateNetworkAndAccount = function (network, account) {
        if (!this.getTezosNamespace().accounts.includes("".concat(TEZOS_PLACEHOLDER, ":").concat(network, ":").concat(account))) {
            throw new error_1.InvalidNetworkOrAccount(network, account);
        }
    };
    /**
     * @description Access the active network
     * @error ActiveNetworkUnspecified thorwn when there are multiple Tezos netwroks in the session and none is set as the active one
     */
    WalletConnectCommunicationClient.prototype.getActiveNetwork = function () {
        if (!this.activeNetwork) {
            this.getSession();
            throw new error_1.ActiveNetworkUnspecified();
        }
        return this.activeNetwork;
    };
    WalletConnectCommunicationClient.prototype.setDefaultAccountAndNetwork = function () {
        var activeAccount = this.getAccounts();
        if (activeAccount.length === 1) {
            this.activeAccount = activeAccount[0];
        }
        var activeNetwork = this.getNetworks();
        if (activeNetwork.length === 1) {
            this.activeNetwork = activeNetwork[0];
        }
    };
    /**
     * @description Return all connected accounts from the active session
     * @error NotConnected if no active session
     */
    WalletConnectCommunicationClient.prototype.getAccounts = function () {
        return this.getTezosNamespace().accounts.map(function (account) { return account.split(':')[2]; });
    };
    /**
     * @description Return all networks from the namespace of the active session
     * @error NotConnected if no active session
     */
    WalletConnectCommunicationClient.prototype.getNetworks = function () {
        return this.getPermittedNetwork();
    };
    WalletConnectCommunicationClient.prototype.getTezosNamespace = function () {
        if (TEZOS_PLACEHOLDER in this.getSession().namespaces) {
            return this.getSession().namespaces[TEZOS_PLACEHOLDER];
        }
        else {
            throw new error_1.InvalidSession('Tezos not found in namespaces');
        }
    };
    WalletConnectCommunicationClient.prototype.getPermittedMethods = function () {
        return this.getTezosRequiredNamespace().methods;
    };
    WalletConnectCommunicationClient.prototype.getPermittedNetwork = function () {
        return this.getTezosRequiredNamespace().chains.map(function (chain) { return chain.split(':')[1]; });
    };
    WalletConnectCommunicationClient.prototype.getTezosRequiredNamespace = function () {
        // TODO: Remove testing code
        return {
            chains: ['tezos:mainnet'],
            events: [],
            methods: ['tezos_getAccounts', 'tezos_send', 'tezos_sign']
        };
        // if (TEZOS_PLACEHOLDER in this.getSession().requiredNamespaces) {
        //   return this.getSession().requiredNamespaces[TEZOS_PLACEHOLDER] as {
        //     chains: string[]
        //     methods: string[]
        //     events: string[]
        //   }
        // } else {
        //   throw new InvalidSession('Tezos not found in requiredNamespaces')
        // }
    };
    WalletConnectCommunicationClient.prototype.sendResponse = function (session, partialResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var response, serializer, serialized;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = __assign(__assign({}, partialResponse), { version: '2', senderId: session.peer.publicKey });
                        serializer = new beacon_core_1.Serializer();
                        return [4 /*yield*/, serializer.serialize(response)];
                    case 1:
                        serialized = _a.sent();
                        this.activeListeners.forEach(function (listener) {
                            listener(serialized, {
                                origin: beacon_types_1.Origin.WALLETCONNECT,
                                id: _this.currentMessageId
                            });
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    WalletConnectCommunicationClient.prototype.currentSession = function () {
        return this.session;
    };
    WalletConnectCommunicationClient.prototype.getSession = function () {
        if (!this.session) {
            throw new error_1.NotConnected();
        }
        return this.session;
    };
    /**
     * @description Access the public key hash of the active account
     * @error ActiveAccountUnspecified thrown when there are multiple Tezos account in the session and none is set as the active one
     */
    WalletConnectCommunicationClient.prototype.getPKH = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.activeAccount) {
                    this.getSession();
                    throw new error_1.ActiveAccountUnspecified();
                }
                return [2 /*return*/, this.activeAccount];
            });
        });
    };
    WalletConnectCommunicationClient.prototype.clearState = function () {
        this.session = undefined;
        this.activeAccount = undefined;
        this.activeNetwork = undefined;
    };
    return WalletConnectCommunicationClient;
}(beacon_core_1.CommunicationClient));
exports.WalletConnectCommunicationClient = WalletConnectCommunicationClient;
//# sourceMappingURL=WalletConnectCommunicationClient.js.map