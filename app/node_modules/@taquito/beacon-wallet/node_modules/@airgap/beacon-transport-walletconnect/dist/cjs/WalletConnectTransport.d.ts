import { KeyPair } from '@stablelib/ed25519';
import { WalletConnectCommunicationClient } from './communication-client/WalletConnectCommunicationClient';
import { Storage, ExtendedWalletConnectPairingResponse, StorageKey, WalletConnectPairingRequest } from '@airgap/beacon-types';
import { Transport } from '@airgap/beacon-core';
import { SignClientTypes } from '@walletconnect/types';
/**
 * @internalapi
 *
 *
 */
export declare class WalletConnectTransport<T extends WalletConnectPairingRequest | ExtendedWalletConnectPairingResponse, K extends StorageKey.TRANSPORT_WALLETCONNECT_PEERS_DAPP> extends Transport<T, K, WalletConnectCommunicationClient> {
    private wcOptions;
    constructor(name: string, _keyPair: KeyPair, storage: Storage, storageKey: K, wcOptions: SignClientTypes.Options);
    static isAvailable(): Promise<boolean>;
    connect(): Promise<void>;
    getPeers(): Promise<T[]>;
    disconnect(): Promise<void>;
    startOpenChannelListener(): Promise<void>;
    getPairingRequestInfo(): Promise<any>;
    listen(publicKey: string): Promise<void>;
}
