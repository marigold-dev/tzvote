"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PCommunicationClient = void 0;
var ed25519_1 = require("@stablelib/ed25519");
var axios_1 = require("axios");
var beacon_utils_1 = require("@airgap/beacon-utils");
var MatrixClient_1 = require("../matrix-client/MatrixClient");
var MatrixClientEvent_1 = require("../matrix-client/models/MatrixClientEvent");
var MatrixMessage_1 = require("../matrix-client/models/MatrixMessage");
var beacon_types_1 = require("@airgap/beacon-types");
var beacon_core_1 = require("@airgap/beacon-core");
var beacon_utils_2 = require("@airgap/beacon-utils");
var blake2b_1 = require("@stablelib/blake2b");
var utf8_1 = require("@stablelib/utf8");
var logger = new beacon_core_1.Logger('P2PCommunicationClient');
var REGIONS_AND_SERVERS = (_a = {},
    _a[beacon_types_1.Regions.EUROPE_WEST] = [
        'beacon-node-1.diamond.papers.tech',
        'beacon-node-1.sky.papers.tech',
        'beacon-node-2.sky.papers.tech',
        'beacon-node-1.hope.papers.tech',
        'beacon-node-1.hope-2.papers.tech',
        'beacon-node-1.hope-3.papers.tech',
        'beacon-node-1.hope-4.papers.tech',
        'beacon-node-1.hope-5.papers.tech'
    ],
    _a);
/**
 * @internalapi
 */
var P2PCommunicationClient = /** @class */ (function (_super) {
    __extends(P2PCommunicationClient, _super);
    function P2PCommunicationClient(name, keyPair, replicationCount, storage, matrixNodes, iconUrl, appUrl) {
        var _this = _super.call(this, keyPair) || this;
        _this.name = name;
        _this.replicationCount = replicationCount;
        _this.storage = storage;
        _this.iconUrl = iconUrl;
        _this.appUrl = appUrl;
        _this.client = new beacon_utils_2.ExposedPromise();
        _this.activeListeners = new Map();
        _this.ignoredRooms = [];
        _this.loginCounter = 0;
        logger.log('constructor', 'P2PCommunicationClient created');
        _this.ENABLED_RELAY_SERVERS = REGIONS_AND_SERVERS;
        if (matrixNodes) {
            _this.ENABLED_RELAY_SERVERS = __assign(__assign({}, REGIONS_AND_SERVERS), matrixNodes);
        }
        return _this;
    }
    P2PCommunicationClient.prototype.getPairingRequestInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, (0, beacon_utils_2.generateGUID)()];
                    case 1:
                        _a.id = _b.sent(),
                            _a.type = 'p2p-pairing-request',
                            _a.name = this.name,
                            _a.version = beacon_core_1.BEACON_VERSION;
                        return [4 /*yield*/, this.getPublicKey()];
                    case 2:
                        _a.publicKey = _b.sent();
                        return [4 /*yield*/, this.getRelayServer()];
                    case 3:
                        info = (_a.relayServer = (_b.sent()).server,
                            _a);
                        if (this.iconUrl) {
                            info.icon = this.iconUrl;
                        }
                        if (this.appUrl) {
                            info.appUrl = this.appUrl;
                        }
                        return [2 /*return*/, info];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getPairingResponseInfo = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            id: request.id,
                            type: 'p2p-pairing-response',
                            name: this.name,
                            version: request.version
                        };
                        return [4 /*yield*/, this.getPublicKey()];
                    case 1:
                        _a.publicKey = _b.sent();
                        return [4 /*yield*/, this.getRelayServer()];
                    case 2:
                        info = (_a.relayServer = (_b.sent()).server,
                            _a);
                        if (this.iconUrl) {
                            info.icon = this.iconUrl;
                        }
                        if (this.appUrl) {
                            info.appUrl = this.appUrl;
                        }
                        return [2 /*return*/, info];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.findBestRegion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var keys, allPromises, region;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.selectedRegion) {
                            return [2 /*return*/, this.selectedRegion];
                        }
                        keys = Object.keys(this.ENABLED_RELAY_SERVERS);
                        allPromises = [];
                        keys.forEach(function (key) {
                            var _a;
                            var nodes = (_a = _this.ENABLED_RELAY_SERVERS[key]) !== null && _a !== void 0 ? _a : [];
                            if (nodes.length === 0) {
                                return;
                            }
                            var index = Math.floor(Math.random() * nodes.length);
                            allPromises.push(_this.getBeaconInfo(nodes[index])
                                .then(function (res) { return ({
                                region: key,
                                server: nodes[index],
                                response: res
                            }); })
                                .catch(function (err) {
                                return new Promise(function (_resolve, reject) {
                                    // This workaround is done because Promise.race stops at the first failure, but we need the first success.
                                    // TODO: If all promises have been rejected, let's not wait 2000 and abort earlier.
                                    setTimeout(function () { return reject(err); }, 2000);
                                });
                            }));
                        });
                        return [4 /*yield*/, Promise.race(allPromises)];
                    case 1:
                        region = _a.sent();
                        this.selectedRegion = region.region;
                        return [2 /*return*/, region.region
                            // Select random server from each region.
                            // Start request to random server from each region
                            // Fastest response wins, region is selected
                        ];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getRelayServer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var relayServer, info, node, info, region, regionNodes, nodes, index, server, response, relayError_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.relayServer) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.relayServer.promise
                            // We make sure the locally cached timestamp is not older than 1 minute, if it is, we refresh it
                        ];
                    case 1:
                        relayServer = _a.sent();
                        // We make sure the locally cached timestamp is not older than 1 minute, if it is, we refresh it
                        if (Date.now() - relayServer.localTimestamp < 60 * 1000) {
                            return [2 /*return*/, { server: relayServer.server, timestamp: relayServer.timestamp }];
                        }
                        return [4 /*yield*/, this.getBeaconInfo(relayServer.server)];
                    case 2:
                        info = _a.sent();
                        this.relayServer.resolve({
                            server: relayServer.server,
                            timestamp: info.timestamp,
                            localTimestamp: new Date().getTime()
                        });
                        return [2 /*return*/, { server: relayServer.server, timestamp: info.timestamp }];
                    case 3:
                        this.relayServer = new beacon_utils_2.ExposedPromise();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.storage.get(beacon_types_1.StorageKey.MATRIX_SELECTED_NODE)];
                    case 5:
                        node = _a.sent();
                        if (!(node && node.length > 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getBeaconInfo(node)];
                    case 6:
                        info = _a.sent();
                        this.relayServer.resolve({
                            server: node,
                            timestamp: info.timestamp,
                            localTimestamp: new Date().getTime()
                        });
                        return [2 /*return*/, { server: node, timestamp: info.timestamp }];
                    case 7: return [4 /*yield*/, this.findBestRegion()];
                    case 8:
                        region = _a.sent();
                        regionNodes = this.ENABLED_RELAY_SERVERS[region];
                        if (!regionNodes) {
                            throw new Error("No servers found for region ".concat(region));
                        }
                        nodes = __spreadArray([], regionNodes, true);
                        _a.label = 9;
                    case 9:
                        if (!(nodes.length > 0)) return [3 /*break*/, 14];
                        index = Math.floor(Math.random() * nodes.length);
                        server = nodes[index];
                        _a.label = 10;
                    case 10:
                        _a.trys.push([10, 12, , 13]);
                        return [4 /*yield*/, this.getBeaconInfo(server)];
                    case 11:
                        response = _a.sent();
                        this.storage
                            .set(beacon_types_1.StorageKey.MATRIX_SELECTED_NODE, server)
                            .catch(function (error) { return logger.log(error); });
                        this.relayServer.resolve({
                            server: server,
                            timestamp: response.timestamp,
                            localTimestamp: new Date().getTime()
                        });
                        return [2 /*return*/, { server: server, timestamp: response.timestamp }];
                    case 12:
                        relayError_1 = _a.sent();
                        logger.log("Ignoring server \"".concat(server, "\", trying another one..."));
                        nodes.splice(index, 1);
                        return [3 /*break*/, 13];
                    case 13: return [3 /*break*/, 9];
                    case 14:
                        this.relayServer.reject("No matrix server reachable!");
                        throw new Error("No matrix server reachable!");
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getBeaconInfo = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, axios_1.default
                        .get("https://".concat(server, "/_synapse/client/beacon/info"))
                        .then(function (res) { return ({
                        region: res.data.region,
                        known_servers: res.data.known_servers,
                        timestamp: Math.floor(res.data.timestamp)
                    }); })];
            });
        });
    };
    P2PCommunicationClient.prototype.tryJoinRooms = function (roomId, retry) {
        if (retry === void 0) { retry = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.client.promise];
                    case 1: return [4 /*yield*/, (_a.sent()).joinRooms(roomId)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        if (retry <= 10 && error_1.errcode === 'M_FORBIDDEN') {
                            // If we join the room too fast after receiving the invite, the server can accidentally reject our join. This seems to be a problem only when using a federated multi-node setup. Usually waiting for a couple milliseconds solves the issue, but to handle lag, we will keep retrying for 2 seconds.
                            logger.log("Retrying to join...", error_1);
                            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.tryJoinRooms(roomId, retry + 1)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, 200);
                        }
                        else {
                            logger.log("Failed to join after ".concat(retry, " tries."), error_1);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.start = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var relayServer, client, time, loginString, _c, _d, _e, _f, _g, loginRawDigest, secretKey, rawSignature, _h, _j, _k, _l, error_2;
            var _m;
            var _this = this;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        logger.log('start', 'starting client');
                        logger.log('start', "connecting to server");
                        return [4 /*yield*/, this.getRelayServer()];
                    case 1:
                        relayServer = _o.sent();
                        client = MatrixClient_1.MatrixClient.create({
                            baseUrl: "https://".concat(relayServer.server),
                            storage: this.storage
                        });
                        this.initialListener = function (event) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (this.initialEvent && this.initialEvent.timestamp && event && event.timestamp) {
                                    if (this.initialEvent.timestamp < event.timestamp) {
                                        this.initialEvent = event;
                                    }
                                }
                                else {
                                    this.initialEvent = event;
                                }
                                return [2 /*return*/];
                            });
                        }); };
                        client.subscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, this.initialListener);
                        client.subscribe(MatrixClientEvent_1.MatrixClientEventType.INVITE, function (event) { return __awaiter(_this, void 0, void 0, function () {
                            var member;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (event.content.members.length === 1) {
                                            // If there is only one member we know it's a new room
                                            // TODO: Use the "sender" of the event instead
                                            member = event.content.members[0];
                                        }
                                        return [4 /*yield*/, this.tryJoinRooms(event.content.roomId)];
                                    case 1:
                                        _a.sent();
                                        if (!member) return [3 /*break*/, 4];
                                        return [4 /*yield*/, this.updateRelayServer(member)];
                                    case 2:
                                        _a.sent();
                                        return [4 /*yield*/, this.updatePeerRoom(member, event.content.roomId)];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                        if (!relayServer.timestamp) {
                            throw new Error('No timestamp received from relay server');
                        }
                        time = Math.floor(relayServer.timestamp);
                        loginString = "login:".concat(Math.floor(time / (5 * 60)));
                        _d = (_c = logger).log;
                        _e = ['start'];
                        _g = (_f = "login ".concat(loginString, ", ")).concat;
                        return [4 /*yield*/, this.getPublicKeyHash()];
                    case 2:
                        _d.apply(_c, _e.concat([_g.apply(_f, [_o.sent(), " on "]).concat(relayServer.server)]));
                        loginRawDigest = (0, blake2b_1.hash)((0, utf8_1.encode)(loginString), 32);
                        secretKey = (_a = this.keyPair.secretKey) !== null && _a !== void 0 ? _a : this.keyPair.privateKey;
                        rawSignature = (0, ed25519_1.sign)(secretKey, loginRawDigest);
                        _o.label = 3;
                    case 3:
                        _o.trys.push([3, 7, , 9]);
                        _j = (_h = client).start;
                        _m = {};
                        return [4 /*yield*/, this.getPublicKeyHash()];
                    case 4:
                        _m.id = _o.sent();
                        _l = (_k = "ed:".concat((0, beacon_utils_1.toHex)(rawSignature), ":")).concat;
                        return [4 /*yield*/, this.getPublicKey()];
                    case 5: return [4 /*yield*/, _j.apply(_h, [(_m.password = _l.apply(_k, [_o.sent()]),
                                _m.deviceId = (0, beacon_utils_1.toHex)(this.keyPair.publicKey),
                                _m)])];
                    case 6:
                        _o.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        error_2 = _o.sent();
                        logger.error('start', 'Could not log in, retrying');
                        return [4 /*yield*/, this.reset()]; // If we can't log in, let's reset
                    case 8:
                        _o.sent(); // If we can't log in, let's reset
                        if (!this.selectedRegion) {
                            throw new Error('No region selected.');
                        }
                        if (this.loginCounter <= ((_b = this.ENABLED_RELAY_SERVERS[this.selectedRegion]) !== null && _b !== void 0 ? _b : []).length) {
                            this.loginCounter++;
                            this.start();
                            return [2 /*return*/];
                        }
                        else {
                            logger.error('start', 'Tried to log in to every known beacon node, but no login was successful.');
                            throw new Error('Could not connect to any beacon nodes. Try again later.');
                        }
                        return [3 /*break*/, 9];
                    case 9:
                        logger.log('start', 'login successful, client is ready');
                        this.client.resolve(client);
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.log('stop', 'stopping client');
                        if (!this.client.isResolved()) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.client.promise];
                    case 1: return [4 /*yield*/, (_a.sent()).stop().catch(function (error) { return logger.error(error); })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.reset()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.log('reset', 'resetting connection');
                        return [4 /*yield*/, this.storage.delete(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS).catch(function (error) { return logger.log(error); })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.storage.delete(beacon_types_1.StorageKey.MATRIX_PRESERVED_STATE).catch(function (error) { return logger.log(error); })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.storage.delete(beacon_types_1.StorageKey.MATRIX_SELECTED_NODE).catch(function (error) { return logger.log(error); })
                            // Instead of resetting everything, maybe we should make sure a new instance is created?
                        ];
                    case 3:
                        _a.sent();
                        // Instead of resetting everything, maybe we should make sure a new instance is created?
                        this.relayServer = undefined;
                        this.client = new beacon_utils_2.ExposedPromise();
                        this.initialEvent = undefined;
                        this.initialListener = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.listenForEncryptedMessage = function (senderPublicKey, messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedKey, callbackFunction, lastEvent, initialListener;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.activeListeners.has(senderPublicKey)) {
                            return [2 /*return*/];
                        }
                        logger.log('listenForEncryptedMessage', "start listening for encrypted messages from publicKey ".concat(senderPublicKey));
                        return [4 /*yield*/, this.createCryptoBoxServer(senderPublicKey, this.keyPair)];
                    case 1:
                        sharedKey = _a.sent();
                        callbackFunction = function (event) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, payload, decryptedMessage, decryptionError_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = this.isTextMessage(event.content);
                                        if (!_a) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.isSender(event, senderPublicKey)];
                                    case 1:
                                        _a = (_b.sent());
                                        _b.label = 2;
                                    case 2:
                                        if (!_a) return [3 /*break*/, 8];
                                        payload = void 0;
                                        return [4 /*yield*/, this.updateRelayServer(event.content.message.sender)];
                                    case 3:
                                        _b.sent();
                                        return [4 /*yield*/, this.updatePeerRoom(event.content.message.sender, event.content.roomId)];
                                    case 4:
                                        _b.sent();
                                        try {
                                            payload = Buffer.from(event.content.message.content, 'hex');
                                            // content can be non-hex if it's a connection open request
                                        }
                                        catch (_c) {
                                            /* */
                                        }
                                        if (!(payload && payload.length >= beacon_utils_1.secretbox_NONCEBYTES + beacon_utils_1.secretbox_MACBYTES)) return [3 /*break*/, 8];
                                        _b.label = 5;
                                    case 5:
                                        _b.trys.push([5, 7, , 8]);
                                        return [4 /*yield*/, (0, beacon_utils_1.decryptCryptoboxPayload)(payload, sharedKey.receive)];
                                    case 6:
                                        decryptedMessage = _b.sent();
                                        logger.log('listenForEncryptedMessage', "received a message from ".concat(senderPublicKey), decryptedMessage);
                                        // logger.log(
                                        //   'listenForEncryptedMessage',
                                        //   'encrypted message received',
                                        //   decryptedMessage,
                                        //   await new Serializer().deserialize(decryptedMessage)
                                        // )
                                        // console.log('calculated sender ID', await getSenderId(senderPublicKey))
                                        // TODO: Add check for correct decryption key / sender ID
                                        messageCallback(decryptedMessage);
                                        return [3 /*break*/, 8];
                                    case 7:
                                        decryptionError_1 = _b.sent();
                                        return [3 /*break*/, 8];
                                    case 8: return [2 /*return*/];
                                }
                            });
                        }); };
                        this.activeListeners.set(senderPublicKey, callbackFunction);
                        return [4 /*yield*/, this.client.promise];
                    case 2:
                        (_a.sent()).subscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, callbackFunction);
                        lastEvent = this.initialEvent;
                        if (!(lastEvent &&
                            lastEvent.timestamp &&
                            new Date().getTime() - lastEvent.timestamp < 5 * 60 * 1000)) return [3 /*break*/, 4];
                        logger.log('listenForEncryptedMessage', 'Handling previous event');
                        return [4 /*yield*/, callbackFunction(lastEvent)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        logger.log('listenForEncryptedMessage', 'No previous event found');
                        _a.label = 5;
                    case 5:
                        initialListener = this.initialListener;
                        if (!initialListener) return [3 /*break*/, 7];
                        ;
                        return [4 /*yield*/, this.client.promise];
                    case 6:
                        (_a.sent()).unsubscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, initialListener);
                        _a.label = 7;
                    case 7:
                        this.initialListener = undefined;
                        this.initialEvent = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.unsubscribeFromEncryptedMessage = function (senderPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var listener;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        listener = this.activeListeners.get(senderPublicKey);
                        if (!listener) {
                            return [2 /*return*/];
                        }
                        ;
                        return [4 /*yield*/, this.client.promise];
                    case 1:
                        (_a.sent()).unsubscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, listener);
                        this.activeListeners.delete(senderPublicKey);
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.unsubscribeFromEncryptedMessages = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ;
                        return [4 /*yield*/, this.client.promise];
                    case 1:
                        (_a.sent()).unsubscribeAll(MatrixClientEvent_1.MatrixClientEventType.MESSAGE);
                        this.activeListeners.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.sendMessage = function (message, peer) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedKey, recipientHash, recipient, roomId, encryptedMessage;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCryptoBoxClient(peer.publicKey, this.keyPair)];
                    case 1:
                        sharedKey = _a.sent();
                        return [4 /*yield*/, (0, beacon_utils_1.getHexHash)(Buffer.from(peer.publicKey, 'hex'))];
                    case 2:
                        recipientHash = _a.sent();
                        recipient = (0, beacon_utils_1.recipientString)(recipientHash, peer.relayServer);
                        return [4 /*yield*/, this.getRelevantRoom(recipient)
                            // Before we send the message, we have to wait for the join to be accepted.
                        ];
                    case 3:
                        roomId = _a.sent();
                        // Before we send the message, we have to wait for the join to be accepted.
                        return [4 /*yield*/, this.waitForJoin(roomId)]; // TODO: This can probably be removed because we are now waiting inside the get room method
                    case 4:
                        // Before we send the message, we have to wait for the join to be accepted.
                        _a.sent(); // TODO: This can probably be removed because we are now waiting inside the get room method
                        return [4 /*yield*/, (0, beacon_utils_1.encryptCryptoboxPayload)(message, sharedKey.send)];
                    case 5:
                        encryptedMessage = _a.sent();
                        logger.log('sendMessage', 'sending encrypted message', peer.publicKey, roomId, message);
                        return [4 /*yield*/, this.client.promise];
                    case 6:
                        (_a.sent()).sendTextMessage(roomId, encryptedMessage).catch(function (error) { return __awaiter(_this, void 0, void 0, function () {
                            var newRoomId_1;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(error.errcode === 'M_FORBIDDEN')) return [3 /*break*/, 4];
                                        // Room doesn't exist
                                        logger.log("sendMessage", "M_FORBIDDEN", roomId, error);
                                        return [4 /*yield*/, this.deleteRoomIdFromRooms(roomId)];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, this.getRelevantRoom(recipient)];
                                    case 2:
                                        newRoomId_1 = _a.sent();
                                        logger.log("sendMessage", "Old room deleted, new room created", newRoomId_1);
                                        return [4 /*yield*/, this.client.promise];
                                    case 3:
                                        (_a.sent())
                                            .sendTextMessage(newRoomId_1, encryptedMessage)
                                            .catch(function (error2) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                logger.log("sendMessage", "inner error", newRoomId_1, error2);
                                                return [2 /*return*/];
                                            });
                                        }); });
                                        return [3 /*break*/, 5];
                                    case 4:
                                        logger.log("sendMessage", "unexpected error", error);
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.updatePeerRoom = function (sender, roomId) {
        return __awaiter(this, void 0, void 0, function () {
            var split, roomIds, room;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.log("updatePeerRoom", sender, roomId);
                        split = sender.split(':');
                        if (split.length < 2 || !split[0].startsWith('@')) {
                            throw new Error('Invalid sender');
                        }
                        return [4 /*yield*/, this.storage.get(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS)];
                    case 1:
                        roomIds = _a.sent();
                        room = roomIds[sender];
                        if (room === roomId) {
                            logger.debug("updatePeerRoom", "rooms are the same, not updating");
                        }
                        logger.debug("updatePeerRoom", "current room", room, 'new room', roomId);
                        if (room && room[1]) {
                            // If we have a room already, let's ignore it. We need to do this, otherwise it will be loaded from the matrix cache.
                            logger.log("updatePeerRoom", "adding room \"".concat(room[1], "\" to ignored array"));
                            this.ignoredRooms.push(room[1]);
                        }
                        roomIds[sender] = roomId;
                        return [4 /*yield*/, this.storage.set(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS, roomIds)
                            // TODO: We also need to delete the room from the sync state
                            // If we need to delete a room, we can assume the local state is not up to date anymore, so we can reset the state
                        ];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.deleteRoomIdFromRooms = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
            var roomIds, newRoomIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.get(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS)];
                    case 1:
                        roomIds = _a.sent();
                        newRoomIds = Object.entries(roomIds)
                            .filter(function (entry) { return entry[1] !== roomId; })
                            .reduce(function (pv, cv) {
                            var _a;
                            return (__assign(__assign({}, pv), (_a = {}, _a[cv[0]] = cv[1], _a)));
                        }, {});
                        return [4 /*yield*/, this.storage.set(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS, newRoomIds)
                            // TODO: We also need to delete the room from the sync state
                            // If we need to delete a room, we can assume the local state is not up to date anymore, so we can reset the state
                        ];
                    case 2:
                        _a.sent();
                        // TODO: We also need to delete the room from the sync state
                        // If we need to delete a room, we can assume the local state is not up to date anymore, so we can reset the state
                        this.ignoredRooms.push(roomId);
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.listenForChannelOpening = function (messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug("listenForChannelOpening");
                        return [4 /*yield*/, this.client.promise];
                    case 1:
                        (_a.sent()).subscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, function (event) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, splits, payload, pairingResponse, _b, _c, _d, _e, decryptionError_2;
                            var _f;
                            return __generator(this, function (_g) {
                                switch (_g.label) {
                                    case 0:
                                        _a = this.isTextMessage(event.content);
                                        if (!_a) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.isChannelOpenMessage(event.content)];
                                    case 1:
                                        _a = (_g.sent());
                                        _g.label = 2;
                                    case 2:
                                        if (!_a) return [3 /*break*/, 9];
                                        logger.log("listenForChannelOpening", "channel opening received, trying to decrypt", JSON.stringify(event));
                                        return [4 /*yield*/, this.updateRelayServer(event.content.message.sender)];
                                    case 3:
                                        _g.sent();
                                        return [4 /*yield*/, this.updatePeerRoom(event.content.message.sender, event.content.roomId)];
                                    case 4:
                                        _g.sent();
                                        splits = event.content.message.content.split(':');
                                        payload = Buffer.from(splits[splits.length - 1], 'hex');
                                        if (!(payload.length >= beacon_utils_1.secretbox_NONCEBYTES + beacon_utils_1.secretbox_MACBYTES)) return [3 /*break*/, 9];
                                        _g.label = 5;
                                    case 5:
                                        _g.trys.push([5, 8, , 9]);
                                        _c = (_b = JSON).parse;
                                        return [4 /*yield*/, (0, beacon_utils_1.openCryptobox)(payload, this.keyPair.publicKey, this.keyPair.secretKey)];
                                    case 6:
                                        pairingResponse = _c.apply(_b, [_g.sent()]);
                                        logger.log("listenForChannelOpening", "channel opening received and decrypted", JSON.stringify(pairingResponse));
                                        _d = messageCallback;
                                        _e = [__assign({}, pairingResponse)];
                                        _f = {};
                                        return [4 /*yield*/, (0, beacon_core_1.getSenderId)(pairingResponse.publicKey)];
                                    case 7:
                                        _d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.senderId = _g.sent(), _f)]))]);
                                        return [3 /*break*/, 9];
                                    case 8:
                                        decryptionError_2 = _g.sent();
                                        return [3 /*break*/, 9];
                                    case 9: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.waitForJoin = function (roomId, retry) {
        if (retry === void 0) { retry = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var room;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.promise];
                    case 1: return [4 /*yield*/, (_a.sent()).getRoomById(roomId)];
                    case 2:
                        room = _a.sent();
                        logger.log("waitForJoin", "Currently ".concat(room.members.length, " members, we need at least 2"));
                        if (room.members.length >= 2 || room.members.length === 0) {
                            // 0 means it's an unknown room, we don't need to wait
                            return [2 /*return*/];
                        }
                        else {
                            if (retry <= 200) {
                                // On mobile, due to app switching, we potentially have to wait for a long time
                                logger.log("Waiting for join... Try: ".concat(retry));
                                return [2 /*return*/, new Promise(function (resolve) {
                                        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                resolve(this.waitForJoin(roomId, retry + 1));
                                                return [2 /*return*/];
                                            });
                                        }); }, 100 * (retry > 50 ? 10 : 1)); // After the initial 5 seconds, retry only once per second
                                    })];
                            }
                            else {
                                throw new Error("No one joined after ".concat(retry, " tries."));
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.sendPairingResponse = function (pairingRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var recipientHash, recipient, roomId, message, _a, _b, _c, encryptedMessage, msg;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        logger.log("sendPairingResponse");
                        return [4 /*yield*/, (0, beacon_utils_1.getHexHash)(Buffer.from(pairingRequest.publicKey, 'hex'))];
                    case 1:
                        recipientHash = _d.sent();
                        recipient = (0, beacon_utils_1.recipientString)(recipientHash, pairingRequest.relayServer);
                        return [4 /*yield*/, this.client.promise];
                    case 2: return [4 /*yield*/, (_d.sent()).createTrustedPrivateRoom(recipient)];
                    case 3:
                        roomId = _d.sent();
                        logger.debug("sendPairingResponse", "Connecting to room \"".concat(roomId, "\""));
                        return [4 /*yield*/, this.updatePeerRoom(recipient, roomId)
                            // Before we send the message, we have to wait for the join to be accepted.
                        ];
                    case 4:
                        _d.sent();
                        // Before we send the message, we have to wait for the join to be accepted.
                        return [4 /*yield*/, this.waitForJoin(roomId)]; // TODO: This can probably be removed because we are now waiting inside the get room method
                    case 5:
                        // Before we send the message, we have to wait for the join to be accepted.
                        _d.sent(); // TODO: This can probably be removed because we are now waiting inside the get room method
                        logger.debug("sendPairingResponse", "Successfully joined room.");
                        if (!(typeof pairingRequest.version === 'undefined')) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getPublicKey()]; // v1
                    case 6:
                        _a = _d.sent(); // v1
                        return [3 /*break*/, 9];
                    case 7:
                        _c = (_b = JSON).stringify;
                        return [4 /*yield*/, this.getPairingResponseInfo(pairingRequest)];
                    case 8:
                        _a = _c.apply(_b, [_d.sent()]); // v2
                        _d.label = 9;
                    case 9:
                        message = _a;
                        logger.debug("sendPairingResponse", "Sending pairing response", message);
                        return [4 /*yield*/, this.encryptMessageAsymmetric(pairingRequest.publicKey, message)];
                    case 10:
                        encryptedMessage = _d.sent();
                        msg = ['@channel-open', recipient, encryptedMessage].join(':');
                        return [4 /*yield*/, this.client.promise];
                    case 11:
                        (_d.sent()).sendTextMessage(roomId, msg).catch(function (error) { return __awaiter(_this, void 0, void 0, function () {
                            var newRoomId_2;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(error.errcode === 'M_FORBIDDEN')) return [3 /*break*/, 4];
                                        // Room doesn't exist
                                        logger.log("sendPairingResponse", "M_FORBIDDEN", roomId, error);
                                        return [4 /*yield*/, this.deleteRoomIdFromRooms(roomId)];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, this.getRelevantRoom(recipient)];
                                    case 2:
                                        newRoomId_2 = _a.sent();
                                        logger.log("sendPairingResponse", "Old room deleted, new room created", newRoomId_2);
                                        return [4 /*yield*/, this.client.promise];
                                    case 3:
                                        (_a.sent()).sendTextMessage(newRoomId_2, msg).catch(function (error2) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                logger.log("sendPairingResponse", "inner error", newRoomId_2, error2);
                                                return [2 /*return*/];
                                            });
                                        }); });
                                        return [3 /*break*/, 5];
                                    case 4:
                                        logger.log("sendPairingResponse", "unexpected error", error);
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.isTextMessage = function (content) {
        return content.message.type === MatrixMessage_1.MatrixMessageType.TEXT;
    };
    P2PCommunicationClient.prototype.updateRelayServer = function (sender) {
        return __awaiter(this, void 0, void 0, function () {
            var split, senderHash, relayServer, manager, peers, promiseArray;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.log("updateRelayServer", sender);
                        split = sender.split(':');
                        if (split.length < 2 || !split[0].startsWith('@')) {
                            throw new Error('Invalid sender');
                        }
                        senderHash = split.shift();
                        relayServer = split.join(':');
                        manager = localStorage.getItem('beacon:communication-peers-dapp')
                            ? new beacon_core_1.PeerManager(this.storage, beacon_types_1.StorageKey.TRANSPORT_P2P_PEERS_DAPP)
                            : new beacon_core_1.PeerManager(this.storage, beacon_types_1.StorageKey.TRANSPORT_P2P_PEERS_WALLET);
                        return [4 /*yield*/, manager.getPeers()];
                    case 1:
                        peers = _a.sent();
                        promiseArray = peers.map(function (peer) { return __awaiter(_this, void 0, void 0, function () {
                            var hash, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = "@".concat;
                                        return [4 /*yield*/, (0, beacon_utils_1.getHexHash)(Buffer.from(peer.publicKey, 'hex'))];
                                    case 1:
                                        hash = _a.apply("@", [_b.sent()]);
                                        if (!(hash === senderHash)) return [3 /*break*/, 3];
                                        if (!(peer.relayServer !== relayServer)) return [3 /*break*/, 3];
                                        peer.relayServer = relayServer;
                                        return [4 /*yield*/, manager.addPeer(peer)];
                                    case 2:
                                        _b.sent();
                                        _b.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promiseArray)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.isChannelOpenMessage = function (content) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = content.message.content).startsWith;
                        _c = "@channel-open:@".concat;
                        _d = beacon_utils_1.getHexHash;
                        _f = (_e = Buffer).from;
                        return [4 /*yield*/, this.getPublicKey()];
                    case 1: return [4 /*yield*/, _d.apply(void 0, [_f.apply(_e, [_g.sent(), 'hex'])])];
                    case 2: return [2 /*return*/, _b.apply(_a, [_c.apply("@channel-open:@", [_g.sent()])])];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.isSender = function (event, senderPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = event.content.message.sender).startsWith;
                        _c = "@".concat;
                        return [4 /*yield*/, (0, beacon_utils_1.getHexHash)(Buffer.from(senderPublicKey, 'hex'))];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.apply("@", [_d.sent()])])];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getRelevantRoom = function (recipient) {
        return __awaiter(this, void 0, void 0, function () {
            var roomIds, roomId, room;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.get(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS)];
                    case 1:
                        roomIds = _a.sent();
                        roomId = roomIds[recipient];
                        if (!!roomId) return [3 /*break*/, 4];
                        logger.log("getRelevantRoom", "No room found for peer ".concat(recipient, ", checking joined ones."));
                        return [4 /*yield*/, this.getRelevantJoinedRoom(recipient)];
                    case 2:
                        room = _a.sent();
                        roomId = room.id;
                        roomIds[recipient] = room.id;
                        return [4 /*yield*/, this.storage.set(beacon_types_1.StorageKey.MATRIX_PEER_ROOM_IDS, roomIds)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        logger.log("getRelevantRoom", "Using room ".concat(roomId));
                        return [2 /*return*/, roomId];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getRelevantJoinedRoom = function (recipient) {
        return __awaiter(this, void 0, void 0, function () {
            var joinedRooms, relevantRooms, room, roomId;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.promise];
                    case 1: return [4 /*yield*/, (_a.sent()).joinedRooms];
                    case 2:
                        joinedRooms = _a.sent();
                        logger.log('checking joined rooms', joinedRooms, recipient);
                        relevantRooms = joinedRooms
                            .filter(function (roomElement) { return !_this.ignoredRooms.some(function (id) { return roomElement.id === id; }); })
                            .filter(function (roomElement) {
                            return roomElement.members.some(function (member) { return member === recipient; });
                        });
                        if (!(relevantRooms.length === 0 || this.ignoredRooms.length > 0)) return [3 /*break*/, 8];
                        logger.log("getRelevantJoinedRoom", "no relevant rooms found, creating new one");
                        return [4 /*yield*/, this.client.promise];
                    case 3: return [4 /*yield*/, (_a.sent()).createTrustedPrivateRoom(recipient)];
                    case 4:
                        roomId = _a.sent();
                        return [4 /*yield*/, this.client.promise];
                    case 5: return [4 /*yield*/, (_a.sent()).getRoomById(roomId)];
                    case 6:
                        room = _a.sent();
                        logger.log("getRelevantJoinedRoom", "waiting for other party to join room: ".concat(room.id));
                        return [4 /*yield*/, this.waitForJoin(roomId)];
                    case 7:
                        _a.sent();
                        logger.log("getRelevantJoinedRoom", "new room created and peer invited: ".concat(room.id));
                        return [3 /*break*/, 9];
                    case 8:
                        room = relevantRooms[0];
                        logger.log("getRelevantJoinedRoom", "channel already open, reusing room ".concat(room.id));
                        _a.label = 9;
                    case 9: return [2 /*return*/, room];
                }
            });
        });
    };
    return P2PCommunicationClient;
}(beacon_core_1.CommunicationClient));
exports.P2PCommunicationClient = P2PCommunicationClient;
//# sourceMappingURL=P2PCommunicationClient.js.map