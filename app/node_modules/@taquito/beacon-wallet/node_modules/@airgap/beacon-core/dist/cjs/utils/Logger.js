"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogger = exports.setLogger = exports.Logger = exports.InternalLogger = void 0;
var debug_1 = require("../debug");
/**
 * The logger that is used internally
 */
var InternalLogger = /** @class */ (function () {
    function InternalLogger() {
    }
    InternalLogger.prototype.debug = function (name, method) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this._log('debug', name, method, args);
    };
    InternalLogger.prototype.log = function (name, method) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this._log('log', name, method, args);
    };
    InternalLogger.prototype.warn = function (name, method) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this._log('warn', name, method, args);
    };
    InternalLogger.prototype.error = function (name, method) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this._log('error', name, method, args);
    };
    InternalLogger.prototype._log = function (type, name, method, args) {
        if (args === void 0) { args = []; }
        if (!(0, debug_1.getDebugEnabled)()) {
            return;
        }
        var groupText = "[BEACON] ".concat(new Date().toISOString(), " [").concat(name, "](").concat(method, ")");
        var data = args;
        if (args[0] && typeof args[0] === 'string') {
            groupText += " ".concat(args[0]);
            data = args.slice(1);
        }
        switch (type) {
            case 'error':
                console.group(groupText);
                console.error.apply(console, data);
                break;
            case 'warn':
                console.group(groupText);
                console.warn.apply(console, data);
                break;
            case 'debug':
                console.groupCollapsed(groupText);
                console.debug.apply(console, data);
                break;
            default:
                console.group(groupText);
                console.log.apply(console, data);
        }
        console.groupEnd();
        // echo.group(echo.asWarning(`[BEACON] ${message}`))
        // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)
        // echo.groupEnd()
    };
    return InternalLogger;
}());
exports.InternalLogger = InternalLogger;
var Logger = /** @class */ (function () {
    function Logger(service) {
        this.name = service;
    }
    Logger.prototype.debug = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        logger.debug(this.name, method, args);
    };
    Logger.prototype.log = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        logger.log(this.name, method, args);
    };
    Logger.prototype.warn = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        logger.warn(this.name, method, args);
    };
    Logger.prototype.error = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        logger.error(this.name, method, args);
    };
    return Logger;
}());
exports.Logger = Logger;
var loggerWrapper = new Logger('');
var logger = new InternalLogger();
var setLogger = function (newLogger) {
    logger = newLogger;
};
exports.setLogger = setLogger;
var getLogger = function () { return loggerWrapper; };
exports.getLogger = getLogger;
//# sourceMappingURL=Logger.js.map