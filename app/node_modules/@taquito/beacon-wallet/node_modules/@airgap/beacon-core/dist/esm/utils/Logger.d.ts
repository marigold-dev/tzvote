export interface LoggerInterface {
    debug(method: string, ...args: any[]): void;
    log(method: string, ...args: any[]): void;
    warn(method: string, ...args: any[]): void;
    error(method: string, ...args: any[]): void;
}
/**
 * The logger that is used internally
 */
export declare class InternalLogger {
    constructor();
    debug(name: string, method: string, ...args: any[]): void;
    log(name: string, method: string, ...args: any[]): void;
    warn(name: string, method: string, ...args: any[]): void;
    error(name: string, method: string, ...args: any[]): void;
    private _log;
}
export declare class Logger implements LoggerInterface {
    private readonly name;
    constructor(service: string);
    debug(method: string, ...args: any[]): void;
    log(method: string, ...args: any[]): void;
    warn(method: string, ...args: any[]): void;
    error(method: string, ...args: any[]): void;
}
export declare const setLogger: (newLogger: LoggerInterface) => void;
export declare const getLogger: () => LoggerInterface;
