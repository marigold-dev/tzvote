import { P2PPairingRequest, ExtendedP2PPairingResponse, PostMessagePairingRequest, ExtendedPostMessagePairingResponse, WalletConnectPairingRequest, ExtendedWalletConnectPairingResponse } from '@airgap/beacon-types';
import { KeyPair } from '@stablelib/ed25519';
import { SessionKeys } from '@stablelib/x25519-session';
/**
 * @internalapi
 *
 *
 */
export declare abstract class CommunicationClient {
    protected readonly keyPair?: KeyPair | undefined;
    constructor(keyPair?: KeyPair | undefined);
    /**
     * Get the public key
     */
    getPublicKey(): Promise<string>;
    /**
     * get the public key hash
     */
    getPublicKeyHash(): Promise<string>;
    /**
     * Create a cryptobox server
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    protected createCryptoBoxServer(otherPublicKey: string, selfKeypair: KeyPair): Promise<SessionKeys>;
    /**
     * Create a cryptobox client
     *
     * @param otherPublicKey
     * @param selfKeypair
     */
    protected createCryptoBoxClient(otherPublicKey: string, selfKeypair: KeyPair): Promise<SessionKeys>;
    /**
     * Encrypt a message for a specific publicKey (receiver, asymmetric)
     *
     * @param recipientPublicKey
     * @param message
     */
    protected encryptMessageAsymmetric(recipientPublicKey: string, message: string): Promise<string>;
    abstract unsubscribeFromEncryptedMessages(): Promise<void>;
    abstract unsubscribeFromEncryptedMessage(senderPublicKey: string): Promise<void>;
    abstract sendMessage(message: string, peer?: P2PPairingRequest | ExtendedP2PPairingResponse | PostMessagePairingRequest | ExtendedPostMessagePairingResponse | WalletConnectPairingRequest | ExtendedWalletConnectPairingResponse): Promise<void>;
}
