/**
 * @packageDocumentation
 * @module @taquito/beacon-wallet
 */
import { DAppClient, DAppClientOptions, RequestPermissionInput } from '@airgap/beacon-dapp';
import { WalletDelegateParams, WalletIncreasePaidStorageParams, WalletOriginateParams, WalletProvider, WalletTransferParams } from '@taquito/taquito';
export { VERSION } from './version';
export { BeaconWalletNotInitialized, MissingRequiredScopes } from './errors';
export declare class BeaconWallet implements WalletProvider {
    client: DAppClient;
    constructor(options: DAppClientOptions);
    private validateRequiredScopesOrFail;
    requestPermissions(request?: RequestPermissionInput): Promise<void>;
    getPKH(): Promise<string>;
    mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>): Promise<any>;
    mapIncreasePaidStorageWalletParams(params: () => Promise<WalletIncreasePaidStorageParams>): Promise<any>;
    mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>): Promise<any>;
    mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>): Promise<any>;
    formatParameters(params: any): any;
    removeDefaultParams(params: WalletTransferParams | WalletOriginateParams | WalletDelegateParams, operatedParams: any): any;
    sendOperations(params: any[]): Promise<string>;
    /**
     *
     * @description Removes all beacon values from the storage. After using this method, this instance is no longer usable.
     * You will have to instantiate a new BeaconWallet.
     */
    disconnect(): Promise<void>;
    /**
     *
     * @description This method removes the active account from local storage by setting it to undefined.
     */
    clearActiveAccount(): Promise<void>;
    sign(bytes: string, watermark?: Uint8Array): Promise<string>;
    private getSigningType;
    getPK(): Promise<string>;
}
