import { getDAppClientInstance, SigningType, PermissionScope } from '@airgap/beacon-dapp';
import { PermissionDeniedError, UnsupportedActionError } from '@taquito/core';
import toBuffer from 'typedarray-to-buffer';
import { createTransferOperation, createIncreasePaidStorageOperation, createOriginationOperation, createSetDelegateOperation } from '@taquito/taquito';
import { hex2buf, mergebuf, buf2hex } from '@taquito/utils';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 *  @category Error
 *  @description Error that indicates the Beacon wallet not being initialized
 */
class BeaconWalletNotInitialized extends PermissionDeniedError {
    constructor() {
        super();
        this.name = 'BeaconWalletNotInitialized';
        this.message =
            'BeaconWallet needs to be initialized by calling `await BeaconWallet.requestPermissions({network: {type: "chosen_network"}})` first.';
    }
}
/**
 *  @category Error
 *  @description Error that indicates missing required persmission scopes
 */
class MissingRequiredScopes extends PermissionDeniedError {
    constructor(requiredScopes) {
        super();
        this.requiredScopes = requiredScopes;
        this.name = 'MissingRequiredScopes';
        this.message = `Required permissions scopes: ${requiredScopes.join(',')} were not granted.`;
    }
}

// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
const VERSION = {
    "commitHash": "b85fc404e34545a518215e449b3f1253f4520eec",
    "version": "17.2.0"
};

/**
 * @packageDocumentation
 * @module @taquito/beacon-wallet
 */
class BeaconWallet {
    constructor(options) {
        this.client = getDAppClientInstance(options);
    }
    validateRequiredScopesOrFail(permissionScopes, requiredScopes) {
        const mandatoryScope = new Set(requiredScopes);
        for (const scope of permissionScopes) {
            if (mandatoryScope.has(scope)) {
                mandatoryScope.delete(scope);
            }
        }
        if (mandatoryScope.size > 0) {
            throw new MissingRequiredScopes(Array.from(mandatoryScope));
        }
    }
    requestPermissions(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.requestPermissions(request);
        });
    }
    getPKH() {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.client.getActiveAccount();
            if (!account) {
                throw new BeaconWalletNotInitialized();
            }
            return account.address;
        });
    }
    mapTransferParamsToWalletParams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let walletParams;
            yield this.client.showPrepare();
            try {
                walletParams = yield params();
            }
            catch (err) {
                yield this.client.hideUI();
                throw err;
            }
            return this.removeDefaultParams(walletParams, yield createTransferOperation(this.formatParameters(walletParams)));
        });
    }
    mapIncreasePaidStorageWalletParams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let walletParams;
            yield this.client.showPrepare();
            try {
                walletParams = yield params();
            }
            catch (err) {
                yield this.client.hideUI();
                throw err;
            }
            return this.removeDefaultParams(walletParams, yield createIncreasePaidStorageOperation(this.formatParameters(walletParams)));
        });
    }
    mapOriginateParamsToWalletParams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let walletParams;
            yield this.client.showPrepare();
            try {
                walletParams = yield params();
            }
            catch (err) {
                yield this.client.hideUI();
                throw err;
            }
            return this.removeDefaultParams(walletParams, yield createOriginationOperation(this.formatParameters(walletParams)));
        });
    }
    mapDelegateParamsToWalletParams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let walletParams;
            yield this.client.showPrepare();
            try {
                walletParams = yield params();
            }
            catch (err) {
                yield this.client.hideUI();
                throw err;
            }
            return this.removeDefaultParams(walletParams, yield createSetDelegateOperation(this.formatParameters(walletParams)));
        });
    }
    formatParameters(params) {
        if (params.fee) {
            params.fee = params.fee.toString();
        }
        if (params.storageLimit) {
            params.storageLimit = params.storageLimit.toString();
        }
        if (params.gasLimit) {
            params.gasLimit = params.gasLimit.toString();
        }
        return params;
    }
    removeDefaultParams(params, operatedParams) {
        // If fee, storageLimit or gasLimit is undefined by user
        // in case of beacon wallet, dont override it by
        // defaults.
        if (!params.fee) {
            delete operatedParams.fee;
        }
        if (!params.storageLimit) {
            delete operatedParams.storage_limit;
        }
        if (!params.gasLimit) {
            delete operatedParams.gas_limit;
        }
        return operatedParams;
    }
    sendOperations(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.client.getActiveAccount();
            if (!account) {
                throw new BeaconWalletNotInitialized();
            }
            const permissions = account.scopes;
            this.validateRequiredScopesOrFail(permissions, [PermissionScope.OPERATION_REQUEST]);
            const { transactionHash } = yield this.client.requestOperation({ operationDetails: params });
            return transactionHash;
        });
    }
    /**
     *
     * @description Removes all beacon values from the storage. After using this method, this instance is no longer usable.
     * You will have to instantiate a new BeaconWallet.
     */
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.destroy();
        });
    }
    /**
     *
     * @description This method removes the active account from local storage by setting it to undefined.
     */
    clearActiveAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.setActiveAccount();
        });
    }
    sign(bytes, watermark) {
        return __awaiter(this, void 0, void 0, function* () {
            let bb = hex2buf(bytes);
            if (typeof watermark !== 'undefined') {
                bb = mergebuf(watermark, bb);
            }
            const watermarkedBytes = buf2hex(toBuffer(bb));
            const signingType = this.getSigningType(watermark);
            if (signingType !== SigningType.OPERATION) {
                throw new UnsupportedActionError(`Taquito Beacon Wallet currently only supports signing operations, not ${signingType}`);
            }
            const { signature } = yield this.client.requestSignPayload({
                payload: watermarkedBytes,
                signingType,
            });
            return signature;
        });
    }
    getSigningType(watermark) {
        if (!watermark || watermark.length === 0) {
            return SigningType.RAW;
        }
        if (watermark.length === 1) {
            if (watermark[0] === 5) {
                return SigningType.MICHELINE;
            }
            if (watermark[0] === 3) {
                return SigningType.OPERATION;
            }
        }
        throw new Error(`Invalid watermark ${JSON.stringify(watermark)}`);
    }
    getPK() {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.client.getActiveAccount();
            if (!account) {
                throw new BeaconWalletNotInitialized();
            }
            return account === null || account === void 0 ? void 0 : account.publicKey;
        });
    }
}

export { BeaconWallet, BeaconWalletNotInitialized, MissingRequiredScopes, VERSION };
//# sourceMappingURL=taquito-beacon-wallet.es6.js.map
