import { InvalidViewParameterError, TaquitoError } from '@taquito/core';
/**
 *  @category Error
 *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson) the parameter of the view
 */
export declare class ParameterEncodingError extends InvalidViewParameterError {
    readonly viewName: string;
    readonly sigs: any;
    readonly args: any;
    readonly cause?: any;
    constructor(viewName: string, sigs: any, args: any, cause?: any);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid on-chain view found on the script
 */
export declare class InvalidScriptError extends TaquitoError {
    readonly script: any;
    readonly reason?: string | undefined;
    name: string;
    constructor(script: any, reason?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid RPC response being passed or used
 */
export declare class InvalidRpcResponseError extends TaquitoError {
    readonly script: any;
    readonly reason?: string | undefined;
    name: string;
    constructor(script: any, reason?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid big map schema being passed or used
 */
export declare class InvalidBigMapSchemaError extends TaquitoError {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid big map diff being passed or used
 */
export declare class InvalidBigMapDiffError extends TaquitoError {
    message: string;
    readonly value: any;
    name: string;
    constructor(message: string, value: any);
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode big maps
 */
export declare class BigMapEncodingError extends TaquitoError {
    readonly details: any;
    readonly schema: any;
    readonly value: any;
    name: string;
    constructor(obj: 'key' | 'value', details: any, schema: any, value: any);
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode storage
 */
export declare class StorageEncodingError extends TaquitoError {
    details: any;
    readonly schema: any;
    readonly value: any;
    readonly semantics?: any;
    name: string;
    constructor(obj: string, details: any, schema: any, value: any, semantics?: any);
}
/**
 *  @category Error
 *  @description General error that indicates a function not being passed a necessary argument
 */
export declare class MissingArgumentError extends TaquitoError {
    message: string;
    name: string;
    constructor(message: string);
}
