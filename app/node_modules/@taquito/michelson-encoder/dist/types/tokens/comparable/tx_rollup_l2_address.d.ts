import { BaseTokenSchema } from '../../schema/types';
import { ComparableToken, SemanticEncoding, Token, TokenFactory, TokenValidationError } from '../token';
/**
 *  @category Error
 *  @description Error that indicates a failure happening when parsing encoding/executing a Tx Rollup L2 Address
 */
export declare class TxRollupL2AddressValidationError extends TokenValidationError {
    value: unknown;
    token: TxRollupL2AddressToken;
    name: string;
    constructor(value: unknown, token: TxRollupL2AddressToken, message: string);
}
export declare class TxRollupL2AddressToken extends ComparableToken {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'tx_rollup_l2_address';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    ToBigMapKey(val: any): {
        key: {
            bytes: string;
        };
        type: {
            prim: string;
        };
    };
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    private validate;
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    Encode(args: string[]): any;
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    EncodeObject(val: any, semantic?: SemanticEncoding): any;
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    Execute(val: {
        bytes?: string;
        string?: string;
    }): string;
    ExtractSchema(): "tx_rollup_l2_address";
    generateSchema(): BaseTokenSchema;
    /**
     * @throws {@link TxRollupL2AddressValidationError}
     */
    ToKey({ bytes, string }: {
        bytes?: string;
        string?: string;
    }): string;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
