{"version":3,"file":"taquito-tzip16.es6.js","sources":["../src/handlers/http-handler.ts","../src/errors.ts","../src/handlers/tezos-storage-handler.ts","../src/handlers/ipfs-handler.ts","../src/metadata-interface.ts","../src/viewKind/michelson-storage-view.ts","../src/viewKind/viewFactory.ts","../src/tzip16-contract-abstraction.ts","../src/composer.ts","../src/tzip16-utils.ts","../src/metadata-provider.ts","../src/tzip16-extension.ts","../src/version.ts"],"sourcesContent":["import { HttpBackend } from \"@taquito/http-utils\";\nimport { ContractAbstraction, ContractProvider, Wallet, Context } from \"@taquito/taquito\";\nimport { Handler, Tzip16Uri } from \"../metadata-provider\";\n\nexport class HttpHandler implements Handler {\n    httpBackend: HttpBackend;\n    constructor() {\n        this.httpBackend = new HttpBackend();\n    }\n    async getMetadata(_contractAbstraction: ContractAbstraction<ContractProvider | Wallet>, { protocol, location }: Tzip16Uri, _context: Context) {\n        return this.httpBackend.createRequest<string>({\n            url: `${protocol}:${decodeURIComponent(location)}`,\n            method: 'GET',\n            headers: {\n              'Content-Type': 'text/plain; charset=utf-8'\n            },\n            json: false\n        })\n    }\n}","import { ParameterValidationError, TaquitoError, TezosToolkitConfigError } from '@taquito/core';\n\nexport { InvalidViewParameterError } from '@taquito/core';\n\n/**\n *  @category Error\n *  @description Error that indicates missing big map metadata (non compliance to the TZIP-16 standard)\n */\nexport class BigMapContractMetadataNotFoundError extends TaquitoError {\n  constructor(public readonly invalidBigMapId: any) {\n    super();\n    this.name = 'BigMapContractMetadataNotFoundError';\n    this.message =\n      'Non-compliance with the TZIP-016 standard. No big map named metadata was found in the contract storage.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates missing metadata in storage\n */\nexport class ContractMetadataNotFoundError extends TaquitoError {\n  constructor(public readonly info: string) {\n    super();\n    this.name = 'ContractMetadataNotFoundError';\n    this.message = `No metadata was found in the contract storage. ${info}`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates missing URI (non compliance to the TZIP-16 standard)\n */\nexport class UriNotFoundError extends TaquitoError {\n  constructor() {\n    super();\n    this.name = 'UriNotFoundError';\n    this.message =\n      'Non-compliance with the TZIP-016 standard. No URI found in the contract storage.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid URI (non compliance to the TZIP-16 standard)\n */\nexport class InvalidUriError extends TaquitoError {\n  constructor(public readonly uri: string) {\n    super();\n    this.name = 'InvalidUriError';\n    this.message = `Non-compliance with the TZIP-016 standard. The URI is invalid: ${uri}.`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid metadata (non compliance to the TZIP-16 standard)\n */\nexport class InvalidContractMetadataError extends TaquitoError {\n  constructor(public readonly invalidMetadata: string) {\n    super();\n    this.name = 'InvalidContractMetadataError';\n    this.message = `The metadata found at the pointed ressource are not compliant with tzip16 standard: ${invalidMetadata}.`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates the uri protocol being passed or used is not supported\n */\nexport class ProtocolNotSupportedError extends ParameterValidationError {\n  constructor(public readonly protocol: string) {\n    super();\n    this.name = 'ProtocolNotSupportedError';\n    this.message = `The protocol found in the URI is not supported: ${protocol}.`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates the metadata type is invalid (non compliance to the TZIP-16 standard)\n */\nexport class InvalidContractMetadataTypeError extends TaquitoError {\n  constructor() {\n    super();\n    this.name = 'InvalidContractMetadataTypeError';\n    this.message =\n      'Non-compliance with the TZIP-016 standard. The type of metadata should be bytes.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates metadata provider being unconfigured in the TezosToolkit instance\n */\nexport class UnconfiguredContractMetadataProviderError extends TezosToolkitConfigError {\n  constructor() {\n    super();\n    this.name = 'UnconfiguredContractMetadataProviderError';\n    this.message =\n      'No metadata provider has been configured. The default one can be configured by calling addExtension(new Tzip16Module()) on your TezosToolkit instance.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a forbidden instruction being found inside the View code\n */\nexport class ForbiddenInstructionInViewCodeError extends TaquitoError {\n  constructor(public readonly instruction: string) {\n    super();\n    this.name = 'ForbiddenInstructionInViewCodeError';\n    this.message = `Error found in the code of the view. It contains a forbidden instruction: ${instruction}.`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates parameters are being passed when it is not required\n */\nexport class NoParameterExpectedError extends ParameterValidationError {\n  constructor(public readonly viewName: string, public readonly args: any[]) {\n    super();\n    this.name = 'NoParameterExpectedError';\n    this.message = `${viewName} Received ${args.length} arguments while expecting no parameter or 'Unit'`;\n  }\n}\n","import { Schema } from '@taquito/michelson-encoder';\nimport { Context, ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { Handler, Tzip16Uri } from '../metadata-provider';\nimport { bytes2Char } from '@taquito/utils';\nimport {\n  InvalidContractMetadataTypeError,\n  BigMapContractMetadataNotFoundError,\n  InvalidUriError,\n  ContractMetadataNotFoundError,\n} from '../errors';\n\nconst typeOfValueToFind = {\n  prim: 'big_map',\n  args: [{ prim: 'string' }, { prim: 'bytes' }],\n  annots: ['%metadata'],\n};\n\nexport type BigMapId = { int: string };\n\nexport class TezosStorageHandler implements Handler {\n  private readonly TEZOS_STORAGE_REGEX = /^(?:\\/\\/(KT1\\w{33})(?:\\.(.+))?\\/)?([\\w|%]+)$/;\n\n  async getMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    { location }: Tzip16Uri,\n    context: Context\n  ) {\n    const parsedTezosStorageUri = this.parseTezosStorageUri(location);\n    if (!parsedTezosStorageUri) {\n      throw new InvalidUriError(`tezos-storage:${location}`);\n    }\n    const script = await context.readProvider.getScript(\n      parsedTezosStorageUri.contractAddress || contractAbstraction.address,\n      'head'\n    );\n    const bigMapId = Schema.fromRPCResponse({ script }).FindFirstInTopLevelPair<BigMapId>(\n      script.storage,\n      typeOfValueToFind\n    );\n\n    if (!bigMapId || !bigMapId.int) {\n      throw new BigMapContractMetadataNotFoundError(bigMapId);\n    }\n    const bytes = await context.contract.getBigMapKeyByID<string>(\n      bigMapId.int.toString(),\n      parsedTezosStorageUri.path,\n      new Schema(typeOfValueToFind)\n    );\n\n    if (!bytes) {\n      throw new ContractMetadataNotFoundError(\n        `No '${parsedTezosStorageUri.path}' key found in the big map %metadata of the contract ${\n          parsedTezosStorageUri.contractAddress || contractAbstraction.address\n        }`\n      );\n    }\n\n    if (!/^[0-9a-fA-F]*$/.test(bytes)) {\n      throw new InvalidContractMetadataTypeError();\n    }\n    return bytes2Char(bytes);\n  }\n\n  /**\n   * @description Extract the smart contract address, the network and the path pointing to the metadata from the uri\n   * @returns an object which contains the properties allowing to find where the metadata are located or it returns undefined if the uri is not valid\n   * @param tezosStorageURI URI (without the tezos-storage prefix)\n   */\n  private parseTezosStorageUri(tezosStorageURI: string) {\n    const extractor = this.TEZOS_STORAGE_REGEX.exec(tezosStorageURI);\n    if (!extractor) return;\n    return {\n      contractAddress: extractor[1],\n      network: extractor[2],\n      path: decodeURIComponent(extractor[3]),\n    };\n  }\n}\n","import { HttpBackend } from \"@taquito/http-utils\";\nimport { ContractAbstraction, ContractProvider, Wallet, Context } from \"@taquito/taquito\";\nimport { Handler, Tzip16Uri } from \"../metadata-provider\";\n\nexport class IpfsHttpHandler implements Handler {\n    private _ipfsGateway: string;\n    public httpBackend = new HttpBackend();\n\n    constructor(ipfsGatheway?:string){\n        this._ipfsGateway = ipfsGatheway? ipfsGatheway: 'ipfs.io';\n    }\n\n    async getMetadata(_contractAbstraction: ContractAbstraction<ContractProvider | Wallet>, { location }: Tzip16Uri, _context: Context): Promise<string> {\n        return this.httpBackend.createRequest<string>({\n            url: `https://${this._ipfsGateway}/ipfs/${location.substring(2)}/`,\n            method: 'GET',\n            headers: {\n              'Content-Type': 'text/plain; charset=utf-8'\n            },\n            json: false\n        })\n    }\n}\n","import { MichelsonV1Expression } from '@taquito/rpc';\nexport interface MetadataInterface {\n\tname?: string;\n\tdescription?: string;\n\tversion?: string;\n\tlicense?: { name: string; details?: string };\n\tauthors?: string[];\n\thomepage?: string;\n\tsource?: { tools?: string[]; location?: string };\n\tinterfaces?: string[];\n\terrors?: ErrorsTzip16;\n\tviews?: Views;\n}\n\nexport type ErrorsTzip16 = Array<\n\t| { error: MichelineTzip16Expression; expansion: MichelineTzip16Expression; languages?: string[] }\n\t| { view: string; languages?: string[] }\n>;\n\nexport enum ViewImplementationType {\n\tMICHELSON_STORAGE = 'michelsonStorageView',\n\tREST_API_QUERY = 'restApiQuery'\n}\n\nexport type ViewImplementation =\n\t| { [ViewImplementationType.MICHELSON_STORAGE]: MichelsonStorageViewType }\n\t| { [ViewImplementationType.REST_API_QUERY]: RestApiQueryType };\n\nexport interface ViewDefinition {\n\tname?: string;\n\tdescription?: string;\n\timplementations?: ViewImplementation[];\n\tpure?: boolean;\n}\n\nexport type Views = ViewDefinition[];\n\nexport type MichelsonStorageViewType = {\n\tparameter?: MichelineTzip16Expression;\n\treturnType: MichelineTzip16Expression;\n\tcode: MichelineTzip16Expression;\n\tannotations?: Array<{ name: string; description: string }>;\n\tversion?: string;\n};\n\nexport type RestApiQueryType = {\n\tspecificationUri: string;\n\tbaseUri?: string;\n\tpath: string;\n\tmethod?: 'GET' | 'POST' | 'PUT';\n};\n\nexport type MichelineTzip16Expression =\n\t| MichelsonV1Expression\n\t| MichelineTzip16Expression[]\n\t| { prim: Unistring; args?: MichelineTzip16Expression[]; annots?: string[] };\n\ntype Unistring = string | { invalid_utf8_string: number[] };\n","import { ParameterSchema } from '@taquito/michelson-encoder';\nimport {\n  RpcClientInterface,\n  MichelsonV1Expression,\n  MichelsonV1ExpressionExtended,\n} from '@taquito/rpc';\nimport {\n  ContractAbstraction,\n  ContractProvider,\n  Wallet,\n  ViewSimulationError,\n} from '@taquito/taquito';\nimport { ForbiddenInstructionInViewCodeError, NoParameterExpectedError } from '../errors';\nimport { validateAndExtractFailwith, TzReadProvider } from '@taquito/taquito';\nimport { View } from './interface';\nimport { InvalidViewParameterError } from '@taquito/core';\n\nexport class MichelsonStorageView implements View {\n  constructor(\n    private viewName: string,\n    private contract: ContractAbstraction<ContractProvider | Wallet>,\n    private rpc: RpcClientInterface,\n    private readProvider: TzReadProvider,\n    private returnType: MichelsonV1Expression,\n    private code: MichelsonV1ExpressionExtended[],\n    private viewParameterType?: MichelsonV1ExpressionExtended\n  ) {}\n\n  /**\n   * @description According to the tzip-16 standard, the following instructions must not be used in the code of the view:\n   * 'AMOUNT', 'CREATE_CONTRACT', 'SENDER', 'SET_DELEGATE', 'SOURCE', and 'TRANSFER_TOKENS'\n   * The method throw an error if an illegal instruction is found\n   */\n  private findForbiddenInstructionInViewCodeError(code: MichelsonV1ExpressionExtended[]) {\n    const illegalInstructions = [\n      'AMOUNT',\n      'CREATE_CONTRACT',\n      'SENDER',\n      'SET_DELEGATE',\n      'SOURCE',\n      'TRANSFER_TOKENS',\n    ];\n\n    for (const forbiddenInstruction of illegalInstructions) {\n      for (const instruction of code) {\n        if (instruction.prim === forbiddenInstruction) {\n          throw new ForbiddenInstructionInViewCodeError(forbiddenInstruction);\n        }\n        if (instruction.args && instruction.args.length !== 0) {\n          this.findForbiddenInstructionInViewCodeError(instruction.args as any);\n        }\n      }\n    }\n  }\n\n  /**\n   * @description According to the tzip-16 standard, in the first version of the specification, the instruction SELF should only be used before ADDRESS\n   * The method throws an error is the instruction SELF is present, but not followed by ADDRESS\n   */\n  private illegalUseOfSelfInstruction(code: MichelsonV1ExpressionExtended[]) {\n    for (const instruction of code) {\n      if (instruction.prim === 'SELF') {\n        const index = code.indexOf(instruction);\n        const nextInstruction = code[index + 1] ? code[index + 1].prim : undefined;\n        if (nextInstruction !== 'ADDRESS') {\n          throw new ForbiddenInstructionInViewCodeError(\n            'the instruction SELF should only be used before ADDRESS'\n          );\n        }\n      }\n      if (instruction.args && instruction.args.length !== 0) {\n        this.illegalUseOfSelfInstruction(instruction.args as any);\n      }\n    }\n  }\n\n  /**\n   * @description Loops through the view's code and replace SELF, BALANCE, NOW, and CHAIN_ID with Michelson expressions that match the current context, if applicable.\n   */\n  private adaptViewCodeToContext(\n    code: MichelsonV1ExpressionExtended[],\n    contractBalance: string,\n    blockTimeStamp: string,\n    chainId: string\n  ) {\n    const instructionsToReplace = {\n      SELF: [\n        { prim: 'PUSH', args: [{ prim: 'address' }, { string: this.contract.address }] },\n        { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n        { prim: 'IF_NONE', args: [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }], []] },\n      ],\n      BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],\n      NOW: [{ prim: 'PUSH', args: [{ prim: 'timestamp' }, { string: blockTimeStamp }] }],\n      CHAIN_ID: [{ prim: 'PUSH', args: [{ prim: 'string' }, { string: chainId }] }],\n    };\n\n    code.forEach((x: any, i: any) => {\n      for (const instruction in instructionsToReplace) {\n        if (x.prim === instruction) {\n          code[i] = Object(instructionsToReplace)[instruction];\n        }\n        if (x.args && x.args.length !== 0) {\n          this.adaptViewCodeToContext(x.args, contractBalance, blockTimeStamp, chainId);\n        }\n      }\n    });\n    return code;\n  }\n\n  private validateArgs = (args: any[], schema: ParameterSchema, viewName: string) => {\n    const sigs = schema.ExtractSignatures();\n\n    if (!sigs.find((x: any[]) => x.length === args.length)) {\n      throw new InvalidViewParameterError(viewName, sigs, args);\n    }\n  };\n\n  private formatArgsAndParameter(argView: any[]) {\n    let args = argView;\n    let viewParameterType = this.viewParameterType;\n    if (!viewParameterType) {\n      viewParameterType = { args: [], prim: 'unit', annots: [] };\n    }\n\n    if (viewParameterType.prim === 'unit') {\n      if (args.length === 0) {\n        args = ['Unit'];\n      }\n      if (args.length !== 0 && args[0] !== 'Unit') {\n        throw new NoParameterExpectedError(this.viewName, argView);\n      }\n    }\n    const parameterViewSchema = new ParameterSchema(viewParameterType);\n    this.validateArgs(args, parameterViewSchema, this.viewName);\n    const arg = parameterViewSchema.Encode(...args);\n    return { arg, viewParameterType };\n  }\n\n  async executeView(...args: any[]) {\n    // validate view code against tzip-16 specifications\n    this.findForbiddenInstructionInViewCodeError(this.code);\n    this.illegalUseOfSelfInstruction(this.code);\n\n    const { arg, viewParameterType } = this.formatArgsAndParameter(args);\n\n    const storageType: any = this.contract.script.code.find((x: any) => x.prim === 'storage');\n    const storageArgs = storageType.args[0];\n\n    // currentContext\n    const storageValue: any = await this.readProvider.getStorage(this.contract.address, 'head');\n    const chainId = await this.readProvider.getChainId();\n    const contractBalance = (\n      await this.readProvider.getBalance(this.contract.address, 'head')\n    ).toString();\n    const blockTimestamp = await this.readProvider.getBlockTimestamp('head');\n\n    const code = this.adaptViewCodeToContext(this.code, contractBalance, blockTimestamp, chainId);\n\n    if (!this.viewParameterType) {\n      code.unshift({ prim: 'CDR' });\n    }\n\n    const viewScript = {\n      script: [\n        { prim: 'parameter', args: [{ prim: 'pair', args: [viewParameterType, storageArgs] }] },\n        { prim: 'storage', args: [{ prim: 'option', args: [this.returnType] }] },\n        {\n          prim: 'code',\n          args: [\n            [\n              { prim: 'CAR' },\n              code,\n              { prim: 'SOME' },\n              { prim: 'NIL', args: [{ prim: 'operation' }] },\n              { prim: 'PAIR' },\n            ],\n          ],\n        },\n      ],\n      storage: { prim: 'None' },\n      input: { prim: 'Pair', args: [arg, storageValue] },\n      amount: '0',\n      chain_id: chainId,\n      balance: '0',\n    };\n\n    let result: any;\n    try {\n      result = await this.rpc.runCode(viewScript as any);\n    } catch (error: any) {\n      const failWith = validateAndExtractFailwith(error);\n      throw failWith\n        ? new ViewSimulationError(\n            `The simulation of the Michelson view failed with: ${JSON.stringify(failWith)}`,\n            this.viewName,\n            failWith,\n            error\n          )\n        : error;\n    }\n\n    const viewResultSchema = new ParameterSchema(this.returnType);\n    return viewResultSchema.Execute(result.storage.args[0]);\n  }\n}\n","import { RpcClientInterface } from '@taquito/rpc';\nimport { ContractAbstraction, ContractProvider, Wallet, TzReadProvider } from '@taquito/taquito';\nimport { ViewImplementation, ViewImplementationType } from '../metadata-interface';\nimport { MichelsonStorageView } from './michelson-storage-view';\n\nexport class ViewFactory {\n  getView(\n    viewName: string,\n    rpc: RpcClientInterface,\n    readProvider: TzReadProvider,\n    contract: ContractAbstraction<ContractProvider | Wallet>,\n    viewImplementation: ViewImplementation\n  ) {\n    if (this.isMichelsonStorageView(viewImplementation)) {\n      const viewValues = viewImplementation[ViewImplementationType.MICHELSON_STORAGE];\n      if (!viewValues.returnType || !viewValues.code) {\n        console.warn(\n          `${viewName} is missing mandatory code or returnType property therefore it will be skipped.`\n        );\n        return;\n      }\n      return () => {\n        const view = new MichelsonStorageView(\n          viewName,\n          contract,\n          rpc,\n          readProvider,\n          viewValues.returnType as any,\n          viewValues.code as any,\n          viewValues.parameter as any\n        );\n        return view;\n      };\n    }\n  }\n\n  getImplementationType(viewImplementation: ViewImplementation) {\n    return Object.keys(viewImplementation)[0];\n  }\n\n  private isMichelsonStorageView(\n    viewImplementation: ViewImplementation\n  ): viewImplementation is { [ViewImplementationType.MICHELSON_STORAGE]: any } {\n    return (\n      this.getImplementationType(viewImplementation) === ViewImplementationType.MICHELSON_STORAGE\n    );\n  }\n}\n","import { BigMapId } from './handlers/tezos-storage-handler';\nimport {\n  BigMapAbstraction,\n  Context,\n  ContractAbstraction,\n  ContractProvider,\n  Wallet,\n} from '@taquito/taquito';\nimport { bytes2Char } from '@taquito/utils';\nimport { MetadataEnvelope, MetadataProviderInterface } from './metadata-provider';\nimport {\n  BigMapContractMetadataNotFoundError,\n  UnconfiguredContractMetadataProviderError,\n  UriNotFoundError,\n} from './errors';\nimport BigNumber from 'bignumber.js';\nimport { Schema } from '@taquito/michelson-encoder';\nimport { ViewFactory } from './viewKind/viewFactory';\nimport { View } from './viewKind/interface';\nimport { ViewDefinition } from './metadata-interface';\n\nexport type MetadataContext = Context & {\n  metadataProvider: MetadataProviderInterface;\n};\n\nconst metadataBigMapType = {\n  prim: 'big_map',\n  args: [{ prim: 'string' }, { prim: 'bytes' }],\n  annots: ['%metadata'],\n};\nexport class Tzip16ContractAbstraction {\n  private _metadataProvider: MetadataProviderInterface;\n  private _metadataEnvelope?: MetadataEnvelope;\n  private _viewFactory = new ViewFactory();\n  private _metadataViewsObject: { [key: string]: () => View } = {};\n\n  constructor(\n    private constractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    private context: MetadataContext\n  ) {\n    this._metadataProvider = context.metadataProvider;\n  }\n\n  private async findMetadataBigMap(): Promise<BigMapAbstraction> {\n    const metadataBigMapId = this.constractAbstraction.schema.FindFirstInTopLevelPair<BigMapId>(\n      await this.context.readProvider.getStorage(this.constractAbstraction.address, 'head'),\n      metadataBigMapType\n    );\n\n    if (!metadataBigMapId || !metadataBigMapId.int) {\n      throw new BigMapContractMetadataNotFoundError(metadataBigMapId);\n    }\n\n    return new BigMapAbstraction(\n      new BigNumber(metadataBigMapId['int']),\n      new Schema(metadataBigMapType),\n      this.context.contract\n    );\n  }\n\n  private async getUriOrFail() {\n    const metadataBigMap = await this.findMetadataBigMap();\n    const uri = await metadataBigMap.get<string>('');\n    if (!uri) {\n      throw new UriNotFoundError();\n    }\n    return uri;\n  }\n\n  /**\n   * @description Return an object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash\n   */\n  async getMetadata() {\n    if (!this._metadataProvider) {\n      throw new UnconfiguredContractMetadataProviderError();\n    }\n    if (!this._metadataEnvelope) {\n      const uri = await this.getUriOrFail();\n      this._metadataEnvelope = await this._metadataProvider.provideMetadata(\n        this.constractAbstraction,\n        bytes2Char(uri),\n        this.context\n      );\n    }\n    return this._metadataEnvelope;\n  }\n\n  async metadataName() {\n    if (!this._metadataEnvelope) {\n      await this.getMetadata();\n    }\n    return this._metadataEnvelope!.metadata.name;\n  }\n\n  async metadataDescription() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.description;\n  }\n\n  async metadataVersion() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.version;\n  }\n\n  async metadataLicense() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.license;\n  }\n\n  async metadataAuthors() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.authors;\n  }\n\n  async metadataHomepage() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.homepage;\n  }\n\n  async metadataSource() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.source;\n  }\n\n  async metadataInterfaces() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.interfaces;\n  }\n\n  async metadataErrors() {\n    if (!this._metadataEnvelope) await this.getMetadata();\n    return this._metadataEnvelope!.metadata.errors;\n  }\n\n  async metadataViews() {\n    if (Object.keys(this._metadataViewsObject).length === 0) {\n      await this.initializeMetadataViewsList();\n    }\n    return this._metadataViewsObject;\n  }\n\n  private async initializeMetadataViewsList() {\n    const { metadata } = await this.getMetadata();\n    const metadataViews: any = {};\n    metadata.views?.forEach((view) => this.createViewImplementations(view, metadataViews));\n    this._metadataViewsObject = metadataViews;\n  }\n\n  private generateIndexedViewName(viewName: string, metadataViews: object) {\n    let i = 1;\n    if (viewName in metadataViews) {\n      while (`${viewName}${i}` in metadataViews) {\n        i++;\n      }\n      viewName = `${viewName}${i}`;\n    }\n    return viewName;\n  }\n\n  private createViewImplementations(view: ViewDefinition, metadataViews: any) {\n    for (const viewImplementation of view?.implementations ?? []) {\n      if (view.name) {\n        // when views have the same name, add an index at the end of the name\n        const viewName = this.generateIndexedViewName(view.name, metadataViews);\n        const metadataView = this._viewFactory.getView(\n          viewName,\n          this.context.rpc,\n          this.context.readProvider,\n          this.constractAbstraction,\n          viewImplementation\n        );\n        if (metadataView) {\n          metadataViews[viewName] = metadataView;\n        } else {\n          console.warn(\n            `Skipped generating ${viewName} because the view has an unsupported type: ${this._viewFactory.getImplementationType(\n              viewImplementation\n            )}`\n          );\n        }\n      }\n    }\n  }\n}\n","import { Context, ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { MetadataContext, Tzip16ContractAbstraction } from './tzip16-contract-abstraction';\n\nconst ABSTRACTION_KEY = Symbol('Tzip16ContractAbstractionObjectKey');\n\nexport function tzip16<T extends ContractAbstraction<ContractProvider | Wallet>>(\n  abs: T,\n  context: Context\n) {\n  return Object.assign(abs, {\n    // namespace tzip16\n    tzip16(\n      this: ContractAbstraction<ContractProvider | Wallet> & {\n        [ABSTRACTION_KEY]?: Tzip16ContractAbstraction;\n      }\n    ) {\n      if (!this[ABSTRACTION_KEY]) {\n        this[ABSTRACTION_KEY] = new Tzip16ContractAbstraction(this, context as MetadataContext);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this[ABSTRACTION_KEY]!;\n    },\n  });\n}\n","import CryptoJS from \"crypto-js\";\n\nexport function calculateSHA256Hash(preimage: string): string {\n    return CryptoJS.SHA256(preimage).toString(CryptoJS.enc.Hex);\n}","import { ContractAbstraction, ContractProvider, Wallet, Context } from '@taquito/taquito';\nimport { MetadataInterface } from './metadata-interface';\nimport { MetadataContext } from './tzip16-contract-abstraction';\nimport { InvalidContractMetadataError, InvalidUriError, ProtocolNotSupportedError } from './errors';\nimport { calculateSHA256Hash } from './tzip16-utils';\n\nexport interface MetadataProviderInterface {\n  provideMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: string,\n    context: MetadataContext\n  ): Promise<MetadataEnvelope>;\n}\n\nexport interface MetadataEnvelope {\n  uri: string;\n  integrityCheckResult?: boolean;\n  sha256Hash?: string;\n  metadata: MetadataInterface;\n}\nexport interface Handler {\n  getMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: Tzip16Uri,\n    context: Context\n  ): Promise<string>;\n}\n\nexport interface Tzip16Uri {\n  sha256hash: string | undefined;\n  protocol: string;\n  location: string;\n}\n\n/**\n * @description: Metadata Provider\n */\nexport class MetadataProvider implements MetadataProviderInterface {\n  private readonly PROTOCOL_REGEX = /(?:sha256:\\/\\/0x(.*)\\/)?(https?|ipfs|tezos-storage):(.*)/;\n\n  constructor(private handlers: Map<string, Handler>) {}\n\n  /**\n   * @description Fetch the metadata by using the appropriate handler based on the protcol found in the URI\n   * @returns an object which contains the uri, the metadata, an optional integrity check result and an optional SHA256 hash\n   * @param _contractAbstraction the contract abstraction which contains the URI in its storage\n   * @param _uri the decoded uri found in the storage\n   * @param context the TezosToolkit Context\n   */\n  async provideMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: string,\n    context: Context\n  ): Promise<MetadataEnvelope> {\n    const uriInfo = this.extractProtocolInfo(uri);\n    if (!uriInfo || !uriInfo.location) {\n      throw new InvalidUriError(uri);\n    }\n\n    const handler = this.handlers.get(uriInfo.protocol);\n    if (!handler) {\n      throw new ProtocolNotSupportedError(uriInfo.protocol);\n    }\n\n    const metadata = await handler.getMetadata(contractAbstraction, uriInfo, context);\n    const sha256Hash = calculateSHA256Hash(metadata);\n    let metadataJSON;\n    try {\n      metadataJSON = JSON.parse(metadata);\n    } catch (ex) {\n      throw new InvalidContractMetadataError(metadata);\n    }\n\n    return {\n      uri,\n      metadata: metadataJSON,\n      integrityCheckResult: uriInfo.sha256hash ? uriInfo.sha256hash === sha256Hash : undefined,\n      sha256Hash: uriInfo.sha256hash ? sha256Hash : undefined,\n    };\n  }\n\n  private extractProtocolInfo(_uri: string) {\n    const extractor = this.PROTOCOL_REGEX.exec(_uri);\n    if (!extractor) return;\n    return {\n      sha256hash: extractor[1],\n      protocol: extractor[2],\n      location: extractor[3],\n    };\n  }\n}\n","import { Context, Extension } from \"@taquito/taquito\";\nimport { Handler, MetadataProvider, MetadataProviderInterface } from \"./metadata-provider\";\nimport { HttpHandler } from \"./handlers/http-handler\";\nimport { TezosStorageHandler } from \"./handlers/tezos-storage-handler\";\nimport { IpfsHttpHandler } from \"./handlers/ipfs-handler\";\n\nexport const DEFAULT_HANDLERS = new Map<string, Handler>([\n    ['http', new HttpHandler()],\n    ['https', new HttpHandler()],\n    ['tezos-storage', new TezosStorageHandler()],\n    ['ipfs', new IpfsHttpHandler()]\n])\nexport class Tzip16Module implements Extension {\n    private _metadataProvider: MetadataProviderInterface;\n\n    constructor(metadataProvider?: MetadataProviderInterface) {\n        this._metadataProvider = metadataProvider ? metadataProvider : new MetadataProvider(DEFAULT_HANDLERS);\n    }\n\n    configureContext(context: Context) {\n        Object.assign(context, { metadataProvider: this._metadataProvider });\n    }\n}","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"b85fc404e34545a518215e449b3f1253f4520eec\",\n    \"version\": \"17.2.0\"\n};\n"],"names":[],"mappings":"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"}