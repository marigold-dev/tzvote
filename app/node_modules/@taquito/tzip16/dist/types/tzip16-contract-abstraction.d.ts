import { Context, ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';
import { MetadataEnvelope, MetadataProviderInterface } from './metadata-provider';
import { View } from './viewKind/interface';
export declare type MetadataContext = Context & {
    metadataProvider: MetadataProviderInterface;
};
export declare class Tzip16ContractAbstraction {
    private constractAbstraction;
    private context;
    private _metadataProvider;
    private _metadataEnvelope?;
    private _viewFactory;
    private _metadataViewsObject;
    constructor(constractAbstraction: ContractAbstraction<ContractProvider | Wallet>, context: MetadataContext);
    private findMetadataBigMap;
    private getUriOrFail;
    /**
     * @description Return an object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash
     */
    getMetadata(): Promise<MetadataEnvelope>;
    metadataName(): Promise<string | undefined>;
    metadataDescription(): Promise<string | undefined>;
    metadataVersion(): Promise<string | undefined>;
    metadataLicense(): Promise<{
        name: string;
        details?: string | undefined;
    } | undefined>;
    metadataAuthors(): Promise<string[] | undefined>;
    metadataHomepage(): Promise<string | undefined>;
    metadataSource(): Promise<{
        tools?: string[] | undefined;
        location?: string | undefined;
    } | undefined>;
    metadataInterfaces(): Promise<string[] | undefined>;
    metadataErrors(): Promise<import("./metadata-interface").ErrorsTzip16 | undefined>;
    metadataViews(): Promise<{
        [key: string]: () => View;
    }>;
    private initializeMetadataViewsList;
    private generateIndexedViewName;
    private createViewImplementations;
}
