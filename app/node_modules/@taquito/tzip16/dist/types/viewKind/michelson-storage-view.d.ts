import { RpcClientInterface, MichelsonV1Expression, MichelsonV1ExpressionExtended } from '@taquito/rpc';
import { ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';
import { TzReadProvider } from '@taquito/taquito';
import { View } from './interface';
export declare class MichelsonStorageView implements View {
    private viewName;
    private contract;
    private rpc;
    private readProvider;
    private returnType;
    private code;
    private viewParameterType?;
    constructor(viewName: string, contract: ContractAbstraction<ContractProvider | Wallet>, rpc: RpcClientInterface, readProvider: TzReadProvider, returnType: MichelsonV1Expression, code: MichelsonV1ExpressionExtended[], viewParameterType?: MichelsonV1ExpressionExtended | undefined);
    /**
     * @description According to the tzip-16 standard, the following instructions must not be used in the code of the view:
     * 'AMOUNT', 'CREATE_CONTRACT', 'SENDER', 'SET_DELEGATE', 'SOURCE', and 'TRANSFER_TOKENS'
     * The method throw an error if an illegal instruction is found
     */
    private findForbiddenInstructionInViewCodeError;
    /**
     * @description According to the tzip-16 standard, in the first version of the specification, the instruction SELF should only be used before ADDRESS
     * The method throws an error is the instruction SELF is present, but not followed by ADDRESS
     */
    private illegalUseOfSelfInstruction;
    /**
     * @description Loops through the view's code and replace SELF, BALANCE, NOW, and CHAIN_ID with Michelson expressions that match the current context, if applicable.
     */
    private adaptViewCodeToContext;
    private validateArgs;
    private formatArgsAndParameter;
    executeView(...args: any[]): Promise<any>;
}
