"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoParameterExpectedError = exports.ForbiddenInstructionInViewCodeError = exports.UnconfiguredContractMetadataProviderError = exports.InvalidContractMetadataTypeError = exports.ProtocolNotSupportedError = exports.InvalidContractMetadataError = exports.InvalidUriError = exports.UriNotFoundError = exports.ContractMetadataNotFoundError = exports.BigMapContractMetadataNotFoundError = exports.InvalidViewParameterError = void 0;
const core_1 = require("@taquito/core");
var core_2 = require("@taquito/core");
Object.defineProperty(exports, "InvalidViewParameterError", { enumerable: true, get: function () { return core_2.InvalidViewParameterError; } });
/**
 *  @category Error
 *  @description Error that indicates missing big map metadata (non compliance to the TZIP-16 standard)
 */
class BigMapContractMetadataNotFoundError extends core_1.TaquitoError {
    constructor(invalidBigMapId) {
        super();
        this.invalidBigMapId = invalidBigMapId;
        this.name = 'BigMapContractMetadataNotFoundError';
        this.message =
            'Non-compliance with the TZIP-016 standard. No big map named metadata was found in the contract storage.';
    }
}
exports.BigMapContractMetadataNotFoundError = BigMapContractMetadataNotFoundError;
/**
 *  @category Error
 *  @description Error that indicates missing metadata in storage
 */
class ContractMetadataNotFoundError extends core_1.TaquitoError {
    constructor(info) {
        super();
        this.info = info;
        this.name = 'ContractMetadataNotFoundError';
        this.message = `No metadata was found in the contract storage. ${info}`;
    }
}
exports.ContractMetadataNotFoundError = ContractMetadataNotFoundError;
/**
 *  @category Error
 *  @description Error that indicates missing URI (non compliance to the TZIP-16 standard)
 */
class UriNotFoundError extends core_1.TaquitoError {
    constructor() {
        super();
        this.name = 'UriNotFoundError';
        this.message =
            'Non-compliance with the TZIP-016 standard. No URI found in the contract storage.';
    }
}
exports.UriNotFoundError = UriNotFoundError;
/**
 *  @category Error
 *  @description Error that indicates an invalid URI (non compliance to the TZIP-16 standard)
 */
class InvalidUriError extends core_1.TaquitoError {
    constructor(uri) {
        super();
        this.uri = uri;
        this.name = 'InvalidUriError';
        this.message = `Non-compliance with the TZIP-016 standard. The URI is invalid: ${uri}.`;
    }
}
exports.InvalidUriError = InvalidUriError;
/**
 *  @category Error
 *  @description Error that indicates invalid metadata (non compliance to the TZIP-16 standard)
 */
class InvalidContractMetadataError extends core_1.TaquitoError {
    constructor(invalidMetadata) {
        super();
        this.invalidMetadata = invalidMetadata;
        this.name = 'InvalidContractMetadataError';
        this.message = `The metadata found at the pointed ressource are not compliant with tzip16 standard: ${invalidMetadata}.`;
    }
}
exports.InvalidContractMetadataError = InvalidContractMetadataError;
/**
 *  @category Error
 *  @description Error that indicates the uri protocol being passed or used is not supported
 */
class ProtocolNotSupportedError extends core_1.ParameterValidationError {
    constructor(protocol) {
        super();
        this.protocol = protocol;
        this.name = 'ProtocolNotSupportedError';
        this.message = `The protocol found in the URI is not supported: ${protocol}.`;
    }
}
exports.ProtocolNotSupportedError = ProtocolNotSupportedError;
/**
 *  @category Error
 *  @description Error that indicates the metadata type is invalid (non compliance to the TZIP-16 standard)
 */
class InvalidContractMetadataTypeError extends core_1.TaquitoError {
    constructor() {
        super();
        this.name = 'InvalidContractMetadataTypeError';
        this.message =
            'Non-compliance with the TZIP-016 standard. The type of metadata should be bytes.';
    }
}
exports.InvalidContractMetadataTypeError = InvalidContractMetadataTypeError;
/**
 *  @category Error
 *  @description Error that indicates metadata provider being unconfigured in the TezosToolkit instance
 */
class UnconfiguredContractMetadataProviderError extends core_1.TezosToolkitConfigError {
    constructor() {
        super();
        this.name = 'UnconfiguredContractMetadataProviderError';
        this.message =
            'No metadata provider has been configured. The default one can be configured by calling addExtension(new Tzip16Module()) on your TezosToolkit instance.';
    }
}
exports.UnconfiguredContractMetadataProviderError = UnconfiguredContractMetadataProviderError;
/**
 *  @category Error
 *  @description Error that indicates a forbidden instruction being found inside the View code
 */
class ForbiddenInstructionInViewCodeError extends core_1.TaquitoError {
    constructor(instruction) {
        super();
        this.instruction = instruction;
        this.name = 'ForbiddenInstructionInViewCodeError';
        this.message = `Error found in the code of the view. It contains a forbidden instruction: ${instruction}.`;
    }
}
exports.ForbiddenInstructionInViewCodeError = ForbiddenInstructionInViewCodeError;
/**
 *  @category Error
 *  @description Error that indicates parameters are being passed when it is not required
 */
class NoParameterExpectedError extends core_1.ParameterValidationError {
    constructor(viewName, args) {
        super();
        this.viewName = viewName;
        this.args = args;
        this.name = 'NoParameterExpectedError';
        this.message = `${viewName} Received ${args.length} arguments while expecting no parameter or 'Unit'`;
    }
}
exports.NoParameterExpectedError = NoParameterExpectedError;
//# sourceMappingURL=errors.js.map