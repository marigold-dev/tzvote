"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewFactory = void 0;
const metadata_interface_1 = require("../metadata-interface");
const michelson_storage_view_1 = require("./michelson-storage-view");
class ViewFactory {
    getView(viewName, rpc, readProvider, contract, viewImplementation) {
        if (this.isMichelsonStorageView(viewImplementation)) {
            const viewValues = viewImplementation[metadata_interface_1.ViewImplementationType.MICHELSON_STORAGE];
            if (!viewValues.returnType || !viewValues.code) {
                console.warn(`${viewName} is missing mandatory code or returnType property therefore it will be skipped.`);
                return;
            }
            return () => {
                const view = new michelson_storage_view_1.MichelsonStorageView(viewName, contract, rpc, readProvider, viewValues.returnType, viewValues.code, viewValues.parameter);
                return view;
            };
        }
    }
    getImplementationType(viewImplementation) {
        return Object.keys(viewImplementation)[0];
    }
    isMichelsonStorageView(viewImplementation) {
        return (this.getImplementationType(viewImplementation) === metadata_interface_1.ViewImplementationType.MICHELSON_STORAGE);
    }
}
exports.ViewFactory = ViewFactory;
//# sourceMappingURL=viewFactory.js.map