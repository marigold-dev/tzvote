"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsHttpHandler = void 0;
const http_utils_1 = require("@taquito/http-utils");
class IpfsHttpHandler {
    constructor(ipfsGatheway) {
        this.httpBackend = new http_utils_1.HttpBackend();
        this._ipfsGateway = ipfsGatheway ? ipfsGatheway : 'ipfs.io';
    }
    getMetadata(_contractAbstraction, { location }, _context) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.httpBackend.createRequest({
                url: `https://${this._ipfsGateway}/ipfs/${location.substring(2)}/`,
                method: 'GET',
                headers: {
                    'Content-Type': 'text/plain; charset=utf-8'
                },
                json: false
            });
        });
    }
}
exports.IpfsHttpHandler = IpfsHttpHandler;
//# sourceMappingURL=ipfs-handler.js.map