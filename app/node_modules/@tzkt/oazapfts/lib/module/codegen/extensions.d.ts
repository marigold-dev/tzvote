import ts from "typescript";
import type ApiGenerator from "./generate";
import type { defaultHelpers } from "./generate";
import { OpenAPIV3 } from "openapi-types";
/**
 * Looks for, reads, transpiles and saves locally a custom config.
 */
export declare const processConfigFileIfExists: () => void;
type SchemaParserExtensionHelpers = {
    defaultSchemaTypeParser: ApiGenerator["getTypeFromSchema"];
};
/**
 * Override default way to parse any schema.
 * Receives a schema and returns ts.TypeNode.
 * If a received schema should not be extended (overriden) - return nothing.
 * In such case the parameter will be processed by a default schema parser.
 */
export type SchemaParserExtension = (s: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject | undefined, name: string | undefined, helpers: SchemaParserExtensionHelpers & typeof defaultHelpers, ctx: ApiGenerator) => ts.TypeNode | undefined;
type ParameterParserExtensionHelpers = {
    defaultParameterTypeParser: ApiGenerator["getTypeFromDefaultParameter"];
};
/**
 * Override default way to parse an API method parameter from schema.
 * Receives a parameter schema and returns ts.TypeNode.
 * If a received parameter should not be extended (overriden) - return nothing.
 * In such case the parameter will be processed by a default parameter parser.
 */
export type ParameterParserExtension = (p: OpenAPIV3.ParameterObject, helpers: ParameterParserExtensionHelpers & typeof defaultHelpers, ctx: ApiGenerator) => ts.TypeNode | undefined;
type ResolveHelpers = {
    defaultSchemaResolver: ApiGenerator["resolve"];
};
/**
 * Returns the parser function name if the passed in parameter meets custom logic.
 * If a parameter should be processed with a default parser - return nothing.
 * For a parser function name signature see QueryParamParser.
 */
export type QueryStringParserExtension = (p: OpenAPIV3.ParameterObject, helpers: ResolveHelpers & typeof defaultHelpers, ctx: ApiGenerator) => string | undefined;
/**
 * Returns the reponse type if passed responses meet custom logic.
 * If a parameter should be processed with a default parser - return nothing.
 */
export type ReponseTypeExtension = (responses: OpenAPIV3.ResponsesObject, helpers: ResolveHelpers & typeof defaultHelpers, ctx?: ApiGenerator) => "json" | "text" | "blob" | undefined;
/**
 * Code generator extensions.
 * For a description of every extension see respective expension type.
 */
export type OazapftsExtensions = {
    queryStringParserExtensions?: QueryStringParserExtension[];
    parameterParserExtensions?: ParameterParserExtension[];
    schemaParserExtensions?: SchemaParserExtension[];
    reponseTypeExtensions?: ReponseTypeExtension[];
};
/**
 * Takes a parameterName that triggered the parser and the parameter value
 * that it was triggered with.
 * Should always return an Object, that will be converted to a query string
 * at runtime by a default parser.
 */
export type QueryParamParser = (parameterName: string, parameter?: Record<string, any> | null) => Record<string, any>;
export {};
