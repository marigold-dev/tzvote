import * as cg from "./tscodegen";
import ApiGenerator from "./generate";
import SwaggerParser from "@apidevtools/swagger-parser";
import converter from "swagger2openapi";
export { cg };
export async function generateAst(doc, opts, isConverted) {
    // @ts-ignore
    const extensions = (await import("./oazapfts.config")).default;
    return new ApiGenerator(doc, opts, isConverted, extensions).generateApi();
}
export function printAst(ast) {
    return cg.printFile(ast);
}
export async function generateSource(spec, opts = {}) {
    var { doc, isConverted } = await parseSpec(spec);
    const ast = await generateAst(doc, opts, isConverted);
    const { title, version } = doc.info;
    const preamble = ["$&", title, version].filter(Boolean).join("\n * ");
    const src = printAst(ast);
    return src.replace(/^\/\*\*/, preamble);
}
function isOpenApiV3(doc) {
    return "openapi" in doc && doc.openapi.startsWith("3");
}
export async function parseSpec(spec) {
    const doc = await SwaggerParser.bundle(spec);
    if (isOpenApiV3(doc)) {
        return {
            doc,
            isConverted: false,
        };
    }
    else {
        const converted = await converter.convertObj(doc, {});
        return {
            doc: converted.openapi,
            isConverted: true,
        };
    }
}
//# sourceMappingURL=index.js.map