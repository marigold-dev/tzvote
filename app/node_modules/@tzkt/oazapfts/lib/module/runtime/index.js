import * as qs from "./query";
import { joinUrl, stripUndefined } from "./util";
import { ok } from "../";
export function runtime(defaults) {
    async function fetchText(url, req) {
        const res = await doFetch(url, req);
        let data;
        try {
            data = await res.text();
        }
        catch (err) { }
        return {
            status: res.status,
            headers: res.headers,
            contentType: res.headers.get("content-type"),
            data,
        };
    }
    async function fetchJson(url, req = {}) {
        const { status, headers, contentType, data } = await fetchText(url, {
            ...req,
            headers: {
                Accept: "application/json",
                ...req.headers,
            },
        });
        const isJson = contentType ? contentType.includes("json") : false;
        if (isJson) {
            return {
                status,
                headers,
                data: data ? JSON.parse(data) : null,
            };
        }
        return { status, headers, data };
    }
    async function fetchBlob(url, req = {}) {
        const res = await doFetch(url, req);
        let data;
        try {
            data = await res.blob();
        }
        catch (err) { }
        return { status: res.status, headers: res.headers, data };
    }
    async function doFetch(url, req = {}) {
        const { baseUrl, headers, fetch: customFetch, ...init } = {
            ...defaults,
            ...req,
        };
        const href = joinUrl(baseUrl, url);
        const res = await (customFetch || fetch)(href, {
            ...init,
            headers: stripUndefined({ ...defaults.headers, ...headers }),
        });
        return res;
    }
    return {
        ok,
        fetchText,
        fetchJson,
        fetchBlob,
        json({ body, headers, ...req }) {
            return {
                ...req,
                ...(body != null && { body: JSON.stringify(body) }),
                headers: {
                    ...headers,
                    "Content-Type": "application/json",
                },
            };
        },
        form({ body, headers, ...req }) {
            return {
                ...req,
                ...(body != null && { body: qs.form(body) }),
                headers: {
                    ...headers,
                    "Content-Type": "application/x-www-form-urlencoded",
                },
            };
        },
        multipart({ body, ...req }) {
            if (body == null)
                return req;
            const data = new (defaults.formDataConstructor ||
                req.formDataConstructor ||
                FormData)();
            Object.entries(body).forEach(([name, value]) => {
                data.append(name, value);
            });
            return {
                ...req,
                body: data,
            };
        },
    };
}
//# sourceMappingURL=index.js.map