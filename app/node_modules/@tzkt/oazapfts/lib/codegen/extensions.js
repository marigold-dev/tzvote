"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processConfigFileIfExists = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
/**
 * Removes custom config local leftovers after the last API generation.
 * Replaces transpiled custom config with the default one.
 */
const cleanupConfig = (configFilename) => {
    console.info("Cleaning up after previous build...");
    const defaultConfigFilename = "oazapfts.config.default.js";
    const defaultConfig = path_1.default.resolve(__dirname, defaultConfigFilename);
    const localCustomConfig = path_1.default.resolve(__dirname, configFilename);
    fs_1.default.copyFileSync(defaultConfig, localCustomConfig);
};
/**
 * Transpiles a TS config to a JS string.
 * @param configPath path to TS config
 * @returns transpiled string of JS code
 */
const transpileCustomConfig = (configPath) => {
    const transpiled = typescript_1.default.transpileModule(fs_1.default.readFileSync(configPath, "utf8"), {});
    return transpiled.outputText;
};
/**
 * Checks if a config file exists at process root folder.
 * @param configFilename filename to look for.
 */
const checkCustomConfigFileExists = (configFilename) => {
    console.info("Looking for config file...");
    const configPath = path_1.default.resolve(process.cwd(), configFilename);
    console.info("Checking path:", configPath);
    return fs_1.default.existsSync(configPath);
};
/**
 * Saves a custom config locally to use in code generation down the line.
 * @param transpiledString JS string to save as a file
 * @param targetFilename filename to save the config as
 */
const saveTranspiledCustomConfig = (transpiledString, targetFilename) => {
    const dest = path_1.default.resolve(__dirname, targetFilename);
    fs_1.default.writeFileSync(dest, transpiledString);
};
/**
 * Looks for, reads, transpiles and saves locally a custom config.
 */
const processConfigFileIfExists = () => {
    const target = "oazapfts.config.js";
    cleanupConfig(target);
    const src = "oazapfts.config.ts";
    const exists = checkCustomConfigFileExists(src);
    if (!exists) {
        console.warn(`No config found. Using defaults.`);
        return;
    }
    console.info(`Found ${src}. Processing...`);
    const transpiled = transpileCustomConfig(src);
    saveTranspiledCustomConfig(transpiled, target);
    console.info("Processed config.");
};
exports.processConfigFileIfExists = processConfigFileIfExists;
//# sourceMappingURL=extensions.js.map