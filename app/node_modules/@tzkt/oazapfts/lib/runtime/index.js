"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runtime = void 0;
const qs = __importStar(require("./query"));
const util_1 = require("./util");
const __1 = require("../");
function runtime(defaults) {
    async function fetchText(url, req) {
        const res = await doFetch(url, req);
        let data;
        try {
            data = await res.text();
        }
        catch (err) { }
        return {
            status: res.status,
            headers: res.headers,
            contentType: res.headers.get("content-type"),
            data,
        };
    }
    async function fetchJson(url, req = {}) {
        const { status, headers, contentType, data } = await fetchText(url, {
            ...req,
            headers: {
                Accept: "application/json",
                ...req.headers,
            },
        });
        const isJson = contentType ? contentType.includes("json") : false;
        if (isJson) {
            return {
                status,
                headers,
                data: data ? JSON.parse(data) : null,
            };
        }
        return { status, headers, data };
    }
    async function fetchBlob(url, req = {}) {
        const res = await doFetch(url, req);
        let data;
        try {
            data = await res.blob();
        }
        catch (err) { }
        return { status: res.status, headers: res.headers, data };
    }
    async function doFetch(url, req = {}) {
        const { baseUrl, headers, fetch: customFetch, ...init } = {
            ...defaults,
            ...req,
        };
        const href = (0, util_1.joinUrl)(baseUrl, url);
        const res = await (customFetch || fetch)(href, {
            ...init,
            headers: (0, util_1.stripUndefined)({ ...defaults.headers, ...headers }),
        });
        return res;
    }
    return {
        ok: __1.ok,
        fetchText,
        fetchJson,
        fetchBlob,
        json({ body, headers, ...req }) {
            return {
                ...req,
                ...(body != null && { body: JSON.stringify(body) }),
                headers: {
                    ...headers,
                    "Content-Type": "application/json",
                },
            };
        },
        form({ body, headers, ...req }) {
            return {
                ...req,
                ...(body != null && { body: qs.form(body) }),
                headers: {
                    ...headers,
                    "Content-Type": "application/x-www-form-urlencoded",
                },
            };
        },
        multipart({ body, ...req }) {
            if (body == null)
                return req;
            const data = new (defaults.formDataConstructor ||
                req.formDataConstructor ||
                FormData)();
            Object.entries(body).forEach(([name, value]) => {
                data.append(name, value);
            });
            return {
                ...req,
                body: data,
            };
        },
    };
}
exports.runtime = runtime;
//# sourceMappingURL=index.js.map