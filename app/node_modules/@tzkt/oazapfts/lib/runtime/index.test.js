"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Oazapfts = __importStar(require("."));
const oazapfts = Oazapfts.runtime({});
const fetchMock = () => ({
    ok: true,
    text: "hello",
    headers: {
        get: (name) => undefined,
    },
});
describe("request", () => {
    let g;
    beforeAll(() => {
        g = global;
        g.fetch = g.fetch || (() => { });
    });
    it("should use global fetch", async () => {
        jest.spyOn(g, "fetch").mockImplementationOnce(fetchMock);
        await oazapfts.fetchText("bar", { baseUrl: "foo/" });
        expect(g.fetch).toHaveBeenCalledWith("foo/bar", expect.any(Object));
    });
    it("should not use global fetch if local is provided", async () => {
        jest.spyOn(g, "fetch");
        const customFetch = jest.fn(fetchMock);
        await oazapfts.fetchText("bar", {
            baseUrl: "foo/",
            fetch: customFetch,
        });
        expect(customFetch).toHaveBeenCalledWith("foo/bar", expect.any(Object));
        expect(g.fetch).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=index.test.js.map