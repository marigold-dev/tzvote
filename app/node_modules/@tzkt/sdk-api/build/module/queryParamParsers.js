const jsonParameter = (paramName, p) => {
    if (!p)
        return {};
    const mainParamsObj = {};
    Object.entries(p).forEach(([k, v]) => {
        if (!(v instanceof Object)) {
            throw new Error(`Expected ${paramName} value to be object, received ${typeof v}`);
        }
        const { jsonPath, jsonValue } = v;
        if (jsonValue === undefined || jsonValue === null)
            throw new Error(`Expected jsonValue in ${paramName} -> ${k}, found: ${jsonValue}`);
        // k is top eq, ne, in, etc.
        const parameterPathParts = [paramName, jsonPath, k];
        const parameterPath = parameterPathParts
            .filter((p) => p !== undefined)
            .join('.');
        mainParamsObj[parameterPath] = jsonValue;
    });
    return mainParamsObj;
};
const anyofParameter = (paramName, p) => {
    if (!p)
        return {};
    const { fields } = p;
    const validateFields = (fields) => {
        if (!Array.isArray(fields)) {
            throw new Error(`Expected ${paramName} fields to be Array. Received ${typeof fields}.`);
        }
        fields.forEach((f) => {
            if (typeof f === 'string')
                return;
            throw new Error(`Expected ${paramName} fields to be strings. Received ${typeof f}`);
        });
        return true;
    };
    // never really returns but oh well
    if (!validateFields(fields))
        return {};
    const mainParamsObj = {};
    const anyof = fields.join('.');
    if (p.value) {
        const prefixedKey = `${paramName}.${anyof}`;
        mainParamsObj[prefixedKey] = p.value;
    }
    for (const param of ['in', 'eq', 'null']) {
        if (p[param]) {
            const prefixedKey = `${paramName}.${anyof}.${param}`;
            mainParamsObj[prefixedKey] = Array.isArray(p[param])
                ? p[param].join(',')
                : p[param];
            return mainParamsObj;
        }
    }
    return mainParamsObj;
};
const queryParameter = (paramName, p) => {
    if (!p)
        return {};
    const mainParamsObj = {};
    Object.entries(p).forEach(([k, v]) => {
        const key = `${paramName}.${k}`;
        mainParamsObj[key] = v;
    });
    return mainParamsObj;
};
const parsers = {
    jsonParameter,
    queryParameter,
    anyofParameter,
};
export default parsers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlQYXJhbVBhcnNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcnlQYXJhbVBhcnNlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxhQUFhLEdBQXFCLENBQUMsU0FBUyxFQUFFLENBQUUsRUFBRSxFQUFFO0lBQ3hELElBQUksQ0FBQyxDQUFDO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFbEIsTUFBTSxhQUFhLEdBQTJCLEVBQUUsQ0FBQztJQUVqRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2IsWUFBWSxTQUFTLGlDQUFpQyxPQUFPLENBQUMsRUFBRSxDQUNqRSxDQUFDO1NBQ0g7UUFFRCxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLElBQUk7WUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FDYix5QkFBeUIsU0FBUyxPQUFPLENBQUMsWUFBWSxTQUFTLEVBQUUsQ0FDbEUsQ0FBQztRQUVKLDRCQUE0QjtRQUM1QixNQUFNLGtCQUFrQixHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVwRCxNQUFNLGFBQWEsR0FBRyxrQkFBa0I7YUFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO2FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNiLGFBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLGFB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