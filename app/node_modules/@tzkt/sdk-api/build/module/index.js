/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * DO NOT MODIFY - This file has been generated using @tzkt/oazapfts.
 * See https://www.npmjs.com/package/@tzkt/oazapfts
 */
import * as Oazapfts from '@tzkt/oazapfts/runtime';
import * as QS from '@tzkt/oazapfts/runtime/query';
import QueryParamsParsers from './queryParamParsers';
export const defaults = {
    baseUrl: 'https://api.tzkt.io',
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    server1: 'https://api.tzkt.io',
};
/**
 * Get accounts
 */
export function accountsGet({ id, address, $type, kind, delegate, balance, staked, lastActivity, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('type', $type),
        ...QueryParamsParsers.queryParameter('kind', kind),
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('staked', staked),
        ...QueryParamsParsers.queryParameter('lastActivity', lastActivity),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get accounts count
 */
export function accountsGetCount({ $type, kind, balance, staked, firstActivity, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('type', $type),
        ...QueryParamsParsers.queryParameter('kind', kind),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('staked', staked),
        ...QueryParamsParsers.queryParameter('firstActivity', firstActivity),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get account by address
 */
export function accountsGetByAddress(address, { legacy, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}${QS.query(QS.explode({
        legacy,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get account contracts
 */
export function accountsGetContracts(address, { sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/contracts${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get account delegators
 */
export function accountsGetDelegators(address, { $type, balance, delegationLevel, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/delegators${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('type', $type),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('delegationLevel', delegationLevel),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get account operations
 */
export function accountsGetOperations(address, { $type, initiator, sender, target, prevDelegate, newDelegate, contractManager, contractDelegate, originatedContract, accuser, offender, baker, level, timestamp, entrypoint, parameter, hasInternals, status, sort, lastId, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/operations${QS.query(QS.explode({
        type: $type,
        sort,
        lastId,
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.queryParameter('initiator', initiator),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('target', target),
        ...QueryParamsParsers.queryParameter('prevDelegate', prevDelegate),
        ...QueryParamsParsers.queryParameter('newDelegate', newDelegate),
        ...QueryParamsParsers.queryParameter('contractManager', contractManager),
        ...QueryParamsParsers.queryParameter('contractDelegate', contractDelegate),
        ...QueryParamsParsers.queryParameter('originatedContract', originatedContract),
        ...QueryParamsParsers.queryParameter('accuser', accuser),
        ...QueryParamsParsers.queryParameter('offender', offender),
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('entrypoint', entrypoint),
        ...QueryParamsParsers.jsonParameter('parameter', parameter),
        ...QueryParamsParsers.queryParameter('hasInternals', hasInternals),
        ...QueryParamsParsers.queryParameter('status', status),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get counter
 */
export function accountsGetCounter(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/counter`, {
        ...opts,
    }));
}
/**
 * Get balance
 */
export function accountsGetBalance(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance`, {
        ...opts,
    }));
}
/**
 * Get balance at level
 */
export function accountsGetBalanceAtLevel(address, level, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(level)}`, {
        ...opts,
    }));
}
/**
 * Get balance at date
 */
export function accountsGetBalanceAtDate(address, datetime, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(datetime)}`, {
        ...opts,
    }));
}
/**
 * Get balance history
 */
export function accountsGetBalanceHistory(address, { step, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history${QS.query(QS.explode({
        step,
        offset,
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get account report
 */
export function accountsGetBalanceReport(address, { $from, to, currency, historical, delimiter, separator, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/accounts/${encodeURIComponent(address)}/report${QS.query(QS.explode({
        from: $from,
        to,
        currency,
        historical,
        delimiter,
        separator,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmaps count
 */
export function bigMapsGetBigMapsCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/bigmaps/count', {
        ...opts,
    }));
}
/**
 * Get bigmaps
 */
export function bigMapsGetBigMaps({ contract, path, tags, active, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps${QS.query(QS.explode({
        active,
        limit,
        micheline,
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('path', path),
        ...QueryParamsParsers.queryParameter('tags', tags),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap updates
 */
export function bigMapsGetBigMapUpdates({ bigmap, path, contract, tags, action, value, level, timestamp, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/updates${QS.query(QS.explode({
        limit,
        micheline,
        ...QueryParamsParsers.queryParameter('bigmap', bigmap),
        ...QueryParamsParsers.queryParameter('path', path),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('tags', tags),
        ...QueryParamsParsers.queryParameter('action', action),
        ...QueryParamsParsers.jsonParameter('value', value),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap by Id
 */
export function bigMapsGetBigMapById(id, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap type
 */
export function bigMapsGetBigMapType(id, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/type`, {
        ...opts,
    }));
}
/**
 * Get bigmap keys
 */
export function bigMapsGetKeys(id, { active, key, value, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys${QS.query(QS.explode({
        active,
        limit,
        micheline,
        ...QueryParamsParsers.jsonParameter('key', key),
        ...QueryParamsParsers.jsonParameter('value', value),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap key
 */
export function bigMapsGetKey(id, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap key updates
 */
export function bigMapsGetKeyUpdates(id, key, { sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}/updates${QS.query(QS.explode({
        limit,
        micheline,
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get historical keys
 */
export function bigMapsGetHistoricalKeys(id, level, { active, key, value, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}${QS.query(QS.explode({
        active,
        limit,
        micheline,
        ...QueryParamsParsers.jsonParameter('key', key),
        ...QueryParamsParsers.jsonParameter('value', value),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get historical key
 */
export function bigMapsGetKey2(id, level, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get blocks count
 */
export function blocksGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/blocks/count', {
        ...opts,
    }));
}
/**
 * Get blocks
 */
export function blocksGet({ baker, anyof, proposer, producer, level, timestamp, priority, blockRound, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('proposer', proposer),
        ...QueryParamsParsers.queryParameter('producer', producer),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('priority', priority),
        ...QueryParamsParsers.queryParameter('blockRound', blockRound),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get block by hash
 */
export function blocksGetByHash(hash, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(hash)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get block by level
 */
export function blocksGetByLevel(level, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get timestamp by level
 */
export function blocksGetByLevel2(level, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}/timestamp`, {
        ...opts,
    }));
}
/**
 * Get block by timestamp
 */
export function blocksGetByDate(timestamp, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get level by timestamp
 */
export function blocksGetByDate2(timestamp, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}/level`, {
        ...opts,
    }));
}
/**
 * Get commitment by blinded address
 */
export function commitmentsGet(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/${encodeURIComponent(address)}`, {
        ...opts,
    }));
}
/**
 * Get commitments
 */
export function commitmentsGetAll({ activated, activationLevel, balance, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments${QS.query(QS.explode({
        activated,
        limit,
        ...QueryParamsParsers.queryParameter('activationLevel', activationLevel),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get commitments count
 */
export function commitmentsGetCount({ activated, balance, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/count${QS.query(QS.explode({
        activated,
        ...QueryParamsParsers.queryParameter('balance', balance),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get global constants
 */
export function constantsGet({ address, creationLevel, creationTime, creator, refs, size, select, sort, offset, limit, format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants${QS.query(QS.explode({
        limit,
        format,
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('creationLevel', creationLevel),
        ...QueryParamsParsers.queryParameter('creationTime', creationTime),
        ...QueryParamsParsers.queryParameter('creator', creator),
        ...QueryParamsParsers.queryParameter('refs', refs),
        ...QueryParamsParsers.queryParameter('size', size),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get global constant by address
 */
export function constantsGetByAddress(address, { format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/${encodeURIComponent(address)}${QS.query(QS.explode({
        format,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get global constants count
 */
export function constantsGetCount({ refs, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('refs', refs),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contracts
 */
export function contractsGet({ address, kind, tzips, creator, manager, delegate, balance, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts${QS.query(QS.explode({
        limit,
        includeStorage,
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('kind', kind),
        ...QueryParamsParsers.queryParameter('tzips', tzips),
        ...QueryParamsParsers.queryParameter('creator', creator),
        ...QueryParamsParsers.queryParameter('manager', manager),
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('lastActivity', lastActivity),
        ...QueryParamsParsers.queryParameter('typeHash', typeHash),
        ...QueryParamsParsers.queryParameter('codeHash', codeHash),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contracts count
 */
export function contractsGetCount({ kind, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('kind', kind),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract by address
 */
export function contractsGetByAddress(address, { legacy, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}${QS.query(QS.explode({
        legacy,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get same contracts
 */
export function contractsGetSame(address, { select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/same${QS.query(QS.explode({
        limit,
        includeStorage,
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get similar contracts
 */
export function contractsGetSimilar(address, { select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/similar${QS.query(QS.explode({
        limit,
        includeStorage,
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract code
 */
export function contractsGetCode(address, { level, format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/code${QS.query(QS.explode({
        level,
        format,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get JSON Schema [2020-12] interface for the contract
 */
export function contractsGetInterface(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/interface`, {
        ...opts,
    }));
}
/**
 * Get contract entrypoints
 */
export function contractsGetEntrypoints(address, { all, json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints${QS.query(QS.explode({
        all,
        json,
        micheline,
        michelson,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get entrypoint by name
 */
export function contractsGetEntrypointByName(address, name, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract views
 */
export function contractsGetContractViews(address, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get view by name
 */
export function contractsGetContractViewByName(address, name, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views/${encodeURIComponent(name)}${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, {
        ...opts,
    }));
}
/**
 * Build entrypoint parameters
 */
export function contractsBuildEntrypointParametersGet(address, name, { value, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build${QS.query(QS.explode({
        value,
    }))}`, {
        ...opts,
    }));
}
/**
 * Build entrypoint parameters
 */
export function contractsBuildEntrypointParametersPost(address, name, body, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build`, oazapfts.json({
        ...opts,
        method: 'POST',
        body,
    })));
}
/**
 * Get contract storage
 */
export function contractsGetStorage(address, { level, path, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage${QS.query(QS.explode({
        level,
        path,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract storage schema
 */
export function contractsGetStorageSchema(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage/schema${QS.query(QS.explode({
        level,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract storage history
 */
export function contractsGetStorageHistory(address, { lastId, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/history${QS.query(QS.explode({
        lastId,
        limit,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get raw contract storage
 */
export function contractsGetRawStorage(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw${QS.query(QS.explode({
        level,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get raw contract storage schema
 */
export function contractsGetRawStorageSchema(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/schema${QS.query(QS.explode({
        level,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get raw contract storage history
 */
export function contractsGetRawStorageHistory(address, { lastId, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/history${QS.query(QS.explode({
        lastId,
        limit,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract bigmaps
 */
export function contractsGetBigMaps(address, { tags, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps${QS.query(QS.explode({
        limit,
        micheline,
        ...QueryParamsParsers.queryParameter('tags', tags),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap by name
 */
export function contractsGetBigMapByName(address, name, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap keys
 */
export function contractsGetBigMapByNameKeys(address, name, { active, key, value, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys${QS.query(QS.explode({
        active,
        limit,
        micheline,
        ...QueryParamsParsers.jsonParameter('key', key),
        ...QueryParamsParsers.jsonParameter('value', value),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap key
 */
export function contractsGetKey(address, name, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get bigmap key updates
 */
export function contractsGetKeyUpdates(address, name, key, { sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}/updates${QS.query(QS.explode({
        limit,
        micheline,
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get historical keys
 */
export function contractsGetHistoricalKeys(address, name, level, { active, key, value, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}${QS.query(QS.explode({
        active,
        limit,
        micheline,
        ...QueryParamsParsers.jsonParameter('key', key),
        ...QueryParamsParsers.jsonParameter('value', value),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get historical key
 */
export function contractsGetKey2(address, name, level, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get cycles count
 */
export function cyclesGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/cycles/count', {
        ...opts,
    }));
}
/**
 * Get cycles
 */
export function cyclesGet({ snapshotIndex, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('snapshotIndex', snapshotIndex),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get cycle by index
 */
export function cyclesGetByIndex(index, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles/${encodeURIComponent(index)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegates
 */
export function delegatesGet({ active, lastActivity, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('active', active),
        ...QueryParamsParsers.queryParameter('lastActivity', lastActivity),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegates count
 */
export function delegatesGetCount({ active, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('active', active),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegate by address
 */
export function delegatesGetByAddress(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/${encodeURIComponent(address)}`, {
        ...opts,
    }));
}
/**
 * Get domains count
 */
export function domainsGetCount({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('name', name),
        ...QueryParamsParsers.queryParameter('owner', owner),
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('reverse', reverse),
        ...QueryParamsParsers.queryParameter('expiration', expiration),
        ...QueryParamsParsers.jsonParameter('data', data),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get domains
 */
export function domainsGet({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('name', name),
        ...QueryParamsParsers.queryParameter('owner', owner),
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('reverse', reverse),
        ...QueryParamsParsers.queryParameter('expiration', expiration),
        ...QueryParamsParsers.jsonParameter('data', data),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get domain by name
 */
export function domainsGetByName(name, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/${encodeURIComponent(name)}`, {
        ...opts,
    }));
}
/**
 * Get contract events count
 */
export function eventsGetContractEventsCount({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('codeHash', codeHash),
        ...QueryParamsParsers.queryParameter('tag', tag),
        ...QueryParamsParsers.jsonParameter('payload', payload),
        ...QueryParamsParsers.queryParameter('transactionId', transactionId),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get contract events
 */
export function eventsGetContractEvents({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('codeHash', codeHash),
        ...QueryParamsParsers.queryParameter('tag', tag),
        ...QueryParamsParsers.jsonParameter('payload', payload),
        ...QueryParamsParsers.queryParameter('transactionId', transactionId),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get indexer head
 */
export function headGet(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/head', {
        ...opts,
    }));
}
/**
 * Inject operation
 */
export function helpersPostInject(body, { $async, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/helpers/inject${QS.query(QS.explode({
        async: $async,
    }))}`, oazapfts.json({
        ...opts,
        method: 'POST',
        body,
    })));
}
/**
 * Run script view
 */
export function helpersPostRunScriptView(contract, name, body, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/helpers/view/${encodeURIComponent(contract)}/${encodeURIComponent(name)}`, oazapfts.json({
        ...opts,
        method: 'POST',
        body,
    })));
}
/**
 * Get operations by hash
 */
export function operationsGetByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get operations by hash and counter
 */
export function operationsGetByHashCounter(hash, counter, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get operations by hash, counter and nonce
 */
export function operationsGetByHashCounterNonce(hash, counter, nonce, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get operation status
 */
export function operationsGetStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get endorsements
 */
export function operationsGetEndorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get endorsement by hash
 */
export function operationsGetEndorsementByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get endorsements count
 */
export function operationsGetEndorsementsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get preendorsements
 */
export function operationsGetPreendorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get preendorsement by hash
 */
export function operationsGetPreendorsementByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get preendorsements count
 */
export function operationsGetPreendorsementsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get ballots
 */
export function operationsGetBallots({ delegate, level, timestamp, epoch, period, proposal, vote, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('epoch', epoch),
        ...QueryParamsParsers.queryParameter('period', period),
        ...QueryParamsParsers.queryParameter('proposal', proposal),
        ...QueryParamsParsers.queryParameter('vote', vote),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get ballot by hash
 */
export function operationsGetBallotByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get ballots count
 */
export function operationsGetBallotsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get proposals
 */
export function operationsGetProposals({ delegate, level, timestamp, epoch, period, proposal, duplicated, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('epoch', epoch),
        ...QueryParamsParsers.queryParameter('period', period),
        ...QueryParamsParsers.queryParameter('proposal', proposal),
        ...QueryParamsParsers.queryParameter('duplicated', duplicated),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get proposal by hash
 */
export function operationsGetProposalByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get proposals count
 */
export function operationsGetProposalsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get activations
 */
export function operationsGetActivations({ account, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('account', account),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get activation by hash
 */
export function operationsGetActivationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get activations count
 */
export function operationsGetActivationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double baking
 */
export function operationsGetDoubleBaking({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('accuser', accuser),
        ...QueryParamsParsers.queryParameter('offender', offender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double baking by hash
 */
export function operationsGetDoubleBakingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double baking count
 */
export function operationsGetDoubleBakingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double endorsing
 */
export function operationsGetDoubleEndorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('accuser', accuser),
        ...QueryParamsParsers.queryParameter('offender', offender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double endorsing by hash
 */
export function operationsGetDoubleEndorsingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double endorsing count
 */
export function operationsGetDoubleEndorsingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double preendorsing
 */
export function operationsGetDoublePreendorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('accuser', accuser),
        ...QueryParamsParsers.queryParameter('offender', offender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double preendorsing by hash
 */
export function operationsGetDoublePreendorsingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get double preendorsing count
 */
export function operationsGetDoublePreendorsingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get nonce revelations
 */
export function operationsGetNonceRevelations({ anyof, baker, sender, level, revealedCycle, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('revealedCycle', revealedCycle),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get nonce revelation by hash
 */
export function operationsGetNonceRevelationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get nonce revelations count
 */
export function operationsGetNonceRevelationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get vdf revelations
 */
export function operationsGetVdfRevelations({ baker, level, cycle, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get vdf revelation by hash
 */
export function operationsGetVdfRevelationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get vdf revelations count
 */
export function operationsGetVdfRevelationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get drain delegate
 */
export function operationsGetDrainDelegateOps({ anyof, delegate, target, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('delegate', delegate),
        ...QueryParamsParsers.queryParameter('target', target),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get drain delegate by hash
 */
export function operationsGetDrainDelegateByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get drain delegate count
 */
export function operationsGetDrainDelegateOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegations
 */
export function operationsGetDelegations({ anyof, initiator, sender, prevDelegate, newDelegate, level, timestamp, senderCodeHash, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('initiator', initiator),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('prevDelegate', prevDelegate),
        ...QueryParamsParsers.queryParameter('newDelegate', newDelegate),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('senderCodeHash', senderCodeHash),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegation by hash
 */
export function operationsGetDelegationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegation status
 */
export function operationsGetDelegationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get delegations count
 */
export function operationsGetDelegationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get originations
 */
export function operationsGetOriginations({ anyof, initiator, sender, contractManager, contractDelegate, originatedContract, id, typeHash, codeHash, level, timestamp, senderCodeHash, anyCodeHash, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations${QS.query(QS.explode({
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('initiator', initiator),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('contractManager', contractManager),
        ...QueryParamsParsers.queryParameter('contractDelegate', contractDelegate),
        ...QueryParamsParsers.queryParameter('originatedContract', originatedContract),
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('typeHash', typeHash),
        ...QueryParamsParsers.queryParameter('codeHash', codeHash),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('senderCodeHash', senderCodeHash),
        ...QueryParamsParsers.queryParameter('anyCodeHash', anyCodeHash),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get origination by hash
 */
export function operationsGetOriginationByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get origination status
 */
export function operationsGetOriginationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get originations count
 */
export function operationsGetOriginationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transactions
 */
export function operationsGetTransactions({ anyof, initiator, sender, target, amount, id, level, timestamp, senderCodeHash, targetCodeHash, codeHash, entrypoint, parameter, hasInternals, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions${QS.query(QS.explode({
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('initiator', initiator),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('target', target),
        ...QueryParamsParsers.queryParameter('amount', amount),
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('senderCodeHash', senderCodeHash),
        ...QueryParamsParsers.queryParameter('targetCodeHash', targetCodeHash),
        ...QueryParamsParsers.queryParameter('codeHash', codeHash),
        ...QueryParamsParsers.queryParameter('entrypoint', entrypoint),
        ...QueryParamsParsers.jsonParameter('parameter', parameter),
        ...QueryParamsParsers.queryParameter('hasInternals', hasInternals),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transaction by hash
 */
export function operationsGetTransactionByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transaction by hash and counter
 */
export function operationsGetTransactionByHashCounter(hash, counter, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transaction by hash, counter and nonce
 */
export function operationsGetTransactionByHashCounterNonce(hash, counter, nonce, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transaction status
 */
export function operationsGetTransactionStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get transactions count
 */
export function operationsGetTransactionsCount({ anyof, initiator, sender, target, amount, level, timestamp, entrypoint, parameter, status, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/count${QS.query(QS.explode({
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('initiator', initiator),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('target', target),
        ...QueryParamsParsers.queryParameter('amount', amount),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('entrypoint', entrypoint),
        ...QueryParamsParsers.jsonParameter('parameter', parameter),
        ...QueryParamsParsers.queryParameter('status', status),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get reveals
 */
export function operationsGetReveals({ sender, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get reveal by hash
 */
export function operationsGetRevealByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get reveal status
 */
export function operationsGetRevealStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get reveals count
 */
export function operationsGetRevealsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get register constants
 */
export function operationsGetRegisterConstants({ sender, address, level, timestamp, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants${QS.query(QS.explode({
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('address', address),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get register constant by hash
 */
export function operationsGetRegisterConstantByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get register constant status
 */
export function operationsGetRegisterConstantStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get register constants count
 */
export function operationsGetRegisterConstantsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get set deposits limits
 */
export function operationsGetSetDepositsLimits({ sender, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get set deposits limit by hash
 */
export function operationsGetSetDepositsLimitByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get set deposits limit status
 */
export function operationsGetSetDepositsLimitStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get set deposits limits count
 */
export function operationsGetSetDepositsLimitsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transfer ticket
 */
export function operationsGetTransferTicketOps({ anyof, sender, target, ticketer, level, timestamp, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket${QS.query(QS.explode({
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('target', target),
        ...QueryParamsParsers.queryParameter('ticketer', ticketer),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transfer ticket by hash
 */
export function operationsGetTransferTicketOpsByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get transfer ticket status
 */
export function operationsGetTransferTicketStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get transfer ticket count
 */
export function operationsGetTransferTicketOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup commit
 */
export function operationsGetTxRollupCommitOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup commit by hash
 */
export function operationsGetTxRollupCommitOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup commit status
 */
export function operationsGetTxRollupCommitStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup commit count
 */
export function operationsGetTxRollupCommitOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup dispatch tickets
 */
export function operationsGetTxRollupDispatchTicketsOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup dispatch tickets by hash
 */
export function operationsGetTxRollupDispatchTicketsOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup dispatch tickets status
 */
export function operationsGetTxRollupDispatchTicketsStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup dispatch tickets count
 */
export function operationsGetTxRollupDispatchTicketsOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup finalize commitment
 */
export function operationsGetTxRollupFinalizeCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup finalize commitment by hash
 */
export function operationsGetTxRollupFinalizeCommitmentOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup finalize commitment status
 */
export function operationsGetTxRollupFinalizeCommitmentStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup finalize commitment count
 */
export function operationsGetTxRollupFinalizeCommitmentOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup origination
 */
export function operationsGetTxRollupOriginationOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup origination by hash
 */
export function operationsGetTxRollupOriginationOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup origination status
 */
export function operationsGetTxRollupOriginationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup origination count
 */
export function operationsGetTxRollupOriginationOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup rejection
 */
export function operationsGetTxRollupRejectionOps({ anyof, sender, committer, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('committer', committer),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup rejection by hash
 */
export function operationsGetTxRollupRejectionOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup rejection status
 */
export function operationsGetTxRollupRejectionStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup rejection count
 */
export function operationsGetTxRollupRejectionOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup remove commitment
 */
export function operationsGetTxRollupRemoveCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup remove commitment by hash
 */
export function operationsGetTxRollupRemoveCommitmentOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup remove commitment status
 */
export function operationsGetTxRollupRemoveCommitmentStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup remove commitment count
 */
export function operationsGetTxRollupRemoveCommitmentOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup return bond
 */
export function operationsGetTxRollupReturnBondOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup return bond by hash
 */
export function operationsGetTxRollupReturnBondOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup return bond status
 */
export function operationsGetTxRollupReturnBondStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup return bond count
 */
export function operationsGetTxRollupReturnBondOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup submit batch
 */
export function operationsGetTxRollupSubmitBatchOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('rollup', rollup),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup submit batch by hash
 */
export function operationsGetTxRollupSubmitBatchOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tx rollup submit batch status
 */
export function operationsGetTxRollupSubmitBatchStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}/status`, {
        ...opts,
    }));
}
/**
 * Get tx rollup submit batch count
 */
export function operationsGetTxRollupSubmitBatchOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get increase paid storage
 */
export function operationsGetIncreasePaidStorageOps({ sender, contract, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get increase paid storage by hash
 */
export function operationsGetIncreasePaidStorageByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get increase paid storage count
 */
export function operationsGetIncreasePaidStorageCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get update consensus key
 */
export function operationsGetUpdateConsensusKeyOps({ sender, activationCycle, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('sender', sender),
        ...QueryParamsParsers.queryParameter('activationCycle', activationCycle),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get update consensus key by hash
 */
export function operationsGetUpdateConsensusKeyByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get update consensus key count
 */
export function operationsGetUpdateConsensusKeyOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get migrations
 */
export function operationsGetMigrations({ account, kind, balanceChange, id, level, timestamp, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations${QS.query(QS.explode({
        limit,
        micheline,
        quote,
        ...QueryParamsParsers.queryParameter('account', account),
        ...QueryParamsParsers.queryParameter('kind', kind),
        ...QueryParamsParsers.queryParameter('balanceChange', balanceChange),
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get migration by id
 */
export function operationsGetMigrationById(id, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/${encodeURIComponent(id)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get migrations count
 */
export function operationsGetMigrationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get revelation penalties
 */
export function operationsGetRevelationPenalties({ baker, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get revelation penalty by id
 */
export function operationsGetRevelationPenaltyById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get revelation penalties count
 */
export function operationsGetRevelationPenaltiesCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baking
 */
export function operationsGetBaking({ baker, anyof, proposer, producer, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('proposer', proposer),
        ...QueryParamsParsers.queryParameter('producer', producer),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baking by id
 */
export function operationsGetBakingById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baking count
 */
export function operationsGetBakingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get endorsing rewards
 */
export function operationsGetEndorsingRewards({ baker, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get endorsing reward by id
 */
export function operationsGetEndorsingRewardById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get endorsing rewards count
 */
export function operationsGetEndorsingRewardsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get protocols count
 */
export function protocolsGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/protocols/count', {
        ...opts,
    }));
}
/**
 * Get protocols
 */
export function protocolsGet({ sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get current protocol
 */
export function protocolsGetCurrent(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/protocols/current', {
        ...opts,
    }));
}
/**
 * Get protocol by code
 */
export function protocolsGetByCode(code, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(code)}`, {
        ...opts,
    }));
}
/**
 * Get protocol by hash
 */
export function protocolsGetByHash(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(hash)}`, {
        ...opts,
    }));
}
/**
 * Get protocol by cycle
 */
export function protocolsGetByCycle(cycle, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/cycles/${encodeURIComponent(cycle)}`, {
        ...opts,
    }));
}
/**
 * Get quotes count
 */
export function quotesGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/quotes/count', {
        ...opts,
    }));
}
/**
 * Get last quote
 */
export function quotesGetLast(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/quotes/last', {
        ...opts,
    }));
}
/**
 * Get quotes
 */
export function quotesGet({ level, timestamp, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quotes${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baker cycle rewards count
 */
export function rewardsGetBakerRewardsCount(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/count`, {
        ...opts,
    }));
}
/**
 * Get baker cycle rewards
 */
export function rewardsGetBakerRewards(address, { cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baker cycle rewards by cycle
 */
export function rewardsGetBakerRewardsByCycle(address, cycle, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegator cycle rewards count
 */
export function rewardsGetDelegatorRewardsCount(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/count`, {
        ...opts,
    }));
}
/**
 * Get delegator cycle rewards
 */
export function rewardsGetDelegatorRewards(address, { cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get delegator cycle rewards by cycle
 */
export function rewardsGetDelegatorRewardsByCycle(address, cycle, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        quote,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get reward split
 */
export function rewardsGetRewardSplit(baker, cycle, { offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        offset,
        limit,
    }))}`, {
        ...opts,
    }));
}
/**
 * Get reward split delegator
 */
export function rewardsGetRewardSplitDelegator(baker, cycle, delegator, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}/${encodeURIComponent(delegator)}`, {
        ...opts,
    }));
}
/**
 * Get rights count
 */
export function rightsGetCount({ $type, baker, cycle, level, slots, round, priority, status, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rights/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('type', $type),
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('slots', slots),
        ...QueryParamsParsers.queryParameter('round', round),
        ...QueryParamsParsers.queryParameter('priority', priority),
        ...QueryParamsParsers.queryParameter('status', status),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get rights
 */
export function rightsGet({ $type, baker, cycle, level, slots, round, priority, status, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rights${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('type', $type),
        ...QueryParamsParsers.queryParameter('baker', baker),
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('slots', slots),
        ...QueryParamsParsers.queryParameter('round', round),
        ...QueryParamsParsers.queryParameter('priority', priority),
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get baker software
 */
export function softwareGet({ select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/software${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get software count
 */
export function softwareGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/software/count', {
        ...opts,
    }));
}
/**
 * Get statistics
 */
export function statisticsGet({ level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get daily statistics
 */
export function statisticsGetDaily({ date, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/daily${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('date', date),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get cyclic statistics
 */
export function statisticsGetCyclesAll({ cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/cyclic${QS.query(QS.explode({
        limit,
        quote,
        ...QueryParamsParsers.queryParameter('cycle', cycle),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get current statistics
 */
export function statisticsGetCycles({ select, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/current${QS.query(QS.explode({
        quote,
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tokens count
 */
export function tokensGetTokensCount({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/count${QS.query(QS.explode({
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('tokenId', tokenId),
        ...QueryParamsParsers.queryParameter('standard', standard),
        ...QueryParamsParsers.queryParameter('firstMinter', firstMinter),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
        ...QueryParamsParsers.jsonParameter('metadata', metadata),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get tokens
 */
export function tokensGetTokens({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('contract', contract),
        ...QueryParamsParsers.queryParameter('tokenId', tokenId),
        ...QueryParamsParsers.queryParameter('standard', standard),
        ...QueryParamsParsers.queryParameter('firstMinter', firstMinter),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
        ...QueryParamsParsers.jsonParameter('metadata', metadata),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get token balances count
 */
export function tokensGetTokenBalancesCount({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances/count${QS.query(QS.explode({
        'token.HasFilters': tokenHasFilters,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('account', account),
        ...QueryParamsParsers.queryParameter('token.id', tokenId),
        ...QueryParamsParsers.queryParameter('token.contract', tokenContract),
        ...QueryParamsParsers.queryParameter('token.tokenId', tokenTokenId),
        ...QueryParamsParsers.queryParameter('token.standard', tokenStandard),
        ...QueryParamsParsers.jsonParameter('token.metadata', tokenMetadata),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get token balances
 */
export function tokensGetTokenBalances({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances${QS.query(QS.explode({
        'token.HasFilters': tokenHasFilters,
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('account', account),
        ...QueryParamsParsers.queryParameter('token.id', tokenId),
        ...QueryParamsParsers.queryParameter('token.contract', tokenContract),
        ...QueryParamsParsers.queryParameter('token.tokenId', tokenTokenId),
        ...QueryParamsParsers.queryParameter('token.standard', tokenStandard),
        ...QueryParamsParsers.jsonParameter('token.metadata', tokenMetadata),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('firstLevel', firstLevel),
        ...QueryParamsParsers.queryParameter('firstTime', firstTime),
        ...QueryParamsParsers.queryParameter('lastLevel', lastLevel),
        ...QueryParamsParsers.queryParameter('lastTime', lastTime),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get token transfers count
 */
export function tokensGetTokenTransfersCount({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers/count${QS.query(QS.explode({
        'token.HasFilters': tokenHasFilters,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('token.id', tokenId),
        ...QueryParamsParsers.queryParameter('token.contract', tokenContract),
        ...QueryParamsParsers.queryParameter('token.tokenId', tokenTokenId),
        ...QueryParamsParsers.queryParameter('token.standard', tokenStandard),
        ...QueryParamsParsers.jsonParameter('token.metadata', tokenMetadata),
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('from', $from),
        ...QueryParamsParsers.queryParameter('to', to),
        ...QueryParamsParsers.queryParameter('amount', amount),
        ...QueryParamsParsers.queryParameter('transactionId', transactionId),
        ...QueryParamsParsers.queryParameter('originationId', originationId),
        ...QueryParamsParsers.queryParameter('migrationId', migrationId),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get token transfers
 */
export function tokensGetTokenTransfers({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers${QS.query(QS.explode({
        'token.HasFilters': tokenHasFilters,
        limit,
        ...QueryParamsParsers.queryParameter('id', id),
        ...QueryParamsParsers.queryParameter('level', level),
        ...QueryParamsParsers.queryParameter('timestamp', timestamp),
        ...QueryParamsParsers.queryParameter('token.id', tokenId),
        ...QueryParamsParsers.queryParameter('token.contract', tokenContract),
        ...QueryParamsParsers.queryParameter('token.tokenId', tokenTokenId),
        ...QueryParamsParsers.queryParameter('token.standard', tokenStandard),
        ...QueryParamsParsers.jsonParameter('token.metadata', tokenMetadata),
        ...QueryParamsParsers.anyofParameter('anyof', anyof),
        ...QueryParamsParsers.queryParameter('from', $from),
        ...QueryParamsParsers.queryParameter('to', to),
        ...QueryParamsParsers.queryParameter('amount', amount),
        ...QueryParamsParsers.queryParameter('transactionId', transactionId),
        ...QueryParamsParsers.queryParameter('originationId', originationId),
        ...QueryParamsParsers.queryParameter('migrationId', migrationId),
        ...QueryParamsParsers.queryParameter('indexedAt', indexedAt),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get historical token balances
 */
export function tokensGetTokenBalances2(level, { account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/historical_balances/${encodeURIComponent(level)}${QS.query(QS.explode({
        'token.HasFilters': tokenHasFilters,
        limit,
        ...QueryParamsParsers.queryParameter('account', account),
        ...QueryParamsParsers.queryParameter('token.id', tokenId),
        ...QueryParamsParsers.queryParameter('token.contract', tokenContract),
        ...QueryParamsParsers.queryParameter('token.tokenId', tokenTokenId),
        ...QueryParamsParsers.queryParameter('token.standard', tokenStandard),
        ...QueryParamsParsers.jsonParameter('token.metadata', tokenMetadata),
        ...QueryParamsParsers.queryParameter('balance', balance),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
        ...QueryParamsParsers.queryParameter('select', select),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get proposals count
 */
export function votingGetProposalsCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/proposals/count', {
        ...opts,
    }));
}
/**
 * Get proposals
 */
export function votingGetProposals({ hash, epoch, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('hash', hash),
        ...QueryParamsParsers.queryParameter('epoch', epoch),
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get proposal by hash
 */
export function votingGetProposalByHash(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals/${encodeURIComponent(hash)}`, {
        ...opts,
    }));
}
/**
 * Get voting periods
 */
export function votingGetPeriods({ select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('select', select),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get voting period by index
 */
export function votingGetPeriod(index, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}`, {
        ...opts,
    }));
}
/**
 * Get current voting period
 */
export function votingGetCurrentPeriod(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/periods/current', {
        ...opts,
    }));
}
/**
 * Get period voters
 */
export function votingGetPeriodVoters(index, { status, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get period voter
 */
export function votingGetPeriodVoter(index, address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters/${encodeURIComponent(address)}`, {
        ...opts,
    }));
}
/**
 * Get current period voters
 */
export function votingGetPeriodVoters2({ status, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('status', status),
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get current period voter
 */
export function votingGetPeriodVoter2(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters/${encodeURIComponent(address)}`, {
        ...opts,
    }));
}
/**
 * Get voting epochs
 */
export function votingGetEpochs({ sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs${QS.query(QS.explode({
        limit,
        ...QueryParamsParsers.queryParameter('sort', sort),
        ...QueryParamsParsers.queryParameter('offset', offset),
    }))}`, {
        ...opts,
    }));
}
/**
 * Get voting epoch by index
 */
export function votingGetEpoch(index, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs/${encodeURIComponent(index)}`, {
        ...opts,
    }));
}
/**
 * Get current voting epoch
 */
export function votingGetCurrentEpoch(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/epochs/current', {
        ...opts,
    }));
}
/**
 * Get latest voting
 */
export function votingGetLatestVoting(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/epochs/latest_voting', {
        ...opts,
    }));
}
//# sourceMappingURL=data:application/json;base64,