/**
 * DO NOT MODIFY - This file has been generated using @tzkt/oazapfts.
 * See https://www.npmjs.com/package/@tzkt/oazapfts
 */
import * as Oazapfts from '@tzkt/oazapfts/runtime';
export declare const defaults: Oazapfts.RequestOpts;
export declare const servers: {
    server1: string;
};
export type Int32Parameter = {
    eq?: number;
    ne?: number;
    gt?: number;
    ge?: number;
    lt?: number;
    le?: number;
    in?: number[];
    ni?: number[];
};
export type AddressParameter = {
    eq?: string;
    ne?: string;
    in?: string[];
    ni?: string[];
};
export type AccountTypeParameter = {
    eq?: 'user' | 'contract' | 'delegate';
    ne?: 'user' | 'contract' | 'delegate';
};
export type ContractKindParameter = {
    eq?: 'delegator_contract' | 'smart_contract';
    ne?: 'delegator_contract' | 'smart_contract';
    in?: ('delegator_contract' | 'smart_contract')[];
    ni?: ('delegator_contract' | 'smart_contract')[];
};
export type AccountParameter = {
    eq?: string;
    ne?: string;
    in?: string[];
    ni?: string[];
    eqx?: string;
    nex?: string;
    null?: boolean;
    inHasNull?: boolean;
    niHasNull?: boolean;
};
export type Int64Parameter = {
    eq?: number;
    ne?: number;
    gt?: number;
    ge?: number;
    lt?: number;
    le?: number;
    in?: number[];
    ni?: number[];
};
export type BoolParameter = {
    eq?: boolean;
    null?: boolean;
};
export type SelectParameter = {
    fields?: string[];
    values?: string[];
};
export type SortParameter = {
    asc?: string;
    desc?: string;
};
export type OffsetParameter = {
    el?: number;
    pg?: number;
    cr?: number;
};
export type Account = {
    type: string;
};
export type DelegateInfo = {
    alias?: string | null;
    address?: string | null;
    active?: boolean;
};
export type RelatedContract = {
    kind?: string | null;
    alias?: string | null;
    address?: string | null;
    balance?: number;
    delegate?: DelegateInfo | null;
    creationLevel?: number;
    creationTime?: string | null;
};
export type Delegator = {
    type?: string | null;
    alias?: string | null;
    address?: string | null;
    balance?: number;
    delegationLevel?: number;
    delegationTime?: string;
};
export type DateTimeParameter = {
    eq?: string;
    ne?: string;
    gt?: string;
    ge?: string;
    lt?: string;
    le?: string;
    in?: string[];
    ni?: string[];
};
export type StringParameter = {
    eq?: string;
    ne?: string;
    as?: string;
    un?: string;
    in?: string[];
    ni?: string[];
    null?: boolean;
};
export type JsonParameter = {
    eq?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    ne?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    gt?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    ge?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    lt?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    le?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    as?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    un?: {
        jsonValue: string;
        jsonPath?: string;
    } | null;
    in?: {
        jsonValue: string[];
        jsonPath?: string;
    } | null;
    ni?: {
        jsonValue: string[];
        jsonPath?: string;
    } | null;
    null?: {
        jsonValue: boolean;
        jsonPath?: string;
    };
};
export type OperationStatusParameter = {
    eq?: 'applied' | 'failed' | 'backtracked' | 'skipped';
    ne?: 'applied' | 'failed' | 'backtracked' | 'skipped';
};
export type SortMode = 'Ascending' | 'Descending';
export type MichelineFormat = 'Json' | 'JsonString' | 'Raw' | 'RawString';
export type Symbols = 'None' | 'Btc' | 'Eur' | 'Usd' | 'Cny' | 'Jpy' | 'Krw' | 'Eth' | 'Gbp';
export type Operation = {
    type: string;
};
export type QuoteShort = {
    btc?: number | null;
    eur?: number | null;
    usd?: number | null;
    cny?: number | null;
    jpy?: number | null;
    krw?: number | null;
    eth?: number | null;
    gbp?: number | null;
};
export type HistoricalBalance = {
    level?: number;
    timestamp?: string;
    balance?: number;
    quote?: QuoteShort | null;
};
export type BigMapTagsParameter = {
    eq?: ('metadata' | 'token_metadata' | 'ledger')[];
    any?: ('metadata' | 'token_metadata' | 'ledger')[];
    all?: ('metadata' | 'token_metadata' | 'ledger')[];
};
export type Alias = {
    alias?: string | null;
    address?: string | null;
};
export type BigMap = {
    ptr?: number;
    contract?: Alias | null;
    path?: string | null;
    tags?: string[] | null;
    active?: boolean;
    firstLevel?: number;
    lastLevel?: number;
    totalKeys?: number;
    activeKeys?: number;
    updates?: number;
    keyType?: any | null;
    valueType?: any | null;
};
export type BigMapActionParameter = {
    eq?: 'allocate' | 'add_key' | 'update_key' | 'remove_key' | 'remove';
    ne?: 'allocate' | 'add_key' | 'update_key' | 'remove_key' | 'remove';
    in?: ('allocate' | 'add_key' | 'update_key' | 'remove_key' | 'remove')[];
    ni?: ('allocate' | 'add_key' | 'update_key' | 'remove_key' | 'remove')[];
};
export type TimestampParameter = {
    eq?: string;
    ne?: string;
    gt?: string;
    ge?: string;
    lt?: string;
    le?: string;
    in?: string[];
    ni?: string[];
};
export type BigMapKeyShort = {
    hash?: string | null;
    key?: any | null;
    value?: any | null;
};
export type BigMapUpdate = {
    id?: number;
    level?: number;
    timestamp?: string;
    bigmap?: number;
    contract?: Alias | null;
    path?: string | null;
    action?: string | null;
    content?: BigMapKeyShort | null;
};
export type PrimType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154;
export type MichelineType = 0 | 32 | 64 | 96 | 128;
export type IMicheline = {
    type?: MichelineType;
};
export type AnnotationType = 0 | 64 | 128 | 192;
export type IAnnotation = {
    type?: AnnotationType;
    value?: string | null;
};
export type MichelinePrim = {
    prim?: PrimType;
    args?: IMicheline[] | null;
    annots?: IAnnotation[] | null;
};
export type BigMapKey = {
    id?: number;
    active?: boolean;
    hash?: string | null;
    key?: any | null;
    value?: any | null;
    firstLevel?: number;
    lastLevel?: number;
    updates?: number;
};
export type BigMapKeyUpdate = {
    id?: number;
    level?: number;
    timestamp?: string;
    action?: string | null;
    value?: any | null;
};
export type BigMapKeyHistorical = {
    id?: number;
    active?: boolean;
    hash?: string | null;
    key?: any | null;
    value?: any | null;
};
export type SoftwareAlias = {
    version?: string | null;
    date?: string;
};
export type EndorsementOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    delegate?: Alias | null;
    slots?: number;
    deposit?: number;
    rewards?: number;
    quote?: QuoteShort | null;
};
export type PreendorsementOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    delegate?: Alias | null;
    slots?: number;
    quote?: QuoteShort | null;
};
export type PeriodInfo = {
    index?: number;
    epoch?: number;
    kind?: string | null;
    firstLevel?: number;
    lastLevel?: number;
};
export type ProposalAlias = {
    alias?: string | null;
    hash?: string | null;
};
export type ProposalOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    period?: PeriodInfo | null;
    proposal?: ProposalAlias | null;
    delegate?: Alias | null;
    votingPower?: number;
    duplicated?: boolean;
    quote?: QuoteShort | null;
    rolls?: number;
};
export type BallotOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    period?: PeriodInfo | null;
    proposal?: ProposalAlias | null;
    delegate?: Alias | null;
    votingPower?: number;
    vote?: string | null;
    quote?: QuoteShort | null;
    rolls?: number;
};
export type ActivationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    account?: Alias | null;
    balance?: number;
    quote?: QuoteShort | null;
};
export type DoubleBakingOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    accusedLevel?: number;
    accuser?: Alias | null;
    accuserReward?: number;
    offender?: Alias | null;
    offenderLoss?: number;
    quote?: QuoteShort | null;
    accuserRewards?: number;
    offenderLostDeposits?: number;
    offenderLostRewards?: number;
    offenderLostFees?: number;
};
export type DoubleEndorsingOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    accusedLevel?: number;
    accuser?: Alias | null;
    accuserReward?: number;
    offender?: Alias | null;
    offenderLoss?: number;
    quote?: QuoteShort | null;
    accuserRewards?: number;
    offenderLostDeposits?: number;
    offenderLostRewards?: number;
    offenderLostFees?: number;
};
export type DoublePreendorsingOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    accusedLevel?: number;
    accuser?: Alias | null;
    accuserReward?: number;
    offender?: Alias | null;
    offenderLoss?: number;
    quote?: QuoteShort | null;
};
export type NonceRevelationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    baker?: Alias | null;
    sender?: Alias | null;
    revealedLevel?: number;
    revealedCycle?: number;
    nonce?: string | null;
    reward?: number;
    quote?: QuoteShort | null;
    bakerRewards?: number;
};
export type VdfRevelationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    baker?: Alias | null;
    cycle?: number;
    solution?: string | null;
    proof?: string | null;
    reward?: number;
    quote?: QuoteShort | null;
};
export type OperationError = {
    type: string;
};
export type DelegationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    counter?: number;
    initiator?: Alias | null;
    sender?: Alias | null;
    senderCodeHash?: number | null;
    nonce?: number | null;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    amount?: number;
    prevDelegate?: Alias | null;
    newDelegate?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type BigMapDiff = {
    bigmap?: number;
    path?: string | null;
    action?: string | null;
    content?: BigMapKeyShort | null;
};
export type OriginatedContract = {
    kind?: string | null;
    alias?: string | null;
    address?: string | null;
    typeHash?: number;
    codeHash?: number;
    tzips?: string[] | null;
};
export type OriginationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    counter?: number;
    initiator?: Alias | null;
    sender?: Alias | null;
    senderCodeHash?: number | null;
    nonce?: number | null;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    allocationFee?: number;
    contractBalance?: number;
    contractManager?: Alias | null;
    contractDelegate?: Alias | null;
    code?: any | null;
    storage?: any | null;
    diffs?: BigMapDiff[] | null;
    status?: string | null;
    errors?: OperationError[] | null;
    originatedContract?: OriginatedContract | null;
    tokenTransfersCount?: number | null;
    quote?: QuoteShort | null;
};
export type TxParameter = {
    entrypoint?: string | null;
    value?: any | null;
};
export type TransactionOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    counter?: number;
    initiator?: Alias | null;
    sender?: Alias | null;
    senderCodeHash?: number | null;
    nonce?: number | null;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    allocationFee?: number;
    target?: Alias | null;
    targetCodeHash?: number | null;
    amount?: number;
    parameter?: TxParameter | null;
    storage?: any | null;
    diffs?: BigMapDiff[] | null;
    status?: string | null;
    errors?: OperationError[] | null;
    hasInternals?: boolean;
    tokenTransfersCount?: number | null;
    eventsCount?: number | null;
    quote?: QuoteShort | null;
};
export type RevealOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type RegisterConstantOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    status?: string | null;
    address?: string | null;
    value?: any | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type SetDepositsLimitOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    status?: string | null;
    limit?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type RawJson = Record<string, unknown>;
export type TransferTicketOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    target?: Alias | null;
    ticketer?: Alias | null;
    amount?: string | null;
    entrypoint?: string | null;
    contentType?: RawJson | null;
    content?: any | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupCommitOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    rollup?: Alias | null;
    bond?: number;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupDispatchTicketsOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    rollup?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupFinalizeCommitmentOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    rollup?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupOriginationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    allocationFee?: number;
    rollup?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupRejectionOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    rollup?: Alias | null;
    committer?: Alias | null;
    reward?: number;
    loss?: number;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupRemoveCommitmentOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    rollup?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupReturnBondOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    rollup?: Alias | null;
    bond?: number;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type TxRollupSubmitBatchOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    rollup?: Alias | null;
    status?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type IncreasePaidStorageOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    storageUsed?: number;
    bakerFee?: number;
    storageFee?: number;
    status?: string | null;
    contract?: Alias | null;
    amount?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type UpdateConsensusKeyOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    sender?: Alias | null;
    counter?: number;
    gasLimit?: number;
    gasUsed?: number;
    storageLimit?: number;
    bakerFee?: number;
    status?: string | null;
    activationCycle?: number;
    publicKey?: string | null;
    publicKeyHash?: string | null;
    errors?: OperationError[] | null;
    quote?: QuoteShort | null;
};
export type DrainDelegateOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    hash?: string | null;
    delegate?: Alias | null;
    target?: Alias | null;
    amount?: number;
    fee?: number;
    quote?: QuoteShort | null;
};
export type MigrationOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    kind?: string | null;
    account?: Alias | null;
    balanceChange?: number;
    storage?: any | null;
    diffs?: BigMapDiff[] | null;
    tokenTransfersCount?: number | null;
    quote?: QuoteShort | null;
};
export type RevelationPenaltyOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    baker?: Alias | null;
    missedLevel?: number;
    loss?: number;
    quote?: QuoteShort | null;
    lostReward?: number;
    lostFees?: number;
};
export type EndorsingRewardOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    baker?: Alias | null;
    expected?: number;
    received?: number;
    quote?: QuoteShort | null;
};
export type Block = {
    cycle?: number;
    level?: number;
    hash?: string | null;
    timestamp?: string;
    proto?: number;
    payloadRound?: number;
    blockRound?: number;
    validations?: number;
    deposit?: number;
    reward?: number;
    bonus?: number;
    fees?: number;
    nonceRevealed?: boolean;
    proposer?: Alias | null;
    producer?: Alias | null;
    software?: SoftwareAlias | null;
    lbToggle?: boolean | null;
    lbToggleEma?: number;
    endorsements?: EndorsementOperation[] | null;
    preendorsements?: PreendorsementOperation[] | null;
    proposals?: ProposalOperation[] | null;
    ballots?: BallotOperation[] | null;
    activations?: ActivationOperation[] | null;
    doubleBaking?: DoubleBakingOperation[] | null;
    doubleEndorsing?: DoubleEndorsingOperation[] | null;
    doublePreendorsing?: DoublePreendorsingOperation[] | null;
    nonceRevelations?: NonceRevelationOperation[] | null;
    vdfRevelations?: VdfRevelationOperation[] | null;
    delegations?: DelegationOperation[] | null;
    originations?: OriginationOperation[] | null;
    transactions?: TransactionOperation[] | null;
    reveals?: RevealOperation[] | null;
    registerConstants?: RegisterConstantOperation[] | null;
    setDepositsLimits?: SetDepositsLimitOperation[] | null;
    transferTicketOps?: TransferTicketOperation[] | null;
    txRollupCommitOps?: TxRollupCommitOperation[] | null;
    txRollupDispatchTicketsOps?: TxRollupDispatchTicketsOperation[] | null;
    txRollupFinalizeCommitmentOps?: TxRollupFinalizeCommitmentOperation[] | null;
    txRollupOriginationOps?: TxRollupOriginationOperation[] | null;
    txRollupRejectionOps?: TxRollupRejectionOperation[] | null;
    txRollupRemoveCommitmentOps?: TxRollupRemoveCommitmentOperation[] | null;
    txRollupReturnBondOps?: TxRollupReturnBondOperation[] | null;
    txRollupSubmitBatchOps?: TxRollupSubmitBatchOperation[] | null;
    increasePaidStorageOps?: IncreasePaidStorageOperation[] | null;
    updateConsensusKeyOps?: UpdateConsensusKeyOperation[] | null;
    drainDelegateOps?: DrainDelegateOperation[] | null;
    migrations?: MigrationOperation[] | null;
    revelationPenalties?: RevelationPenaltyOperation[] | null;
    endorsingRewards?: EndorsingRewardOperation[] | null;
    quote?: QuoteShort | null;
    priority?: number;
    baker?: Alias | null;
    lbEscapeVote?: boolean;
    lbEscapeEma?: number;
};
export type Commitment = {
    address?: string | null;
    balance?: number;
    activated?: boolean;
    activationLevel?: number | null;
    activationTime?: string | null;
    activatedAccount?: Alias | null;
};
export type Int32NullParameter = {
    eq?: number;
    ne?: number;
    gt?: number;
    ge?: number;
    lt?: number;
    le?: number;
    in?: number[];
    ni?: number[];
    null?: boolean;
};
export type ExpressionParameter = {
    eq?: string;
    ne?: string;
    in?: string[];
    ni?: string[];
};
export type Constant = {
    address?: string | null;
    value?: any | null;
    size?: number;
    refs?: number;
    creator?: Alias | null;
    creationLevel?: number;
    creationTime?: string;
    extras?: any | null;
    metadata?: RawJson | null;
};
export type ContractTagsParameter = {
    eq?: ('fa1' | 'fa12' | 'fa2')[];
    any?: ('fa1' | 'fa12' | 'fa2')[];
    all?: ('fa1' | 'fa12' | 'fa2')[];
};
export type CreatorInfo = {
    alias?: string | null;
    address?: string | null;
};
export type ManagerInfo = {
    alias?: string | null;
    address?: string | null;
    publicKey?: string | null;
};
export type Contract = Account & {
    id?: number;
    type?: string | null;
    address?: string | null;
    kind?: string | null;
    tzips?: string[] | null;
    alias?: string | null;
    balance?: number;
    creator?: CreatorInfo | null;
    manager?: ManagerInfo | null;
    delegate?: DelegateInfo | null;
    delegationLevel?: number | null;
    delegationTime?: string | null;
    numContracts?: number;
    activeTokensCount?: number;
    tokensCount?: number;
    tokenBalancesCount?: number;
    tokenTransfersCount?: number;
    numDelegations?: number;
    numOriginations?: number;
    numTransactions?: number;
    numReveals?: number;
    numMigrations?: number;
    transferTicketCount?: number;
    increasePaidStorageCount?: number;
    eventsCount?: number;
    firstActivity?: number;
    firstActivityTime?: string;
    lastActivity?: number;
    lastActivityTime?: string;
    storage?: any | null;
    typeHash?: number;
    codeHash?: number;
    metadata?: any | null;
    extras?: any | null;
};
export type EntrypointInterface = {
    name?: string | null;
    parameterSchema?: RawJson | null;
};
export type BigMapInterface = {
    path?: string | null;
    name?: string | null;
    keySchema?: RawJson | null;
    valueSchema?: RawJson | null;
};
export type EventInterface = {
    tag?: string | null;
    eventSchema?: RawJson | null;
};
export type ContractInterface = {
    storageSchema?: RawJson | null;
    entrypoints?: EntrypointInterface[] | null;
    bigMaps?: BigMapInterface[] | null;
    events?: EventInterface[] | null;
};
export type Entrypoint = {
    name?: string | null;
    jsonParameters?: any | null;
    michelineParameters?: IMicheline | null;
    michelsonParameters?: string | null;
    unused?: boolean;
};
export type ContractView = {
    name?: string | null;
    jsonParameterType?: any | null;
    jsonReturnType?: any | null;
    michelineParameterType?: IMicheline | null;
    michelineReturnType?: IMicheline | null;
    michelsonParameterType?: string | null;
    michelsonReturnType?: string | null;
};
export type SourceOperation = {
    type?: string | null;
    hash?: string | null;
    counter?: number | null;
    nonce?: number | null;
    parameter?: TxParameter | null;
};
export type StorageRecord = {
    id?: number;
    level?: number;
    timestamp?: string;
    operation?: SourceOperation | null;
    value?: any | null;
};
export type Cycle = {
    index?: number;
    firstLevel?: number;
    startTime?: string;
    lastLevel?: number;
    endTime?: string;
    snapshotIndex?: number;
    snapshotLevel?: number;
    randomSeed?: string | null;
    totalBakers?: number;
    totalStaking?: number;
    totalDelegators?: number;
    totalDelegated?: number;
    selectedBakers?: number;
    selectedStake?: number;
    quote?: QuoteShort | null;
    totalRolls?: number;
};
export type Delegate = Account & {
    id?: number;
    type?: string | null;
    address?: string | null;
    active?: boolean;
    alias?: string | null;
    publicKey?: string | null;
    revealed?: boolean;
    balance?: number;
    rollupBonds?: number;
    frozenDeposit?: number;
    frozenDepositLimit?: number | null;
    counter?: number;
    activationLevel?: number;
    activationTime?: string;
    deactivationLevel?: number | null;
    deactivationTime?: string | null;
    stakingBalance?: number;
    delegatedBalance?: number;
    numContracts?: number;
    rollupsCount?: number;
    activeTokensCount?: number;
    tokenBalancesCount?: number;
    tokenTransfersCount?: number;
    numDelegators?: number;
    numBlocks?: number;
    numEndorsements?: number;
    numPreendorsements?: number;
    numBallots?: number;
    numProposals?: number;
    numActivations?: number;
    numDoubleBaking?: number;
    numDoubleEndorsing?: number;
    numDoublePreendorsing?: number;
    numNonceRevelations?: number;
    vdfRevelationsCount?: number;
    numRevelationPenalties?: number;
    numEndorsingRewards?: number;
    numDelegations?: number;
    numOriginations?: number;
    numTransactions?: number;
    numReveals?: number;
    numRegisterConstants?: number;
    numSetDepositsLimits?: number;
    numMigrations?: number;
    txRollupOriginationCount?: number;
    txRollupSubmitBatchCount?: number;
    txRollupCommitCount?: number;
    txRollupReturnBondCount?: number;
    txRollupFinalizeCommitmentCount?: number;
    txRollupRemoveCommitmentCount?: number;
    txRollupRejectionCount?: number;
    txRollupDispatchTicketsCount?: number;
    transferTicketCount?: number;
    increasePaidStorageCount?: number;
    updateConsensusKeyCount?: number;
    drainDelegateCount?: number;
    firstActivity?: number;
    firstActivityTime?: string;
    lastActivity?: number;
    lastActivityTime?: string;
    extras?: any | null;
    software?: SoftwareAlias | null;
    frozenDeposits?: number;
    frozenRewards?: number;
    frozenFees?: number;
    metadata?: RawJson | null;
};
export type AddressNullParameter = {
    eq?: string;
    ne?: string;
    in?: string[];
    ni?: string[];
    null?: boolean;
};
export type SelectionParameter = {
    fields?: string[];
    values?: string[];
};
export type Domain = {
    id?: number;
    level?: number;
    name?: string | null;
    owner?: Alias | null;
    address?: Alias | null;
    reverse?: boolean;
    expiration?: string;
    data?: RawJson | null;
    firstLevel?: number;
    firstTime?: string;
    lastLevel?: number;
    lastTime?: string;
};
export type ContractEvent = {
    id?: number;
    level?: number;
    timestamp?: string;
    contract?: Alias | null;
    codeHash?: number;
    tag?: string | null;
    payload?: any | null;
    transactionId?: number;
    type?: any | null;
    rawPayload?: any | null;
};
export type State = {
    chain?: string | null;
    chainId?: string | null;
    cycle?: number;
    level?: number;
    hash?: string | null;
    protocol?: string | null;
    nextProtocol?: string | null;
    timestamp?: string;
    votingEpoch?: number;
    votingPeriod?: number;
    knownLevel?: number;
    lastSync?: string;
    synced?: boolean;
    quoteLevel?: number;
    quoteBtc?: number;
    quoteEur?: number;
    quoteUsd?: number;
    quoteCny?: number;
    quoteJpy?: number;
    quoteKrw?: number;
    quoteEth?: number;
    quoteGbp?: number;
};
export type ProtocolParameter = {
    eq?: string;
    ne?: string;
    in?: string[];
    ni?: string[];
};
export type VoteParameter = {
    eq?: 'yay' | 'nay' | 'pass';
    ne?: 'yay' | 'nay' | 'pass';
    in?: ('yay' | 'nay' | 'pass')[];
    ni?: ('yay' | 'nay' | 'pass')[];
};
export type MigrationKindParameter = {
    eq?: 'bootstrap' | 'activate_delegate' | 'airdrop' | 'proposal_invoice' | 'code_change' | 'origination' | 'subsidy';
    ne?: 'bootstrap' | 'activate_delegate' | 'airdrop' | 'proposal_invoice' | 'code_change' | 'origination' | 'subsidy';
    in?: ('bootstrap' | 'activate_delegate' | 'airdrop' | 'proposal_invoice' | 'code_change' | 'origination' | 'subsidy')[];
    ni?: ('bootstrap' | 'activate_delegate' | 'airdrop' | 'proposal_invoice' | 'code_change' | 'origination' | 'subsidy')[];
};
export type BakingOperation = Operation & {
    type?: string | null;
    id?: number;
    level?: number;
    timestamp?: string;
    block?: string | null;
    proposer?: Alias | null;
    producer?: Alias | null;
    payloadRound?: number;
    blockRound?: number;
    deposit?: number;
    reward?: number;
    bonus?: number;
    fees?: number;
    quote?: QuoteShort | null;
    baker?: Alias | null;
    priority?: number;
};
export type ProtocolConstants = {
    rampUpCycles?: number;
    noRewardCycles?: number;
    preservedCycles?: number;
    blocksPerCycle?: number;
    blocksPerCommitment?: number;
    blocksPerSnapshot?: number;
    blocksPerVoting?: number;
    timeBetweenBlocks?: number;
    endorsersPerBlock?: number;
    hardOperationGasLimit?: number;
    hardOperationStorageLimit?: number;
    hardBlockGasLimit?: number;
    tokensPerRoll?: number;
    revelationReward?: number;
    blockDeposit?: number;
    blockReward?: number[] | null;
    endorsementDeposit?: number;
    endorsementReward?: number[] | null;
    originationSize?: number;
    byteCost?: number;
    proposalQuorum?: number;
    ballotQuorumMin?: number;
    ballotQuorumMax?: number;
    lbSubsidy?: number;
    lbToggleThreshold?: number;
    consensusThreshold?: number;
    minParticipationNumerator?: number;
    minParticipationDenominator?: number;
    maxSlashingPeriod?: number;
    frozenDepositsPercentage?: number;
    doubleBakingPunishment?: number;
    doubleEndorsingPunishmentNumerator?: number;
    doubleEndorsingPunishmentDenominator?: number;
    txRollupOriginationSize?: number;
    txRollupCommitmentBond?: number;
    dictator?: string | null;
    lbEscapeThreshold?: number;
    lbSunsetLevel?: number;
};
export type Protocol = {
    code?: number;
    hash?: string | null;
    firstLevel?: number;
    firstCycle?: number;
    firstCycleLevel?: number;
    lastLevel?: number | null;
    constants?: ProtocolConstants | null;
    extras?: any | null;
    metadata?: RawJson | null;
};
export type Quote = {
    level?: number;
    timestamp?: string;
    btc?: number;
    eur?: number;
    usd?: number;
    cny?: number;
    jpy?: number;
    krw?: number;
    eth?: number;
    gbp?: number;
};
export type BakerRewards = {
    cycle?: number;
    stakingBalance?: number;
    activeStake?: number;
    selectedStake?: number;
    delegatedBalance?: number;
    numDelegators?: number;
    expectedBlocks?: number;
    expectedEndorsements?: number;
    futureBlocks?: number;
    futureBlockRewards?: number;
    blocks?: number;
    blockRewards?: number;
    missedBlocks?: number;
    missedBlockRewards?: number;
    futureEndorsements?: number;
    futureEndorsementRewards?: number;
    endorsements?: number;
    endorsementRewards?: number;
    missedEndorsements?: number;
    missedEndorsementRewards?: number;
    blockFees?: number;
    missedBlockFees?: number;
    doubleBakingRewards?: number;
    doubleBakingLosses?: number;
    doubleEndorsingRewards?: number;
    doubleEndorsingLosses?: number;
    doublePreendorsingRewards?: number;
    doublePreendorsingLosses?: number;
    revelationRewards?: number;
    revelationLosses?: number;
    quote?: QuoteShort | null;
    ownBlocks?: number;
    extraBlocks?: number;
    missedOwnBlocks?: number;
    missedExtraBlocks?: number;
    uncoveredOwnBlocks?: number;
    uncoveredExtraBlocks?: number;
    uncoveredEndorsements?: number;
    ownBlockRewards?: number;
    extraBlockRewards?: number;
    missedOwnBlockRewards?: number;
    missedExtraBlockRewards?: number;
    uncoveredOwnBlockRewards?: number;
    uncoveredExtraBlockRewards?: number;
    uncoveredEndorsementRewards?: number;
    ownBlockFees?: number;
    extraBlockFees?: number;
    missedOwnBlockFees?: number;
    missedExtraBlockFees?: number;
    uncoveredOwnBlockFees?: number;
    uncoveredExtraBlockFees?: number;
    doubleBakingLostDeposits?: number;
    doubleBakingLostRewards?: number;
    doubleBakingLostFees?: number;
    doubleEndorsingLostDeposits?: number;
    doubleEndorsingLostRewards?: number;
    doubleEndorsingLostFees?: number;
    revelationLostRewards?: number;
    revelationLostFees?: number;
    futureBlockDeposits?: number;
    blockDeposits?: number;
    futureEndorsementDeposits?: number;
    endorsementDeposits?: number;
};
export type DelegatorRewards = {
    cycle?: number;
    balance?: number;
    baker?: Alias | null;
    stakingBalance?: number;
    activeStake?: number;
    selectedStake?: number;
    expectedBlocks?: number;
    expectedEndorsements?: number;
    futureBlocks?: number;
    futureBlockRewards?: number;
    blocks?: number;
    blockRewards?: number;
    missedBlocks?: number;
    missedBlockRewards?: number;
    futureEndorsements?: number;
    futureEndorsementRewards?: number;
    endorsements?: number;
    endorsementRewards?: number;
    missedEndorsements?: number;
    missedEndorsementRewards?: number;
    blockFees?: number;
    missedBlockFees?: number;
    doubleBakingRewards?: number;
    doubleBakingLosses?: number;
    doubleEndorsingRewards?: number;
    doubleEndorsingLosses?: number;
    doublePreendorsingRewards?: number;
    doublePreendorsingLosses?: number;
    revelationRewards?: number;
    revelationLosses?: number;
    quote?: QuoteShort | null;
    ownBlocks?: number;
    extraBlocks?: number;
    missedOwnBlocks?: number;
    missedExtraBlocks?: number;
    uncoveredOwnBlocks?: number;
    uncoveredExtraBlocks?: number;
    uncoveredEndorsements?: number;
    ownBlockRewards?: number;
    extraBlockRewards?: number;
    missedOwnBlockRewards?: number;
    missedExtraBlockRewards?: number;
    uncoveredOwnBlockRewards?: number;
    uncoveredExtraBlockRewards?: number;
    uncoveredEndorsementRewards?: number;
    ownBlockFees?: number;
    extraBlockFees?: number;
    missedOwnBlockFees?: number;
    missedExtraBlockFees?: number;
    uncoveredOwnBlockFees?: number;
    uncoveredExtraBlockFees?: number;
    doubleBakingLostDeposits?: number;
    doubleBakingLostRewards?: number;
    doubleBakingLostFees?: number;
    doubleEndorsingLostDeposits?: number;
    doubleEndorsingLostRewards?: number;
    doubleEndorsingLostFees?: number;
    revelationLostRewards?: number;
    revelationLostFees?: number;
};
export type SplitDelegator = {
    address?: string | null;
    balance?: number;
    currentBalance?: number;
    emptied?: boolean;
};
export type RewardSplit = {
    cycle?: number;
    stakingBalance?: number;
    activeStake?: number;
    selectedStake?: number;
    delegatedBalance?: number;
    numDelegators?: number;
    expectedBlocks?: number;
    expectedEndorsements?: number;
    futureBlocks?: number;
    futureBlockRewards?: number;
    blocks?: number;
    blockRewards?: number;
    missedBlocks?: number;
    missedBlockRewards?: number;
    futureEndorsements?: number;
    futureEndorsementRewards?: number;
    endorsements?: number;
    endorsementRewards?: number;
    missedEndorsements?: number;
    missedEndorsementRewards?: number;
    blockFees?: number;
    missedBlockFees?: number;
    doubleBakingRewards?: number;
    doubleBakingLosses?: number;
    doubleEndorsingRewards?: number;
    doubleEndorsingLosses?: number;
    doublePreendorsingRewards?: number;
    doublePreendorsingLosses?: number;
    revelationRewards?: number;
    revelationLosses?: number;
    delegators?: SplitDelegator[] | null;
    ownBlocks?: number;
    extraBlocks?: number;
    missedOwnBlocks?: number;
    missedExtraBlocks?: number;
    uncoveredOwnBlocks?: number;
    uncoveredExtraBlocks?: number;
    uncoveredEndorsements?: number;
    ownBlockRewards?: number;
    extraBlockRewards?: number;
    missedOwnBlockRewards?: number;
    missedExtraBlockRewards?: number;
    uncoveredOwnBlockRewards?: number;
    uncoveredExtraBlockRewards?: number;
    uncoveredEndorsementRewards?: number;
    ownBlockFees?: number;
    extraBlockFees?: number;
    missedOwnBlockFees?: number;
    missedExtraBlockFees?: number;
    uncoveredOwnBlockFees?: number;
    uncoveredExtraBlockFees?: number;
    doubleBakingLostDeposits?: number;
    doubleBakingLostRewards?: number;
    doubleBakingLostFees?: number;
    doubleEndorsingLostDeposits?: number;
    doubleEndorsingLostRewards?: number;
    doubleEndorsingLostFees?: number;
    revelationLostRewards?: number;
    revelationLostFees?: number;
    futureBlockDeposits?: number;
    blockDeposits?: number;
    futureEndorsementDeposits?: number;
    endorsementDeposits?: number;
};
export type BakingRightTypeParameter = {
    eq?: 'baking' | 'endorsing';
    ne?: 'baking' | 'endorsing';
};
export type BakingRightStatusParameter = {
    eq?: 'future' | 'realized' | 'uncovered' | 'missed';
    ne?: 'future' | 'realized' | 'uncovered' | 'missed';
};
export type BakingRight = {
    type?: string | null;
    cycle?: number;
    level?: number;
    timestamp?: string;
    round?: number | null;
    slots?: number | null;
    baker?: Alias | null;
    status?: string | null;
    priority?: number | null;
};
export type Software = {
    shortHash?: string | null;
    firstLevel?: number;
    firstTime?: string;
    lastLevel?: number;
    lastTime?: string;
    blocksCount?: number;
    extras?: any | null;
    metadata?: RawJson | null;
};
export type Statistics = {
    cycle?: number | null;
    date?: string | null;
    level?: number;
    timestamp?: string;
    totalSupply?: number;
    circulatingSupply?: number;
    totalBootstrapped?: number;
    totalCommitments?: number;
    totalActivated?: number;
    totalCreated?: number;
    totalBurned?: number;
    totalBanished?: number;
    totalFrozen?: number;
    totalRollupBonds?: number;
    quote?: QuoteShort | null;
    totalVested?: number;
};
export type NatParameter = {
    eq?: string;
    ne?: string;
    gt?: string;
    ge?: string;
    lt?: string;
    le?: string;
    in?: string[];
    ni?: string[];
};
export type TokenStandardParameter = {
    eq?: 'fa1.2' | 'fa2';
    ne?: 'fa1.2' | 'fa2';
};
export type Token = {
    id?: number;
    contract?: Alias | null;
    tokenId?: string | null;
    standard?: string | null;
    firstMinter?: Alias | null;
    firstLevel?: number;
    firstTime?: string;
    lastLevel?: number;
    lastTime?: string;
    transfersCount?: number;
    balancesCount?: number;
    holdersCount?: number;
    totalMinted?: string | null;
    totalBurned?: string | null;
    totalSupply?: string | null;
    metadata?: any | null;
};
export type TokenInfo = {
    id?: number;
    contract?: Alias | null;
    tokenId?: string | null;
    standard?: string | null;
    totalSupply?: string | null;
    metadata?: any | null;
};
export type TokenBalance = {
    id?: number;
    account?: Alias | null;
    token?: TokenInfo | null;
    balance?: string | null;
    transfersCount?: number;
    firstLevel?: number;
    firstTime?: string;
    lastLevel?: number;
    lastTime?: string;
};
export type Int64NullParameter = {
    eq?: number;
    ne?: number;
    gt?: number;
    ge?: number;
    lt?: number;
    le?: number;
    in?: number[];
    ni?: number[];
    null?: boolean;
};
export type TokenTransfer = {
    id?: number;
    level?: number;
    timestamp?: string;
    token?: TokenInfo | null;
    from?: Alias | null;
    to?: Alias | null;
    amount?: string | null;
    transactionId?: number | null;
    originationId?: number | null;
    migrationId?: number | null;
};
export type TokenBalanceShort = {
    account?: Alias | null;
    token?: TokenInfo | null;
    balance?: string | null;
};
export type Proposal = {
    hash?: string | null;
    initiator?: Alias | null;
    firstPeriod?: number;
    lastPeriod?: number;
    epoch?: number;
    upvotes?: number;
    votingPower?: number;
    status?: string | null;
    extras?: any | null;
    rolls?: number;
    metadata?: RawJson | null;
};
export type VotingPeriod = {
    index?: number;
    epoch?: number;
    firstLevel?: number;
    startTime?: string;
    lastLevel?: number;
    endTime?: string;
    kind?: string | null;
    status?: string | null;
    dictator?: string | null;
    totalBakers?: number | null;
    totalVotingPower?: number | null;
    upvotesQuorum?: number | null;
    proposalsCount?: number | null;
    topUpvotes?: number | null;
    topVotingPower?: number | null;
    ballotsQuorum?: number | null;
    supermajority?: number | null;
    yayBallots?: number | null;
    yayVotingPower?: number | null;
    nayBallots?: number | null;
    nayVotingPower?: number | null;
    passBallots?: number | null;
    passVotingPower?: number | null;
    totalRolls?: number | null;
    topRolls?: number | null;
    yayRolls?: number | null;
    nayRolls?: number | null;
    passRolls?: number | null;
};
export type VoterStatusParameter = {
    eq?: 'none' | 'upvoted' | 'voted_yay' | 'voted_nay' | 'voted_pass';
    ne?: 'none' | 'upvoted' | 'voted_yay' | 'voted_nay' | 'voted_pass';
    in?: ('none' | 'upvoted' | 'voted_yay' | 'voted_nay' | 'voted_pass')[];
    ni?: ('none' | 'upvoted' | 'voted_yay' | 'voted_nay' | 'voted_pass')[];
};
export type VoterSnapshot = {
    delegate?: Alias | null;
    votingPower?: number;
    status?: string | null;
    rolls?: number;
};
export type VotingEpoch = {
    index?: number;
    firstLevel?: number;
    startTime?: string;
    lastLevel?: number;
    endTime?: string;
    status?: string | null;
    periods?: VotingPeriod[] | null;
    proposals?: Proposal[] | null;
};
/**
 * Get accounts
 */
export declare function accountsGet({ id, address, $type, kind, delegate, balance, staked, lastActivity, select, sort, offset, limit, }?: {
    id?: Int32Parameter | null;
    address?: AddressParameter | null;
    $type?: AccountTypeParameter | null;
    kind?: ContractKindParameter | null;
    delegate?: AccountParameter | null;
    balance?: Int64Parameter | null;
    staked?: BoolParameter | null;
    lastActivity?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Account[]>;
/**
 * Get accounts count
 */
export declare function accountsGetCount({ $type, kind, balance, staked, firstActivity, }?: {
    $type?: AccountTypeParameter | null;
    kind?: ContractKindParameter | null;
    balance?: Int64Parameter | null;
    staked?: BoolParameter | null;
    firstActivity?: Int32Parameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get account by address
 */
export declare function accountsGetByAddress(address: string, { legacy, }?: {
    legacy?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Account>;
/**
 * Get account contracts
 */
export declare function accountsGetContracts(address: string, { sort, offset, limit, }?: {
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<RelatedContract[]>;
/**
 * Get account delegators
 */
export declare function accountsGetDelegators(address: string, { $type, balance, delegationLevel, sort, offset, limit, }?: {
    $type?: AccountTypeParameter | null;
    balance?: Int64Parameter | null;
    delegationLevel?: Int32Parameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Delegator[]>;
/**
 * Get account operations
 */
export declare function accountsGetOperations(address: string, { $type, initiator, sender, target, prevDelegate, newDelegate, contractManager, contractDelegate, originatedContract, accuser, offender, baker, level, timestamp, entrypoint, parameter, hasInternals, status, sort, lastId, limit, micheline, quote, }?: {
    $type?: string | null;
    initiator?: AccountParameter | null;
    sender?: AccountParameter | null;
    target?: AccountParameter | null;
    prevDelegate?: AccountParameter | null;
    newDelegate?: AccountParameter | null;
    contractManager?: AccountParameter | null;
    contractDelegate?: AccountParameter | null;
    originatedContract?: AccountParameter | null;
    accuser?: AccountParameter | null;
    offender?: AccountParameter | null;
    baker?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    entrypoint?: StringParameter | null;
    parameter?: JsonParameter | null;
    hasInternals?: BoolParameter | null;
    status?: OperationStatusParameter | null;
    sort?: SortMode;
    lastId?: number | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Operation[]>;
/**
 * Get counter
 */
export declare function accountsGetCounter(address: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get balance
 */
export declare function accountsGetBalance(address: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get balance at level
 */
export declare function accountsGetBalanceAtLevel(address: string, level: number, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get balance at date
 */
export declare function accountsGetBalanceAtDate(address: string, datetime: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get balance history
 */
export declare function accountsGetBalanceHistory(address: string, { step, select, sort, offset, limit, quote, }?: {
    step?: number | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: number;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<HistoricalBalance[]>;
/**
 * Get account report
 */
export declare function accountsGetBalanceReport(address: string, { $from, to, currency, historical, delimiter, separator, }?: {
    $from?: string | null;
    to?: string | null;
    currency?: string | null;
    historical?: boolean;
    delimiter?: string | null;
    separator?: string | null;
}, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get bigmaps count
 */
export declare function bigMapsGetBigMapsCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get bigmaps
 */
export declare function bigMapsGetBigMaps({ contract, path, tags, active, lastLevel, select, sort, offset, limit, micheline, }?: {
    contract?: AccountParameter | null;
    path?: StringParameter | null;
    tags?: BigMapTagsParameter | null;
    active?: boolean | null;
    lastLevel?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMap[]>;
/**
 * Get bigmap updates
 */
export declare function bigMapsGetBigMapUpdates({ bigmap, path, contract, tags, action, value, level, timestamp, sort, offset, limit, micheline, }?: {
    bigmap?: Int32Parameter | null;
    path?: StringParameter | null;
    contract?: AccountParameter | null;
    tags?: BigMapTagsParameter | null;
    action?: BigMapActionParameter | null;
    value?: JsonParameter | null;
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapUpdate[]>;
/**
 * Get bigmap by Id
 */
export declare function bigMapsGetBigMapById(id: number, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMap>;
/**
 * Get bigmap type
 */
export declare function bigMapsGetBigMapType(id: number, opts?: Oazapfts.RequestOpts): Promise<MichelinePrim>;
/**
 * Get bigmap keys
 */
export declare function bigMapsGetKeys(id: number, { active, key, value, lastLevel, select, sort, offset, limit, micheline, }?: {
    active?: boolean | null;
    key?: JsonParameter | null;
    value?: JsonParameter | null;
    lastLevel?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKey[]>;
/**
 * Get bigmap key
 */
export declare function bigMapsGetKey(id: number, key: string, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKey>;
/**
 * Get bigmap key updates
 */
export declare function bigMapsGetKeyUpdates(id: number, key: string, { sort, offset, limit, micheline, }?: {
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyUpdate[]>;
/**
 * Get historical keys
 */
export declare function bigMapsGetHistoricalKeys(id: number, level: number, { active, key, value, select, sort, offset, limit, micheline, }?: {
    active?: boolean | null;
    key?: JsonParameter | null;
    value?: JsonParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyHistorical[]>;
/**
 * Get historical key
 */
export declare function bigMapsGetKey2(id: number, level: number, key: string, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyHistorical>;
/**
 * Get blocks count
 */
export declare function blocksGetCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get blocks
 */
export declare function blocksGet({ baker, anyof, proposer, producer, level, timestamp, priority, blockRound, select, sort, offset, limit, quote, }?: {
    baker?: AccountParameter | null;
    anyof?: {
        value?: string | null;
        fields?: ('proposer' | 'producer')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    proposer?: AccountParameter | null;
    producer?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    priority?: Int32Parameter | null;
    blockRound?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Block[]>;
/**
 * Get block by hash
 */
export declare function blocksGetByHash(hash: string, { operations, micheline, quote, }?: {
    operations?: boolean;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Block>;
/**
 * Get block by level
 */
export declare function blocksGetByLevel(level: number, { operations, micheline, quote, }?: {
    operations?: boolean;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Block>;
/**
 * Get timestamp by level
 */
export declare function blocksGetByLevel2(level: number, opts?: Oazapfts.RequestOpts): Promise<string>;
/**
 * Get block by timestamp
 */
export declare function blocksGetByDate(timestamp: string, { operations, micheline, quote, }?: {
    operations?: boolean;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Block>;
/**
 * Get level by timestamp
 */
export declare function blocksGetByDate2(timestamp: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get commitment by blinded address
 */
export declare function commitmentsGet(address: string, opts?: Oazapfts.RequestOpts): Promise<Commitment>;
/**
 * Get commitments
 */
export declare function commitmentsGetAll({ activated, activationLevel, balance, select, sort, offset, limit, }?: {
    activated?: boolean | null;
    activationLevel?: Int32NullParameter | null;
    balance?: Int64Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Commitment[]>;
/**
 * Get commitments count
 */
export declare function commitmentsGetCount({ activated, balance, }?: {
    activated?: boolean | null;
    balance?: Int64Parameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get global constants
 */
export declare function constantsGet({ address, creationLevel, creationTime, creator, refs, size, select, sort, offset, limit, format, }?: {
    address?: ExpressionParameter | null;
    creationLevel?: Int32Parameter | null;
    creationTime?: TimestampParameter | null;
    creator?: AccountParameter | null;
    refs?: Int32Parameter | null;
    size?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    format?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Constant[]>;
/**
 * Get global constant by address
 */
export declare function constantsGetByAddress(address: string, { format, }?: {
    format?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Constant>;
/**
 * Get global constants count
 */
export declare function constantsGetCount({ refs, }?: {
    refs?: Int32Parameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get contracts
 */
export declare function contractsGet({ address, kind, tzips, creator, manager, delegate, balance, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage, }?: {
    address?: AddressParameter | null;
    kind?: ContractKindParameter | null;
    tzips?: ContractTagsParameter | null;
    creator?: AccountParameter | null;
    manager?: AccountParameter | null;
    delegate?: AccountParameter | null;
    balance?: Int64Parameter | null;
    lastActivity?: Int32Parameter | null;
    typeHash?: Int32Parameter | null;
    codeHash?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    includeStorage?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Contract[]>;
/**
 * Get contracts count
 */
export declare function contractsGetCount({ kind, }?: {
    kind?: ContractKindParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get contract by address
 */
export declare function contractsGetByAddress(address: string, { legacy, }?: {
    legacy?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Contract>;
/**
 * Get same contracts
 */
export declare function contractsGetSame(address: string, { select, sort, offset, limit, includeStorage, }?: {
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    includeStorage?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Contract[]>;
/**
 * Get similar contracts
 */
export declare function contractsGetSimilar(address: string, { select, sort, offset, limit, includeStorage, }?: {
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    includeStorage?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Contract[]>;
/**
 * Get contract code
 */
export declare function contractsGetCode(address: string, { level, format, }?: {
    level?: number;
    format?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get JSON Schema [2020-12] interface for the contract
 */
export declare function contractsGetInterface(address: string, opts?: Oazapfts.RequestOpts): Promise<ContractInterface>;
/**
 * Get contract entrypoints
 */
export declare function contractsGetEntrypoints(address: string, { all, json, micheline, michelson, }?: {
    all?: boolean;
    json?: boolean;
    micheline?: boolean;
    michelson?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Entrypoint[]>;
/**
 * Get entrypoint by name
 */
export declare function contractsGetEntrypointByName(address: string, name: string, { json, micheline, michelson, }?: {
    json?: boolean;
    micheline?: boolean;
    michelson?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<Entrypoint>;
/**
 * Get contract views
 */
export declare function contractsGetContractViews(address: string, { json, micheline, michelson, }?: {
    json?: boolean;
    micheline?: boolean;
    michelson?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<ContractView[]>;
/**
 * Get view by name
 */
export declare function contractsGetContractViewByName(address: string, name: string, { json, micheline, michelson, }?: {
    json?: boolean;
    micheline?: boolean;
    michelson?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<ContractView>;
/**
 * Build entrypoint parameters
 */
export declare function contractsBuildEntrypointParametersGet(address: string, name: string, { value, }?: {
    value?: string | null;
}, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Build entrypoint parameters
 */
export declare function contractsBuildEntrypointParametersPost(address: string, name: string, body: any, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get contract storage
 */
export declare function contractsGetStorage(address: string, { level, path, }?: {
    level?: number;
    path?: string | null;
}, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get contract storage schema
 */
export declare function contractsGetStorageSchema(address: string, { level, }?: {
    level?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get contract storage history
 */
export declare function contractsGetStorageHistory(address: string, { lastId, limit, }?: {
    lastId?: number;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<StorageRecord[]>;
/**
 * Get raw contract storage
 */
export declare function contractsGetRawStorage(address: string, { level, }?: {
    level?: number;
}, opts?: Oazapfts.RequestOpts): Promise<IMicheline>;
/**
 * Get raw contract storage schema
 */
export declare function contractsGetRawStorageSchema(address: string, { level, }?: {
    level?: number;
}, opts?: Oazapfts.RequestOpts): Promise<IMicheline>;
/**
 * Get raw contract storage history
 */
export declare function contractsGetRawStorageHistory(address: string, { lastId, limit, }?: {
    lastId?: number;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<StorageRecord[]>;
/**
 * Get contract bigmaps
 */
export declare function contractsGetBigMaps(address: string, { tags, select, sort, offset, limit, micheline, }?: {
    tags?: BigMapTagsParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMap[]>;
/**
 * Get bigmap by name
 */
export declare function contractsGetBigMapByName(address: string, name: string, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMap>;
/**
 * Get bigmap keys
 */
export declare function contractsGetBigMapByNameKeys(address: string, name: string, { active, key, value, lastLevel, select, sort, offset, limit, micheline, }?: {
    active?: boolean | null;
    key?: JsonParameter | null;
    value?: JsonParameter | null;
    lastLevel?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKey[]>;
/**
 * Get bigmap key
 */
export declare function contractsGetKey(address: string, name: string, key: string, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKey>;
/**
 * Get bigmap key updates
 */
export declare function contractsGetKeyUpdates(address: string, name: string, key: string, { sort, offset, limit, micheline, }?: {
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyUpdate[]>;
/**
 * Get historical keys
 */
export declare function contractsGetHistoricalKeys(address: string, name: string, level: number, { active, key, value, select, sort, offset, limit, micheline, }?: {
    active?: boolean | null;
    key?: JsonParameter | null;
    value?: JsonParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyHistorical[]>;
/**
 * Get historical key
 */
export declare function contractsGetKey2(address: string, name: string, level: number, key: string, { micheline, }?: {
    micheline?: MichelineFormat;
}, opts?: Oazapfts.RequestOpts): Promise<BigMapKeyHistorical>;
/**
 * Get cycles count
 */
export declare function cyclesGetCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get cycles
 */
export declare function cyclesGet({ snapshotIndex, select, sort, offset, limit, quote, }?: {
    snapshotIndex?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Cycle[]>;
/**
 * Get cycle by index
 */
export declare function cyclesGetByIndex(index: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Cycle>;
/**
 * Get delegates
 */
export declare function delegatesGet({ active, lastActivity, select, sort, offset, limit, }?: {
    active?: BoolParameter | null;
    lastActivity?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Delegate[]>;
/**
 * Get delegates count
 */
export declare function delegatesGetCount({ active, }?: {
    active?: BoolParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get delegate by address
 */
export declare function delegatesGetByAddress(address: string, opts?: Oazapfts.RequestOpts): Promise<Delegate>;
/**
 * Get domains count
 */
export declare function domainsGetCount({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, }?: {
    id?: Int32Parameter | null;
    level?: Int32Parameter | null;
    name?: StringParameter | null;
    owner?: AddressNullParameter | null;
    address?: AddressNullParameter | null;
    reverse?: BoolParameter | null;
    expiration?: DateTimeParameter | null;
    data?: JsonParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get domains
 */
export declare function domainsGet({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, sort, offset, limit, select, }?: {
    id?: Int32Parameter | null;
    level?: Int32Parameter | null;
    name?: StringParameter | null;
    owner?: AddressNullParameter | null;
    address?: AddressNullParameter | null;
    reverse?: BoolParameter | null;
    expiration?: DateTimeParameter | null;
    data?: JsonParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<Domain[]>;
/**
 * Get domain by name
 */
export declare function domainsGetByName(name: string, opts?: Oazapfts.RequestOpts): Promise<Domain>;
/**
 * Get contract events count
 */
export declare function eventsGetContractEventsCount({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, }?: {
    id?: Int32Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    contract?: AccountParameter | null;
    codeHash?: Int32Parameter | null;
    tag?: StringParameter | null;
    payload?: JsonParameter | null;
    transactionId?: Int64Parameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get contract events
 */
export declare function eventsGetContractEvents({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, sort, offset, limit, select, }?: {
    id?: Int32Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    contract?: AccountParameter | null;
    codeHash?: Int32Parameter | null;
    tag?: StringParameter | null;
    payload?: JsonParameter | null;
    transactionId?: Int64Parameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<ContractEvent[]>;
/**
 * Get indexer head
 */
export declare function headGet(opts?: Oazapfts.RequestOpts): Promise<State>;
/**
 * Inject operation
 */
export declare function helpersPostInject(body: string, { $async, }?: {
    $async?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<string>;
/**
 * Run script view
 */
export declare function helpersPostRunScriptView(contract: string, name: string, body: any, opts?: Oazapfts.RequestOpts): Promise<Blob>;
/**
 * Get operations by hash
 */
export declare function operationsGetByHash(hash: string, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Operation[]>;
/**
 * Get operations by hash and counter
 */
export declare function operationsGetByHashCounter(hash: string, counter: number, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Operation[]>;
/**
 * Get operations by hash, counter and nonce
 */
export declare function operationsGetByHashCounterNonce(hash: string, counter: number, nonce: number, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Operation[]>;
/**
 * Get operation status
 */
export declare function operationsGetStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get endorsements
 */
export declare function operationsGetEndorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, }?: {
    delegate?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<EndorsementOperation[]>;
/**
 * Get endorsement by hash
 */
export declare function operationsGetEndorsementByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<EndorsementOperation[]>;
/**
 * Get endorsements count
 */
export declare function operationsGetEndorsementsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get preendorsements
 */
export declare function operationsGetPreendorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, }?: {
    delegate?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<PreendorsementOperation[]>;
/**
 * Get preendorsement by hash
 */
export declare function operationsGetPreendorsementByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<PreendorsementOperation[]>;
/**
 * Get preendorsements count
 */
export declare function operationsGetPreendorsementsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get ballots
 */
export declare function operationsGetBallots({ delegate, level, timestamp, epoch, period, proposal, vote, select, sort, offset, limit, quote, }?: {
    delegate?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    epoch?: Int32Parameter | null;
    period?: Int32Parameter | null;
    proposal?: ProtocolParameter | null;
    vote?: VoteParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BallotOperation[]>;
/**
 * Get ballot by hash
 */
export declare function operationsGetBallotByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BallotOperation[]>;
/**
 * Get ballots count
 */
export declare function operationsGetBallotsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get proposals
 */
export declare function operationsGetProposals({ delegate, level, timestamp, epoch, period, proposal, duplicated, select, sort, offset, limit, quote, }?: {
    delegate?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    epoch?: Int32Parameter | null;
    period?: Int32Parameter | null;
    proposal?: ProtocolParameter | null;
    duplicated?: BoolParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<ProposalOperation[]>;
/**
 * Get proposal by hash
 */
export declare function operationsGetProposalByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<ProposalOperation[]>;
/**
 * Get proposals count
 */
export declare function operationsGetProposalsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get activations
 */
export declare function operationsGetActivations({ account, level, timestamp, select, sort, offset, limit, quote, }?: {
    account?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<ActivationOperation[]>;
/**
 * Get activation by hash
 */
export declare function operationsGetActivationByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<ActivationOperation[]>;
/**
 * Get activations count
 */
export declare function operationsGetActivationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get double baking
 */
export declare function operationsGetDoubleBaking({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('accuser' | 'offender')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    accuser?: AccountParameter | null;
    offender?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoubleBakingOperation[]>;
/**
 * Get double baking by hash
 */
export declare function operationsGetDoubleBakingByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoubleBakingOperation[]>;
/**
 * Get double baking count
 */
export declare function operationsGetDoubleBakingCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get double endorsing
 */
export declare function operationsGetDoubleEndorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('accuser' | 'offender')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    accuser?: AccountParameter | null;
    offender?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoubleEndorsingOperation[]>;
/**
 * Get double endorsing by hash
 */
export declare function operationsGetDoubleEndorsingByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoubleEndorsingOperation[]>;
/**
 * Get double endorsing count
 */
export declare function operationsGetDoubleEndorsingCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get double preendorsing
 */
export declare function operationsGetDoublePreendorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('accuser' | 'offender')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    accuser?: AccountParameter | null;
    offender?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoublePreendorsingOperation[]>;
/**
 * Get double preendorsing by hash
 */
export declare function operationsGetDoublePreendorsingByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DoublePreendorsingOperation[]>;
/**
 * Get double preendorsing count
 */
export declare function operationsGetDoublePreendorsingCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get nonce revelations
 */
export declare function operationsGetNonceRevelations({ anyof, baker, sender, level, revealedCycle, timestamp, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('baker' | 'sender')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    baker?: AccountParameter | null;
    sender?: AccountParameter | null;
    level?: Int32Parameter | null;
    revealedCycle?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<NonceRevelationOperation[]>;
/**
 * Get nonce revelation by hash
 */
export declare function operationsGetNonceRevelationByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<NonceRevelationOperation[]>;
/**
 * Get nonce revelations count
 */
export declare function operationsGetNonceRevelationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get vdf revelations
 */
export declare function operationsGetVdfRevelations({ baker, level, cycle, timestamp, select, sort, offset, limit, quote, }?: {
    baker?: AccountParameter | null;
    level?: Int32Parameter | null;
    cycle?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<VdfRevelationOperation[]>;
/**
 * Get vdf revelation by hash
 */
export declare function operationsGetVdfRevelationByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<VdfRevelationOperation[]>;
/**
 * Get vdf revelations count
 */
export declare function operationsGetVdfRevelationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get drain delegate
 */
export declare function operationsGetDrainDelegateOps({ anyof, delegate, target, level, timestamp, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('delegate' | 'target')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    delegate?: AccountParameter | null;
    target?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DrainDelegateOperation[]>;
/**
 * Get drain delegate by hash
 */
export declare function operationsGetDrainDelegateByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DrainDelegateOperation[]>;
/**
 * Get drain delegate count
 */
export declare function operationsGetDrainDelegateOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get delegations
 */
export declare function operationsGetDelegations({ anyof, initiator, sender, prevDelegate, newDelegate, level, timestamp, senderCodeHash, status, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('sender' | 'prevDelegate' | 'newDelegate')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    initiator?: AccountParameter | null;
    sender?: AccountParameter | null;
    prevDelegate?: AccountParameter | null;
    newDelegate?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    senderCodeHash?: Int32Parameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DelegationOperation[]>;
/**
 * Get delegation by hash
 */
export declare function operationsGetDelegationByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DelegationOperation[]>;
/**
 * Get delegation status
 */
export declare function operationsGetDelegationStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get delegations count
 */
export declare function operationsGetDelegationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get originations
 */
export declare function operationsGetOriginations({ anyof, initiator, sender, contractManager, contractDelegate, originatedContract, id, typeHash, codeHash, level, timestamp, senderCodeHash, anyCodeHash, status, select, sort, offset, limit, micheline, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('initiator' | 'sender' | 'contractManager' | 'contractDelegate' | 'originatedContract')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    initiator?: AccountParameter | null;
    sender?: AccountParameter | null;
    contractManager?: AccountParameter | null;
    contractDelegate?: AccountParameter | null;
    originatedContract?: AccountParameter | null;
    id?: Int64Parameter | null;
    typeHash?: Int32Parameter | null;
    codeHash?: Int32Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    senderCodeHash?: Int32Parameter | null;
    anyCodeHash?: Int32Parameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<OriginationOperation[]>;
/**
 * Get origination by hash
 */
export declare function operationsGetOriginationByHash(hash: string, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<OriginationOperation[]>;
/**
 * Get origination status
 */
export declare function operationsGetOriginationStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get originations count
 */
export declare function operationsGetOriginationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get transactions
 */
export declare function operationsGetTransactions({ anyof, initiator, sender, target, amount, id, level, timestamp, senderCodeHash, targetCodeHash, codeHash, entrypoint, parameter, hasInternals, status, select, sort, offset, limit, micheline, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('sender' | 'target' | 'initiator')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    initiator?: AccountParameter | null;
    sender?: AccountParameter | null;
    target?: AccountParameter | null;
    amount?: Int64Parameter | null;
    id?: Int64Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    senderCodeHash?: Int32Parameter | null;
    targetCodeHash?: Int32Parameter | null;
    codeHash?: Int32Parameter | null;
    entrypoint?: StringParameter | null;
    parameter?: JsonParameter | null;
    hasInternals?: BoolParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransactionOperation[]>;
/**
 * Get transaction by hash
 */
export declare function operationsGetTransactionByHash(hash: string, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransactionOperation[]>;
/**
 * Get transaction by hash and counter
 */
export declare function operationsGetTransactionByHashCounter(hash: string, counter: number, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransactionOperation[]>;
/**
 * Get transaction by hash, counter and nonce
 */
export declare function operationsGetTransactionByHashCounterNonce(hash: string, counter: number, nonce: number, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransactionOperation[]>;
/**
 * Get transaction status
 */
export declare function operationsGetTransactionStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get transactions count
 */
export declare function operationsGetTransactionsCount({ anyof, initiator, sender, target, amount, level, timestamp, entrypoint, parameter, status, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('sender' | 'target' | 'initiator')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    initiator?: AccountParameter | null;
    sender?: AccountParameter | null;
    target?: AccountParameter | null;
    amount?: Int64Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    entrypoint?: StringParameter | null;
    parameter?: JsonParameter | null;
    status?: OperationStatusParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get reveals
 */
export declare function operationsGetReveals({ sender, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RevealOperation[]>;
/**
 * Get reveal by hash
 */
export declare function operationsGetRevealByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RevealOperation[]>;
/**
 * Get reveal status
 */
export declare function operationsGetRevealStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get reveals count
 */
export declare function operationsGetRevealsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get register constants
 */
export declare function operationsGetRegisterConstants({ sender, address, level, timestamp, status, select, sort, offset, limit, micheline, quote, }?: {
    sender?: AccountParameter | null;
    address?: ExpressionParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RegisterConstantOperation[]>;
/**
 * Get register constant by hash
 */
export declare function operationsGetRegisterConstantByHash(hash: string, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RegisterConstantOperation[]>;
/**
 * Get register constant status
 */
export declare function operationsGetRegisterConstantStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get register constants count
 */
export declare function operationsGetRegisterConstantsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get set deposits limits
 */
export declare function operationsGetSetDepositsLimits({ sender, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<SetDepositsLimitOperation[]>;
/**
 * Get set deposits limit by hash
 */
export declare function operationsGetSetDepositsLimitByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<SetDepositsLimitOperation[]>;
/**
 * Get set deposits limit status
 */
export declare function operationsGetSetDepositsLimitStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get set deposits limits count
 */
export declare function operationsGetSetDepositsLimitsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get transfer ticket
 */
export declare function operationsGetTransferTicketOps({ anyof, sender, target, ticketer, level, timestamp, status, select, sort, offset, limit, micheline, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('sender' | 'target' | 'ticketer')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    sender?: AccountParameter | null;
    target?: AccountParameter | null;
    ticketer?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransferTicketOperation[]>;
/**
 * Get transfer ticket by hash
 */
export declare function operationsGetTransferTicketOpsByHash(hash: string, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TransferTicketOperation[]>;
/**
 * Get transfer ticket status
 */
export declare function operationsGetTransferTicketStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get transfer ticket count
 */
export declare function operationsGetTransferTicketOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup commit
 */
export declare function operationsGetTxRollupCommitOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupCommitOperation[]>;
/**
 * Get tx rollup commit by hash
 */
export declare function operationsGetTxRollupCommitOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupCommitOperation[]>;
/**
 * Get tx rollup commit status
 */
export declare function operationsGetTxRollupCommitStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup commit count
 */
export declare function operationsGetTxRollupCommitOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup dispatch tickets
 */
export declare function operationsGetTxRollupDispatchTicketsOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupDispatchTicketsOperation[]>;
/**
 * Get tx rollup dispatch tickets by hash
 */
export declare function operationsGetTxRollupDispatchTicketsOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupDispatchTicketsOperation[]>;
/**
 * Get tx rollup dispatch tickets status
 */
export declare function operationsGetTxRollupDispatchTicketsStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup dispatch tickets count
 */
export declare function operationsGetTxRollupDispatchTicketsOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup finalize commitment
 */
export declare function operationsGetTxRollupFinalizeCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupFinalizeCommitmentOperation[]>;
/**
 * Get tx rollup finalize commitment by hash
 */
export declare function operationsGetTxRollupFinalizeCommitmentOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupFinalizeCommitmentOperation[]>;
/**
 * Get tx rollup finalize commitment status
 */
export declare function operationsGetTxRollupFinalizeCommitmentStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup finalize commitment count
 */
export declare function operationsGetTxRollupFinalizeCommitmentOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup origination
 */
export declare function operationsGetTxRollupOriginationOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupOriginationOperation[]>;
/**
 * Get tx rollup origination by hash
 */
export declare function operationsGetTxRollupOriginationOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupOriginationOperation[]>;
/**
 * Get tx rollup origination status
 */
export declare function operationsGetTxRollupOriginationStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup origination count
 */
export declare function operationsGetTxRollupOriginationOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup rejection
 */
export declare function operationsGetTxRollupRejectionOps({ anyof, sender, committer, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    anyof?: {
        value?: string | null;
        fields?: ('sender' | 'committer')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    sender?: AccountParameter | null;
    committer?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupRejectionOperation[]>;
/**
 * Get tx rollup rejection by hash
 */
export declare function operationsGetTxRollupRejectionOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupRejectionOperation[]>;
/**
 * Get tx rollup rejection status
 */
export declare function operationsGetTxRollupRejectionStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup rejection count
 */
export declare function operationsGetTxRollupRejectionOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup remove commitment
 */
export declare function operationsGetTxRollupRemoveCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupRemoveCommitmentOperation[]>;
/**
 * Get tx rollup remove commitment by hash
 */
export declare function operationsGetTxRollupRemoveCommitmentOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupRemoveCommitmentOperation[]>;
/**
 * Get tx rollup remove commitment status
 */
export declare function operationsGetTxRollupRemoveCommitmentStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup remove commitment count
 */
export declare function operationsGetTxRollupRemoveCommitmentOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup return bond
 */
export declare function operationsGetTxRollupReturnBondOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupReturnBondOperation[]>;
/**
 * Get tx rollup return bond by hash
 */
export declare function operationsGetTxRollupReturnBondOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupReturnBondOperation[]>;
/**
 * Get tx rollup return bond status
 */
export declare function operationsGetTxRollupReturnBondStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup return bond count
 */
export declare function operationsGetTxRollupReturnBondOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tx rollup submit batch
 */
export declare function operationsGetTxRollupSubmitBatchOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    rollup?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupSubmitBatchOperation[]>;
/**
 * Get tx rollup submit batch by hash
 */
export declare function operationsGetTxRollupSubmitBatchOpsByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<TxRollupSubmitBatchOperation[]>;
/**
 * Get tx rollup submit batch status
 */
export declare function operationsGetTxRollupSubmitBatchStatus(hash: string, opts?: Oazapfts.RequestOpts): Promise<boolean | null>;
/**
 * Get tx rollup submit batch count
 */
export declare function operationsGetTxRollupSubmitBatchOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get increase paid storage
 */
export declare function operationsGetIncreasePaidStorageOps({ sender, contract, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    contract?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<IncreasePaidStorageOperation[]>;
/**
 * Get increase paid storage by hash
 */
export declare function operationsGetIncreasePaidStorageByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<IncreasePaidStorageOperation[]>;
/**
 * Get increase paid storage count
 */
export declare function operationsGetIncreasePaidStorageCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get update consensus key
 */
export declare function operationsGetUpdateConsensusKeyOps({ sender, activationCycle, level, timestamp, status, select, sort, offset, limit, quote, }?: {
    sender?: AccountParameter | null;
    activationCycle?: Int32Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    status?: OperationStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<UpdateConsensusKeyOperation[]>;
/**
 * Get update consensus key by hash
 */
export declare function operationsGetUpdateConsensusKeyByHash(hash: string, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<UpdateConsensusKeyOperation[]>;
/**
 * Get update consensus key count
 */
export declare function operationsGetUpdateConsensusKeyOpsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get migrations
 */
export declare function operationsGetMigrations({ account, kind, balanceChange, id, level, timestamp, select, sort, offset, limit, micheline, quote, }?: {
    account?: AccountParameter | null;
    kind?: MigrationKindParameter | null;
    balanceChange?: Int64Parameter | null;
    id?: Int64Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<MigrationOperation[]>;
/**
 * Get migration by id
 */
export declare function operationsGetMigrationById(id: number, { micheline, quote, }?: {
    micheline?: MichelineFormat;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<MigrationOperation>;
/**
 * Get migrations count
 */
export declare function operationsGetMigrationsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get revelation penalties
 */
export declare function operationsGetRevelationPenalties({ baker, level, timestamp, select, sort, offset, limit, quote, }?: {
    baker?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RevelationPenaltyOperation[]>;
/**
 * Get revelation penalty by id
 */
export declare function operationsGetRevelationPenaltyById(id: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<RevelationPenaltyOperation>;
/**
 * Get revelation penalties count
 */
export declare function operationsGetRevelationPenaltiesCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get baking
 */
export declare function operationsGetBaking({ baker, anyof, proposer, producer, level, timestamp, select, sort, offset, limit, quote, }?: {
    baker?: AccountParameter | null;
    anyof?: {
        value?: string | null;
        fields?: ('proposer' | 'producer')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    proposer?: AccountParameter | null;
    producer?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BakingOperation[]>;
/**
 * Get baking by id
 */
export declare function operationsGetBakingById(id: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BakingOperation>;
/**
 * Get baking count
 */
export declare function operationsGetBakingCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get endorsing rewards
 */
export declare function operationsGetEndorsingRewards({ baker, level, timestamp, select, sort, offset, limit, quote, }?: {
    baker?: AccountParameter | null;
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<EndorsingRewardOperation[]>;
/**
 * Get endorsing reward by id
 */
export declare function operationsGetEndorsingRewardById(id: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<EndorsingRewardOperation>;
/**
 * Get endorsing rewards count
 */
export declare function operationsGetEndorsingRewardsCount({ level, timestamp, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get protocols count
 */
export declare function protocolsGetCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get protocols
 */
export declare function protocolsGet({ sort, offset, limit, }?: {
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Protocol[]>;
/**
 * Get current protocol
 */
export declare function protocolsGetCurrent(opts?: Oazapfts.RequestOpts): Promise<Protocol>;
/**
 * Get protocol by code
 */
export declare function protocolsGetByCode(code: number, opts?: Oazapfts.RequestOpts): Promise<Protocol>;
/**
 * Get protocol by hash
 */
export declare function protocolsGetByHash(hash: string, opts?: Oazapfts.RequestOpts): Promise<Protocol>;
/**
 * Get protocol by cycle
 */
export declare function protocolsGetByCycle(cycle: number, opts?: Oazapfts.RequestOpts): Promise<Protocol>;
/**
 * Get quotes count
 */
export declare function quotesGetCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get last quote
 */
export declare function quotesGetLast(opts?: Oazapfts.RequestOpts): Promise<Quote>;
/**
 * Get quotes
 */
export declare function quotesGet({ level, timestamp, select, sort, offset, limit, }?: {
    level?: Int32Parameter | null;
    timestamp?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Quote[]>;
/**
 * Get baker cycle rewards count
 */
export declare function rewardsGetBakerRewardsCount(address: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get baker cycle rewards
 */
export declare function rewardsGetBakerRewards(address: string, { cycle, select, sort, offset, limit, quote, }?: {
    cycle?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BakerRewards[]>;
/**
 * Get baker cycle rewards by cycle
 */
export declare function rewardsGetBakerRewardsByCycle(address: string, cycle: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<BakerRewards>;
/**
 * Get delegator cycle rewards count
 */
export declare function rewardsGetDelegatorRewardsCount(address: string, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get delegator cycle rewards
 */
export declare function rewardsGetDelegatorRewards(address: string, { cycle, select, sort, offset, limit, quote, }?: {
    cycle?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DelegatorRewards[]>;
/**
 * Get delegator cycle rewards by cycle
 */
export declare function rewardsGetDelegatorRewardsByCycle(address: string, cycle: number, { quote, }?: {
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<DelegatorRewards>;
/**
 * Get reward split
 */
export declare function rewardsGetRewardSplit(baker: string, cycle: number, { offset, limit, }?: {
    offset?: number;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<RewardSplit>;
/**
 * Get reward split delegator
 */
export declare function rewardsGetRewardSplitDelegator(baker: string, cycle: number, delegator: string, opts?: Oazapfts.RequestOpts): Promise<SplitDelegator>;
/**
 * Get rights count
 */
export declare function rightsGetCount({ $type, baker, cycle, level, slots, round, priority, status, }?: {
    $type?: BakingRightTypeParameter | null;
    baker?: AccountParameter | null;
    cycle?: Int32Parameter | null;
    level?: Int32Parameter | null;
    slots?: Int32NullParameter | null;
    round?: Int32NullParameter | null;
    priority?: Int32NullParameter | null;
    status?: BakingRightStatusParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get rights
 */
export declare function rightsGet({ $type, baker, cycle, level, slots, round, priority, status, select, sort, offset, limit, }?: {
    $type?: BakingRightTypeParameter | null;
    baker?: AccountParameter | null;
    cycle?: Int32Parameter | null;
    level?: Int32Parameter | null;
    slots?: Int32NullParameter | null;
    round?: Int32NullParameter | null;
    priority?: Int32NullParameter | null;
    status?: BakingRightStatusParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<BakingRight[]>;
/**
 * Get baker software
 */
export declare function softwareGet({ select, sort, offset, limit, }?: {
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Software[]>;
/**
 * Get software count
 */
export declare function softwareGetCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get statistics
 */
export declare function statisticsGet({ level, timestamp, select, sort, offset, limit, quote, }?: {
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Statistics[]>;
/**
 * Get daily statistics
 */
export declare function statisticsGetDaily({ date, select, sort, offset, limit, quote, }?: {
    date?: DateTimeParameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Statistics[]>;
/**
 * Get cyclic statistics
 */
export declare function statisticsGetCyclesAll({ cycle, select, sort, offset, limit, quote, }?: {
    cycle?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Statistics[]>;
/**
 * Get current statistics
 */
export declare function statisticsGetCycles({ select, quote, }?: {
    select?: SelectParameter | null;
    quote?: Symbols;
}, opts?: Oazapfts.RequestOpts): Promise<Statistics>;
/**
 * Get tokens count
 */
export declare function tokensGetTokensCount({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, }?: {
    id?: Int64Parameter | null;
    contract?: AccountParameter | null;
    tokenId?: NatParameter | null;
    standard?: TokenStandardParameter | null;
    firstMinter?: AccountParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
    metadata?: JsonParameter | null;
    indexedAt?: Int32NullParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get tokens
 */
export declare function tokensGetTokens({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, sort, offset, limit, select, }?: {
    id?: Int64Parameter | null;
    contract?: AccountParameter | null;
    tokenId?: NatParameter | null;
    standard?: TokenStandardParameter | null;
    firstMinter?: AccountParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
    metadata?: JsonParameter | null;
    indexedAt?: Int32NullParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<Token[]>;
/**
 * Get token balances count
 */
export declare function tokensGetTokenBalancesCount({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, }?: {
    id?: Int64Parameter | null;
    account?: AccountParameter | null;
    tokenId?: Int64Parameter | null;
    tokenContract?: AccountParameter | null;
    tokenTokenId?: NatParameter | null;
    tokenStandard?: TokenStandardParameter | null;
    tokenMetadata?: JsonParameter | null;
    tokenHasFilters?: boolean;
    balance?: NatParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
    indexedAt?: Int32NullParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get token balances
 */
export declare function tokensGetTokenBalances({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, sort, offset, limit, select, }?: {
    id?: Int64Parameter | null;
    account?: AccountParameter | null;
    tokenId?: Int64Parameter | null;
    tokenContract?: AccountParameter | null;
    tokenTokenId?: NatParameter | null;
    tokenStandard?: TokenStandardParameter | null;
    tokenMetadata?: JsonParameter | null;
    tokenHasFilters?: boolean;
    balance?: NatParameter | null;
    firstLevel?: Int32Parameter | null;
    firstTime?: TimestampParameter | null;
    lastLevel?: Int32Parameter | null;
    lastTime?: TimestampParameter | null;
    indexedAt?: Int32NullParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<TokenBalance[]>;
/**
 * Get token transfers count
 */
export declare function tokensGetTokenTransfersCount({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, }?: {
    id?: Int64Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    tokenId?: Int64Parameter | null;
    tokenContract?: AccountParameter | null;
    tokenTokenId?: NatParameter | null;
    tokenStandard?: TokenStandardParameter | null;
    tokenMetadata?: JsonParameter | null;
    tokenHasFilters?: boolean;
    anyof?: {
        value?: string | null;
        fields?: ('from' | 'to')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    $from?: AccountParameter | null;
    to?: AccountParameter | null;
    amount?: NatParameter | null;
    transactionId?: Int64NullParameter | null;
    originationId?: Int64NullParameter | null;
    migrationId?: Int64NullParameter | null;
    indexedAt?: Int32NullParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get token transfers
 */
export declare function tokensGetTokenTransfers({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, sort, offset, limit, select, }?: {
    id?: Int64Parameter | null;
    level?: Int32Parameter | null;
    timestamp?: TimestampParameter | null;
    tokenId?: Int64Parameter | null;
    tokenContract?: AccountParameter | null;
    tokenTokenId?: NatParameter | null;
    tokenStandard?: TokenStandardParameter | null;
    tokenMetadata?: JsonParameter | null;
    tokenHasFilters?: boolean;
    anyof?: {
        value?: string | null;
        fields?: ('from' | 'to')[];
        in?: string[];
        null?: boolean;
        eq?: string;
    };
    $from?: AccountParameter | null;
    to?: AccountParameter | null;
    amount?: NatParameter | null;
    transactionId?: Int64NullParameter | null;
    originationId?: Int64NullParameter | null;
    migrationId?: Int64NullParameter | null;
    indexedAt?: Int32NullParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<TokenTransfer[]>;
/**
 * Get historical token balances
 */
export declare function tokensGetTokenBalances2(level: number, { account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, sort, offset, limit, select, }?: {
    account?: AccountParameter | null;
    tokenId?: Int64Parameter | null;
    tokenContract?: AccountParameter | null;
    tokenTokenId?: NatParameter | null;
    tokenStandard?: TokenStandardParameter | null;
    tokenMetadata?: JsonParameter | null;
    tokenHasFilters?: boolean;
    balance?: NatParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
    select?: SelectionParameter | null;
}, opts?: Oazapfts.RequestOpts): Promise<TokenBalanceShort[]>;
/**
 * Get proposals count
 */
export declare function votingGetProposalsCount(opts?: Oazapfts.RequestOpts): Promise<number>;
/**
 * Get proposals
 */
export declare function votingGetProposals({ hash, epoch, select, sort, offset, limit, }?: {
    hash?: ProtocolParameter | null;
    epoch?: Int32Parameter | null;
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<Proposal[]>;
/**
 * Get proposal by hash
 */
export declare function votingGetProposalByHash(hash: string, opts?: Oazapfts.RequestOpts): Promise<Proposal>;
/**
 * Get voting periods
 */
export declare function votingGetPeriods({ select, sort, offset, limit, }?: {
    select?: SelectParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<VotingPeriod[]>;
/**
 * Get voting period by index
 */
export declare function votingGetPeriod(index: number, opts?: Oazapfts.RequestOpts): Promise<VotingPeriod>;
/**
 * Get current voting period
 */
export declare function votingGetCurrentPeriod(opts?: Oazapfts.RequestOpts): Promise<VotingPeriod>;
/**
 * Get period voters
 */
export declare function votingGetPeriodVoters(index: number, { status, sort, offset, limit, }?: {
    status?: VoterStatusParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<VoterSnapshot[]>;
/**
 * Get period voter
 */
export declare function votingGetPeriodVoter(index: number, address: string, opts?: Oazapfts.RequestOpts): Promise<VoterSnapshot>;
/**
 * Get current period voters
 */
export declare function votingGetPeriodVoters2({ status, sort, offset, limit, }?: {
    status?: VoterStatusParameter | null;
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<VoterSnapshot[]>;
/**
 * Get current period voter
 */
export declare function votingGetPeriodVoter2(address: string, opts?: Oazapfts.RequestOpts): Promise<VoterSnapshot>;
/**
 * Get voting epochs
 */
export declare function votingGetEpochs({ sort, offset, limit, }?: {
    sort?: SortParameter | null;
    offset?: OffsetParameter | null;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<VotingEpoch[]>;
/**
 * Get voting epoch by index
 */
export declare function votingGetEpoch(index: number, opts?: Oazapfts.RequestOpts): Promise<VotingEpoch>;
/**
 * Get current voting epoch
 */
export declare function votingGetCurrentEpoch(opts?: Oazapfts.RequestOpts): Promise<VotingEpoch>;
/**
 * Get latest voting
 */
export declare function votingGetLatestVoting(opts?: Oazapfts.RequestOpts): Promise<VotingEpoch>;
