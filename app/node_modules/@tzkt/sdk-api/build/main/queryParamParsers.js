"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsonParameter = (paramName, p) => {
    if (!p)
        return {};
    const mainParamsObj = {};
    Object.entries(p).forEach(([k, v]) => {
        if (!(v instanceof Object)) {
            throw new Error(`Expected ${paramName} value to be object, received ${typeof v}`);
        }
        const { jsonPath, jsonValue } = v;
        if (jsonValue === undefined || jsonValue === null)
            throw new Error(`Expected jsonValue in ${paramName} -> ${k}, found: ${jsonValue}`);
        // k is top eq, ne, in, etc.
        const parameterPathParts = [paramName, jsonPath, k];
        const parameterPath = parameterPathParts
            .filter((p) => p !== undefined)
            .join('.');
        mainParamsObj[parameterPath] = jsonValue;
    });
    return mainParamsObj;
};
const anyofParameter = (paramName, p) => {
    if (!p)
        return {};
    const { fields } = p;
    const validateFields = (fields) => {
        if (!Array.isArray(fields)) {
            throw new Error(`Expected ${paramName} fields to be Array. Received ${typeof fields}.`);
        }
        fields.forEach((f) => {
            if (typeof f === 'string')
                return;
            throw new Error(`Expected ${paramName} fields to be strings. Received ${typeof f}`);
        });
        return true;
    };
    // never really returns but oh well
    if (!validateFields(fields))
        return {};
    const mainParamsObj = {};
    const anyof = fields.join('.');
    if (p.value) {
        const prefixedKey = `${paramName}.${anyof}`;
        mainParamsObj[prefixedKey] = p.value;
    }
    for (const param of ['in', 'eq', 'null']) {
        if (p[param]) {
            const prefixedKey = `${paramName}.${anyof}.${param}`;
            mainParamsObj[prefixedKey] = Array.isArray(p[param])
                ? p[param].join(',')
                : p[param];
            return mainParamsObj;
        }
    }
    return mainParamsObj;
};
const queryParameter = (paramName, p) => {
    if (!p)
        return {};
    const mainParamsObj = {};
    Object.entries(p).forEach(([k, v]) => {
        const key = `${paramName}.${k}`;
        mainParamsObj[key] = v;
    });
    return mainParamsObj;
};
const parsers = {
    jsonParameter,
    queryParameter,
    anyofParameter,
};
exports.default = parsers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlQYXJhbVBhcnNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcnlQYXJhbVBhcnNlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNLGFBQWEsR0FBcUIsQ0FBQyxTQUFTLEVBQUUsQ0FBRSxFQUFFLEVBQUU7SUFDeEQsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUVsQixNQUFNLGFBQWEsR0FBMkIsRUFBRSxDQUFDO0lBRWpELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLFNBQVMsaUNBQWlDLE9BQU8sQ0FBQyxFQUFFLENBQ2pFLENBQUM7U0FDSDtRQUVELE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssSUFBSTtZQUMvQyxNQUFNLElBQUksS0FBSyxDQUNiLHlCQUF5QixTQUFTLE9BQU8sQ0FBQyxZQUFZLFNBQVMsRUFBRSxDQUNsRSxDQUFDO1FBRUosNEJBQTRCO1FBQzVCLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXBELE1BQU0sYUFBYSxHQUFHLGtCQUFrQjthQUNyQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7YUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFxQixDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN4RCxJQUFJLENBQUMsQ0FBQztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRWxCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFckIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFlLEVBQXNCLEVBQUU7UUFDN0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLFNBQVMsaUNBQWlDLE9BQU8sTUFBTSxHQUFHLENBQ3ZFLENBQUM7U0FDSDtRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNuQixJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVE7Z0JBQUUsT0FBTztZQUNsQyxNQUFNLElBQUksS0FBSyxDQUNiLFlBQVksU0FBUyxtQ0FBbUMsT0FBTyxDQUFDLEVBQUUsQ0FDbkUsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7SUFFRixtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUV2QyxNQUFNLGFBQWEsR0FBNEIsRUFBRSxDQUFDO0lBRWxELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFL0IsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ1gsTUFBTSxXQUFXLEdBQUcsR0FBRyxTQUFTLElBQUksS0FBSyxFQUFFLENBQUM7UUFDNUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDdEM7SUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtRQUN4QyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNaLE1BQU0sV0FBVyxHQUFHLEdBQUcsU0FBUyxJQUFJLEtBQUssSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNyRCxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNiLE9BQU8sYUFBYSxDQUFDO1NBQ3RCO0tBQ0Y7SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBcUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDeEQsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUVsQixNQUFNLGFBQWEsR0FBNEIsRUFBRSxDQUFDO0lBRWxELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNuQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNoQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQXFDO0lBQ2hELGFBQWE7SUFDYixjQUFjO0lBQ2QsY0FBYztDQUNmLENBQUM7QUFFRixrQkFBZSxPQUFPLENBQUMifQ==