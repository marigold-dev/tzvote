"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractsBuildEntrypointParametersPost = exports.contractsBuildEntrypointParametersGet = exports.contractsGetContractViewByName = exports.contractsGetContractViews = exports.contractsGetEntrypointByName = exports.contractsGetEntrypoints = exports.contractsGetInterface = exports.contractsGetCode = exports.contractsGetSimilar = exports.contractsGetSame = exports.contractsGetByAddress = exports.contractsGetCount = exports.contractsGet = exports.constantsGetCount = exports.constantsGetByAddress = exports.constantsGet = exports.commitmentsGetCount = exports.commitmentsGetAll = exports.commitmentsGet = exports.blocksGetByDate2 = exports.blocksGetByDate = exports.blocksGetByLevel2 = exports.blocksGetByLevel = exports.blocksGetByHash = exports.blocksGet = exports.blocksGetCount = exports.bigMapsGetKey2 = exports.bigMapsGetHistoricalKeys = exports.bigMapsGetKeyUpdates = exports.bigMapsGetKey = exports.bigMapsGetKeys = exports.bigMapsGetBigMapType = exports.bigMapsGetBigMapById = exports.bigMapsGetBigMapUpdates = exports.bigMapsGetBigMaps = exports.bigMapsGetBigMapsCount = exports.accountsGetBalanceReport = exports.accountsGetBalanceHistory = exports.accountsGetBalanceAtDate = exports.accountsGetBalanceAtLevel = exports.accountsGetBalance = exports.accountsGetCounter = exports.accountsGetOperations = exports.accountsGetDelegators = exports.accountsGetContracts = exports.accountsGetByAddress = exports.accountsGetCount = exports.accountsGet = exports.servers = exports.defaults = void 0;
exports.operationsGetDoubleEndorsing = exports.operationsGetDoubleBakingCount = exports.operationsGetDoubleBakingByHash = exports.operationsGetDoubleBaking = exports.operationsGetActivationsCount = exports.operationsGetActivationByHash = exports.operationsGetActivations = exports.operationsGetProposalsCount = exports.operationsGetProposalByHash = exports.operationsGetProposals = exports.operationsGetBallotsCount = exports.operationsGetBallotByHash = exports.operationsGetBallots = exports.operationsGetPreendorsementsCount = exports.operationsGetPreendorsementByHash = exports.operationsGetPreendorsements = exports.operationsGetEndorsementsCount = exports.operationsGetEndorsementByHash = exports.operationsGetEndorsements = exports.operationsGetStatus = exports.operationsGetByHashCounterNonce = exports.operationsGetByHashCounter = exports.operationsGetByHash = exports.helpersPostRunScriptView = exports.helpersPostInject = exports.headGet = exports.eventsGetContractEvents = exports.eventsGetContractEventsCount = exports.domainsGetByName = exports.domainsGet = exports.domainsGetCount = exports.delegatesGetByAddress = exports.delegatesGetCount = exports.delegatesGet = exports.cyclesGetByIndex = exports.cyclesGet = exports.cyclesGetCount = exports.contractsGetKey2 = exports.contractsGetHistoricalKeys = exports.contractsGetKeyUpdates = exports.contractsGetKey = exports.contractsGetBigMapByNameKeys = exports.contractsGetBigMapByName = exports.contractsGetBigMaps = exports.contractsGetRawStorageHistory = exports.contractsGetRawStorageSchema = exports.contractsGetRawStorage = exports.contractsGetStorageHistory = exports.contractsGetStorageSchema = exports.contractsGetStorage = void 0;
exports.operationsGetTxRollupDispatchTicketsOpsByHash = exports.operationsGetTxRollupDispatchTicketsOps = exports.operationsGetTxRollupCommitOpsCount = exports.operationsGetTxRollupCommitStatus = exports.operationsGetTxRollupCommitOpsByHash = exports.operationsGetTxRollupCommitOps = exports.operationsGetTransferTicketOpsCount = exports.operationsGetTransferTicketStatus = exports.operationsGetTransferTicketOpsByHash = exports.operationsGetTransferTicketOps = exports.operationsGetSetDepositsLimitsCount = exports.operationsGetSetDepositsLimitStatus = exports.operationsGetSetDepositsLimitByHash = exports.operationsGetSetDepositsLimits = exports.operationsGetRegisterConstantsCount = exports.operationsGetRegisterConstantStatus = exports.operationsGetRegisterConstantByHash = exports.operationsGetRegisterConstants = exports.operationsGetRevealsCount = exports.operationsGetRevealStatus = exports.operationsGetRevealByHash = exports.operationsGetReveals = exports.operationsGetTransactionsCount = exports.operationsGetTransactionStatus = exports.operationsGetTransactionByHashCounterNonce = exports.operationsGetTransactionByHashCounter = exports.operationsGetTransactionByHash = exports.operationsGetTransactions = exports.operationsGetOriginationsCount = exports.operationsGetOriginationStatus = exports.operationsGetOriginationByHash = exports.operationsGetOriginations = exports.operationsGetDelegationsCount = exports.operationsGetDelegationStatus = exports.operationsGetDelegationByHash = exports.operationsGetDelegations = exports.operationsGetDrainDelegateOpsCount = exports.operationsGetDrainDelegateByHash = exports.operationsGetDrainDelegateOps = exports.operationsGetVdfRevelationsCount = exports.operationsGetVdfRevelationByHash = exports.operationsGetVdfRevelations = exports.operationsGetNonceRevelationsCount = exports.operationsGetNonceRevelationByHash = exports.operationsGetNonceRevelations = exports.operationsGetDoublePreendorsingCount = exports.operationsGetDoublePreendorsingByHash = exports.operationsGetDoublePreendorsing = exports.operationsGetDoubleEndorsingCount = exports.operationsGetDoubleEndorsingByHash = void 0;
exports.protocolsGetByCycle = exports.protocolsGetByHash = exports.protocolsGetByCode = exports.protocolsGetCurrent = exports.protocolsGet = exports.protocolsGetCount = exports.operationsGetEndorsingRewardsCount = exports.operationsGetEndorsingRewardById = exports.operationsGetEndorsingRewards = exports.operationsGetBakingCount = exports.operationsGetBakingById = exports.operationsGetBaking = exports.operationsGetRevelationPenaltiesCount = exports.operationsGetRevelationPenaltyById = exports.operationsGetRevelationPenalties = exports.operationsGetMigrationsCount = exports.operationsGetMigrationById = exports.operationsGetMigrations = exports.operationsGetUpdateConsensusKeyOpsCount = exports.operationsGetUpdateConsensusKeyByHash = exports.operationsGetUpdateConsensusKeyOps = exports.operationsGetIncreasePaidStorageCount = exports.operationsGetIncreasePaidStorageByHash = exports.operationsGetIncreasePaidStorageOps = exports.operationsGetTxRollupSubmitBatchOpsCount = exports.operationsGetTxRollupSubmitBatchStatus = exports.operationsGetTxRollupSubmitBatchOpsByHash = exports.operationsGetTxRollupSubmitBatchOps = exports.operationsGetTxRollupReturnBondOpsCount = exports.operationsGetTxRollupReturnBondStatus = exports.operationsGetTxRollupReturnBondOpsByHash = exports.operationsGetTxRollupReturnBondOps = exports.operationsGetTxRollupRemoveCommitmentOpsCount = exports.operationsGetTxRollupRemoveCommitmentStatus = exports.operationsGetTxRollupRemoveCommitmentOpsByHash = exports.operationsGetTxRollupRemoveCommitmentOps = exports.operationsGetTxRollupRejectionOpsCount = exports.operationsGetTxRollupRejectionStatus = exports.operationsGetTxRollupRejectionOpsByHash = exports.operationsGetTxRollupRejectionOps = exports.operationsGetTxRollupOriginationOpsCount = exports.operationsGetTxRollupOriginationStatus = exports.operationsGetTxRollupOriginationOpsByHash = exports.operationsGetTxRollupOriginationOps = exports.operationsGetTxRollupFinalizeCommitmentOpsCount = exports.operationsGetTxRollupFinalizeCommitmentStatus = exports.operationsGetTxRollupFinalizeCommitmentOpsByHash = exports.operationsGetTxRollupFinalizeCommitmentOps = exports.operationsGetTxRollupDispatchTicketsOpsCount = exports.operationsGetTxRollupDispatchTicketsStatus = void 0;
exports.votingGetLatestVoting = exports.votingGetCurrentEpoch = exports.votingGetEpoch = exports.votingGetEpochs = exports.votingGetPeriodVoter2 = exports.votingGetPeriodVoters2 = exports.votingGetPeriodVoter = exports.votingGetPeriodVoters = exports.votingGetCurrentPeriod = exports.votingGetPeriod = exports.votingGetPeriods = exports.votingGetProposalByHash = exports.votingGetProposals = exports.votingGetProposalsCount = exports.tokensGetTokenBalances2 = exports.tokensGetTokenTransfers = exports.tokensGetTokenTransfersCount = exports.tokensGetTokenBalances = exports.tokensGetTokenBalancesCount = exports.tokensGetTokens = exports.tokensGetTokensCount = exports.statisticsGetCycles = exports.statisticsGetCyclesAll = exports.statisticsGetDaily = exports.statisticsGet = exports.softwareGetCount = exports.softwareGet = exports.rightsGet = exports.rightsGetCount = exports.rewardsGetRewardSplitDelegator = exports.rewardsGetRewardSplit = exports.rewardsGetDelegatorRewardsByCycle = exports.rewardsGetDelegatorRewards = exports.rewardsGetDelegatorRewardsCount = exports.rewardsGetBakerRewardsByCycle = exports.rewardsGetBakerRewards = exports.rewardsGetBakerRewardsCount = exports.quotesGet = exports.quotesGetLast = exports.quotesGetCount = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * DO NOT MODIFY - This file has been generated using @tzkt/oazapfts.
 * See https://www.npmjs.com/package/@tzkt/oazapfts
 */
const Oazapfts = __importStar(require("@tzkt/oazapfts/runtime"));
const QS = __importStar(require("@tzkt/oazapfts/runtime/query"));
const queryParamParsers_1 = __importDefault(require("./queryParamParsers"));
exports.defaults = {
    baseUrl: 'https://api.tzkt.io',
};
const oazapfts = Oazapfts.runtime(exports.defaults);
exports.servers = {
    server1: 'https://api.tzkt.io',
};
/**
 * Get accounts
 */
function accountsGet({ id, address, $type, kind, delegate, balance, staked, lastActivity, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('type', $type)), queryParamParsers_1.default.queryParameter('kind', kind)), queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('staked', staked)), queryParamParsers_1.default.queryParameter('lastActivity', lastActivity)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.accountsGet = accountsGet;
/**
 * Get accounts count
 */
function accountsGetCount({ $type, kind, balance, staked, firstActivity, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('type', $type)), queryParamParsers_1.default.queryParameter('kind', kind)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('staked', staked)), queryParamParsers_1.default.queryParameter('firstActivity', firstActivity))))}`, Object.assign({}, opts)));
}
exports.accountsGetCount = accountsGetCount;
/**
 * Get account by address
 */
function accountsGetByAddress(address, { legacy, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}${QS.query(QS.explode({
        legacy,
    }))}`, Object.assign({}, opts)));
}
exports.accountsGetByAddress = accountsGetByAddress;
/**
 * Get account contracts
 */
function accountsGetContracts(address, { sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/contracts${QS.query(QS.explode(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.accountsGetContracts = accountsGetContracts;
/**
 * Get account delegators
 */
function accountsGetDelegators(address, { $type, balance, delegationLevel, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/delegators${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('type', $type)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('delegationLevel', delegationLevel)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.accountsGetDelegators = accountsGetDelegators;
/**
 * Get account operations
 */
function accountsGetOperations(address, { $type, initiator, sender, target, prevDelegate, newDelegate, contractManager, contractDelegate, originatedContract, accuser, offender, baker, level, timestamp, entrypoint, parameter, hasInternals, status, sort, lastId, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/operations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type: $type, sort,
        lastId,
        limit,
        micheline,
        quote }, queryParamParsers_1.default.queryParameter('initiator', initiator)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('target', target)), queryParamParsers_1.default.queryParameter('prevDelegate', prevDelegate)), queryParamParsers_1.default.queryParameter('newDelegate', newDelegate)), queryParamParsers_1.default.queryParameter('contractManager', contractManager)), queryParamParsers_1.default.queryParameter('contractDelegate', contractDelegate)), queryParamParsers_1.default.queryParameter('originatedContract', originatedContract)), queryParamParsers_1.default.queryParameter('accuser', accuser)), queryParamParsers_1.default.queryParameter('offender', offender)), queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('entrypoint', entrypoint)), queryParamParsers_1.default.jsonParameter('parameter', parameter)), queryParamParsers_1.default.queryParameter('hasInternals', hasInternals)), queryParamParsers_1.default.queryParameter('status', status))))}`, Object.assign({}, opts)));
}
exports.accountsGetOperations = accountsGetOperations;
/**
 * Get counter
 */
function accountsGetCounter(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/counter`, Object.assign({}, opts)));
}
exports.accountsGetCounter = accountsGetCounter;
/**
 * Get balance
 */
function accountsGetBalance(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance`, Object.assign({}, opts)));
}
exports.accountsGetBalance = accountsGetBalance;
/**
 * Get balance at level
 */
function accountsGetBalanceAtLevel(address, level, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(level)}`, Object.assign({}, opts)));
}
exports.accountsGetBalanceAtLevel = accountsGetBalanceAtLevel;
/**
 * Get balance at date
 */
function accountsGetBalanceAtDate(address, datetime, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(datetime)}`, Object.assign({}, opts)));
}
exports.accountsGetBalanceAtDate = accountsGetBalanceAtDate;
/**
 * Get balance history
 */
function accountsGetBalanceHistory(address, { step, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history${QS.query(QS.explode(Object.assign(Object.assign({ step,
        offset,
        limit,
        quote }, queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort))))}`, Object.assign({}, opts)));
}
exports.accountsGetBalanceHistory = accountsGetBalanceHistory;
/**
 * Get account report
 */
function accountsGetBalanceReport(address, { $from, to, currency, historical, delimiter, separator, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/accounts/${encodeURIComponent(address)}/report${QS.query(QS.explode({
        from: $from,
        to,
        currency,
        historical,
        delimiter,
        separator,
    }))}`, Object.assign({}, opts)));
}
exports.accountsGetBalanceReport = accountsGetBalanceReport;
/**
 * Get bigmaps count
 */
function bigMapsGetBigMapsCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/bigmaps/count', Object.assign({}, opts)));
}
exports.bigMapsGetBigMapsCount = bigMapsGetBigMapsCount;
/**
 * Get bigmaps
 */
function bigMapsGetBigMaps({ contract, path, tags, active, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ active,
        limit,
        micheline }, queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('path', path)), queryParamParsers_1.default.queryParameter('tags', tags)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.bigMapsGetBigMaps = bigMapsGetBigMaps;
/**
 * Get bigmap updates
 */
function bigMapsGetBigMapUpdates({ bigmap, path, contract, tags, action, value, level, timestamp, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/updates${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline }, queryParamParsers_1.default.queryParameter('bigmap', bigmap)), queryParamParsers_1.default.queryParameter('path', path)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('tags', tags)), queryParamParsers_1.default.queryParameter('action', action)), queryParamParsers_1.default.jsonParameter('value', value)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.bigMapsGetBigMapUpdates = bigMapsGetBigMapUpdates;
/**
 * Get bigmap by Id
 */
function bigMapsGetBigMapById(id, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.bigMapsGetBigMapById = bigMapsGetBigMapById;
/**
 * Get bigmap type
 */
function bigMapsGetBigMapType(id, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/type`, Object.assign({}, opts)));
}
exports.bigMapsGetBigMapType = bigMapsGetBigMapType;
/**
 * Get bigmap keys
 */
function bigMapsGetKeys(id, { active, key, value, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ active,
        limit,
        micheline }, queryParamParsers_1.default.jsonParameter('key', key)), queryParamParsers_1.default.jsonParameter('value', value)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.bigMapsGetKeys = bigMapsGetKeys;
/**
 * Get bigmap key
 */
function bigMapsGetKey(id, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.bigMapsGetKey = bigMapsGetKey;
/**
 * Get bigmap key updates
 */
function bigMapsGetKeyUpdates(id, key, { sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}/updates${QS.query(QS.explode(Object.assign(Object.assign({ limit,
        micheline }, queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.bigMapsGetKeyUpdates = bigMapsGetKeyUpdates;
/**
 * Get historical keys
 */
function bigMapsGetHistoricalKeys(id, level, { active, key, value, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ active,
        limit,
        micheline }, queryParamParsers_1.default.jsonParameter('key', key)), queryParamParsers_1.default.jsonParameter('value', value)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.bigMapsGetHistoricalKeys = bigMapsGetHistoricalKeys;
/**
 * Get historical key
 */
function bigMapsGetKey2(id, level, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.bigMapsGetKey2 = bigMapsGetKey2;
/**
 * Get blocks count
 */
function blocksGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/blocks/count', Object.assign({}, opts)));
}
exports.blocksGetCount = blocksGetCount;
/**
 * Get blocks
 */
function blocksGet({ baker, anyof, proposer, producer, level, timestamp, priority, blockRound, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('proposer', proposer)), queryParamParsers_1.default.queryParameter('producer', producer)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('priority', priority)), queryParamParsers_1.default.queryParameter('blockRound', blockRound)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.blocksGet = blocksGet;
/**
 * Get block by hash
 */
function blocksGetByHash(hash, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(hash)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.blocksGetByHash = blocksGetByHash;
/**
 * Get block by level
 */
function blocksGetByLevel(level, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.blocksGetByLevel = blocksGetByLevel;
/**
 * Get timestamp by level
 */
function blocksGetByLevel2(level, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}/timestamp`, Object.assign({}, opts)));
}
exports.blocksGetByLevel2 = blocksGetByLevel2;
/**
 * Get block by timestamp
 */
function blocksGetByDate(timestamp, { operations, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}${QS.query(QS.explode({
        operations,
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.blocksGetByDate = blocksGetByDate;
/**
 * Get level by timestamp
 */
function blocksGetByDate2(timestamp, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}/level`, Object.assign({}, opts)));
}
exports.blocksGetByDate2 = blocksGetByDate2;
/**
 * Get commitment by blinded address
 */
function commitmentsGet(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/${encodeURIComponent(address)}`, Object.assign({}, opts)));
}
exports.commitmentsGet = commitmentsGet;
/**
 * Get commitments
 */
function commitmentsGetAll({ activated, activationLevel, balance, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ activated,
        limit }, queryParamParsers_1.default.queryParameter('activationLevel', activationLevel)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.commitmentsGetAll = commitmentsGetAll;
/**
 * Get commitments count
 */
function commitmentsGetCount({ activated, balance, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/count${QS.query(QS.explode(Object.assign({ activated }, queryParamParsers_1.default.queryParameter('balance', balance))))}`, Object.assign({}, opts)));
}
exports.commitmentsGetCount = commitmentsGetCount;
/**
 * Get global constants
 */
function constantsGet({ address, creationLevel, creationTime, creator, refs, size, select, sort, offset, limit, format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        format }, queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('creationLevel', creationLevel)), queryParamParsers_1.default.queryParameter('creationTime', creationTime)), queryParamParsers_1.default.queryParameter('creator', creator)), queryParamParsers_1.default.queryParameter('refs', refs)), queryParamParsers_1.default.queryParameter('size', size)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.constantsGet = constantsGet;
/**
 * Get global constant by address
 */
function constantsGetByAddress(address, { format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/${encodeURIComponent(address)}${QS.query(QS.explode({
        format,
    }))}`, Object.assign({}, opts)));
}
exports.constantsGetByAddress = constantsGetByAddress;
/**
 * Get global constants count
 */
function constantsGetCount({ refs, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/count${QS.query(QS.explode(Object.assign({}, queryParamParsers_1.default.queryParameter('refs', refs))))}`, Object.assign({}, opts)));
}
exports.constantsGetCount = constantsGetCount;
/**
 * Get contracts
 */
function contractsGet({ address, kind, tzips, creator, manager, delegate, balance, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        includeStorage }, queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('kind', kind)), queryParamParsers_1.default.queryParameter('tzips', tzips)), queryParamParsers_1.default.queryParameter('creator', creator)), queryParamParsers_1.default.queryParameter('manager', manager)), queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('lastActivity', lastActivity)), queryParamParsers_1.default.queryParameter('typeHash', typeHash)), queryParamParsers_1.default.queryParameter('codeHash', codeHash)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGet = contractsGet;
/**
 * Get contracts count
 */
function contractsGetCount({ kind, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/count${QS.query(QS.explode(Object.assign({}, queryParamParsers_1.default.queryParameter('kind', kind))))}`, Object.assign({}, opts)));
}
exports.contractsGetCount = contractsGetCount;
/**
 * Get contract by address
 */
function contractsGetByAddress(address, { legacy, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}${QS.query(QS.explode({
        legacy,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetByAddress = contractsGetByAddress;
/**
 * Get same contracts
 */
function contractsGetSame(address, { select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/same${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit,
        includeStorage }, queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetSame = contractsGetSame;
/**
 * Get similar contracts
 */
function contractsGetSimilar(address, { select, sort, offset, limit, includeStorage, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/similar${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit,
        includeStorage }, queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetSimilar = contractsGetSimilar;
/**
 * Get contract code
 */
function contractsGetCode(address, { level, format, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/code${QS.query(QS.explode({
        level,
        format,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetCode = contractsGetCode;
/**
 * Get JSON Schema [2020-12] interface for the contract
 */
function contractsGetInterface(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/interface`, Object.assign({}, opts)));
}
exports.contractsGetInterface = contractsGetInterface;
/**
 * Get contract entrypoints
 */
function contractsGetEntrypoints(address, { all, json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints${QS.query(QS.explode({
        all,
        json,
        micheline,
        michelson,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetEntrypoints = contractsGetEntrypoints;
/**
 * Get entrypoint by name
 */
function contractsGetEntrypointByName(address, name, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetEntrypointByName = contractsGetEntrypointByName;
/**
 * Get contract views
 */
function contractsGetContractViews(address, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetContractViews = contractsGetContractViews;
/**
 * Get view by name
 */
function contractsGetContractViewByName(address, name, { json, micheline, michelson, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views/${encodeURIComponent(name)}${QS.query(QS.explode({
        json,
        micheline,
        michelson,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetContractViewByName = contractsGetContractViewByName;
/**
 * Build entrypoint parameters
 */
function contractsBuildEntrypointParametersGet(address, name, { value, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build${QS.query(QS.explode({
        value,
    }))}`, Object.assign({}, opts)));
}
exports.contractsBuildEntrypointParametersGet = contractsBuildEntrypointParametersGet;
/**
 * Build entrypoint parameters
 */
function contractsBuildEntrypointParametersPost(address, name, body, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build`, oazapfts.json(Object.assign(Object.assign({}, opts), { method: 'POST', body }))));
}
exports.contractsBuildEntrypointParametersPost = contractsBuildEntrypointParametersPost;
/**
 * Get contract storage
 */
function contractsGetStorage(address, { level, path, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage${QS.query(QS.explode({
        level,
        path,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetStorage = contractsGetStorage;
/**
 * Get contract storage schema
 */
function contractsGetStorageSchema(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage/schema${QS.query(QS.explode({
        level,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetStorageSchema = contractsGetStorageSchema;
/**
 * Get contract storage history
 */
function contractsGetStorageHistory(address, { lastId, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/history${QS.query(QS.explode({
        lastId,
        limit,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetStorageHistory = contractsGetStorageHistory;
/**
 * Get raw contract storage
 */
function contractsGetRawStorage(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw${QS.query(QS.explode({
        level,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetRawStorage = contractsGetRawStorage;
/**
 * Get raw contract storage schema
 */
function contractsGetRawStorageSchema(address, { level, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/schema${QS.query(QS.explode({
        level,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetRawStorageSchema = contractsGetRawStorageSchema;
/**
 * Get raw contract storage history
 */
function contractsGetRawStorageHistory(address, { lastId, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/history${QS.query(QS.explode({
        lastId,
        limit,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetRawStorageHistory = contractsGetRawStorageHistory;
/**
 * Get contract bigmaps
 */
function contractsGetBigMaps(address, { tags, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline }, queryParamParsers_1.default.queryParameter('tags', tags)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetBigMaps = contractsGetBigMaps;
/**
 * Get bigmap by name
 */
function contractsGetBigMapByName(address, name, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetBigMapByName = contractsGetBigMapByName;
/**
 * Get bigmap keys
 */
function contractsGetBigMapByNameKeys(address, name, { active, key, value, lastLevel, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ active,
        limit,
        micheline }, queryParamParsers_1.default.jsonParameter('key', key)), queryParamParsers_1.default.jsonParameter('value', value)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetBigMapByNameKeys = contractsGetBigMapByNameKeys;
/**
 * Get bigmap key
 */
function contractsGetKey(address, name, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetKey = contractsGetKey;
/**
 * Get bigmap key updates
 */
function contractsGetKeyUpdates(address, name, key, { sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}/updates${QS.query(QS.explode(Object.assign(Object.assign({ limit,
        micheline }, queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetKeyUpdates = contractsGetKeyUpdates;
/**
 * Get historical keys
 */
function contractsGetHistoricalKeys(address, name, level, { active, key, value, select, sort, offset, limit, micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ active,
        limit,
        micheline }, queryParamParsers_1.default.jsonParameter('key', key)), queryParamParsers_1.default.jsonParameter('value', value)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.contractsGetHistoricalKeys = contractsGetHistoricalKeys;
/**
 * Get historical key
 */
function contractsGetKey2(address, name, level, key, { micheline, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${QS.query(QS.explode({
        micheline,
    }))}`, Object.assign({}, opts)));
}
exports.contractsGetKey2 = contractsGetKey2;
/**
 * Get cycles count
 */
function cyclesGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/cycles/count', Object.assign({}, opts)));
}
exports.cyclesGetCount = cyclesGetCount;
/**
 * Get cycles
 */
function cyclesGet({ snapshotIndex, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('snapshotIndex', snapshotIndex)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.cyclesGet = cyclesGet;
/**
 * Get cycle by index
 */
function cyclesGetByIndex(index, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles/${encodeURIComponent(index)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.cyclesGetByIndex = cyclesGetByIndex;
/**
 * Get delegates
 */
function delegatesGet({ active, lastActivity, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('active', active)), queryParamParsers_1.default.queryParameter('lastActivity', lastActivity)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.delegatesGet = delegatesGet;
/**
 * Get delegates count
 */
function delegatesGetCount({ active, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/count${QS.query(QS.explode(Object.assign({}, queryParamParsers_1.default.queryParameter('active', active))))}`, Object.assign({}, opts)));
}
exports.delegatesGetCount = delegatesGetCount;
/**
 * Get delegate by address
 */
function delegatesGetByAddress(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/${encodeURIComponent(address)}`, Object.assign({}, opts)));
}
exports.delegatesGetByAddress = delegatesGetByAddress;
/**
 * Get domains count
 */
function domainsGetCount({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('name', name)), queryParamParsers_1.default.queryParameter('owner', owner)), queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('reverse', reverse)), queryParamParsers_1.default.queryParameter('expiration', expiration)), queryParamParsers_1.default.jsonParameter('data', data)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime))))}`, Object.assign({}, opts)));
}
exports.domainsGetCount = domainsGetCount;
/**
 * Get domains
 */
function domainsGet({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('name', name)), queryParamParsers_1.default.queryParameter('owner', owner)), queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('reverse', reverse)), queryParamParsers_1.default.queryParameter('expiration', expiration)), queryParamParsers_1.default.jsonParameter('data', data)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.domainsGet = domainsGet;
/**
 * Get domain by name
 */
function domainsGetByName(name, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/${encodeURIComponent(name)}`, Object.assign({}, opts)));
}
exports.domainsGetByName = domainsGetByName;
/**
 * Get contract events count
 */
function eventsGetContractEventsCount({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('codeHash', codeHash)), queryParamParsers_1.default.queryParameter('tag', tag)), queryParamParsers_1.default.jsonParameter('payload', payload)), queryParamParsers_1.default.queryParameter('transactionId', transactionId))))}`, Object.assign({}, opts)));
}
exports.eventsGetContractEventsCount = eventsGetContractEventsCount;
/**
 * Get contract events
 */
function eventsGetContractEvents({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('codeHash', codeHash)), queryParamParsers_1.default.queryParameter('tag', tag)), queryParamParsers_1.default.jsonParameter('payload', payload)), queryParamParsers_1.default.queryParameter('transactionId', transactionId)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.eventsGetContractEvents = eventsGetContractEvents;
/**
 * Get indexer head
 */
function headGet(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/head', Object.assign({}, opts)));
}
exports.headGet = headGet;
/**
 * Inject operation
 */
function helpersPostInject(body, { $async, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/helpers/inject${QS.query(QS.explode({
        async: $async,
    }))}`, oazapfts.json(Object.assign(Object.assign({}, opts), { method: 'POST', body }))));
}
exports.helpersPostInject = helpersPostInject;
/**
 * Run script view
 */
function helpersPostRunScriptView(contract, name, body, opts) {
    return oazapfts.ok(oazapfts.fetchBlob(`/v1/helpers/view/${encodeURIComponent(contract)}/${encodeURIComponent(name)}`, oazapfts.json(Object.assign(Object.assign({}, opts), { method: 'POST', body }))));
}
exports.helpersPostRunScriptView = helpersPostRunScriptView;
/**
 * Get operations by hash
 */
function operationsGetByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetByHash = operationsGetByHash;
/**
 * Get operations by hash and counter
 */
function operationsGetByHashCounter(hash, counter, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetByHashCounter = operationsGetByHashCounter;
/**
 * Get operations by hash, counter and nonce
 */
function operationsGetByHashCounterNonce(hash, counter, nonce, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetByHashCounterNonce = operationsGetByHashCounterNonce;
/**
 * Get operation status
 */
function operationsGetStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetStatus = operationsGetStatus;
/**
 * Get endorsements
 */
function operationsGetEndorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsements = operationsGetEndorsements;
/**
 * Get endorsement by hash
 */
function operationsGetEndorsementByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsementByHash = operationsGetEndorsementByHash;
/**
 * Get endorsements count
 */
function operationsGetEndorsementsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsementsCount = operationsGetEndorsementsCount;
/**
 * Get preendorsements
 */
function operationsGetPreendorsements({ delegate, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetPreendorsements = operationsGetPreendorsements;
/**
 * Get preendorsement by hash
 */
function operationsGetPreendorsementByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetPreendorsementByHash = operationsGetPreendorsementByHash;
/**
 * Get preendorsements count
 */
function operationsGetPreendorsementsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetPreendorsementsCount = operationsGetPreendorsementsCount;
/**
 * Get ballots
 */
function operationsGetBallots({ delegate, level, timestamp, epoch, period, proposal, vote, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('epoch', epoch)), queryParamParsers_1.default.queryParameter('period', period)), queryParamParsers_1.default.queryParameter('proposal', proposal)), queryParamParsers_1.default.queryParameter('vote', vote)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetBallots = operationsGetBallots;
/**
 * Get ballot by hash
 */
function operationsGetBallotByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetBallotByHash = operationsGetBallotByHash;
/**
 * Get ballots count
 */
function operationsGetBallotsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetBallotsCount = operationsGetBallotsCount;
/**
 * Get proposals
 */
function operationsGetProposals({ delegate, level, timestamp, epoch, period, proposal, duplicated, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('epoch', epoch)), queryParamParsers_1.default.queryParameter('period', period)), queryParamParsers_1.default.queryParameter('proposal', proposal)), queryParamParsers_1.default.queryParameter('duplicated', duplicated)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetProposals = operationsGetProposals;
/**
 * Get proposal by hash
 */
function operationsGetProposalByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetProposalByHash = operationsGetProposalByHash;
/**
 * Get proposals count
 */
function operationsGetProposalsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetProposalsCount = operationsGetProposalsCount;
/**
 * Get activations
 */
function operationsGetActivations({ account, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('account', account)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetActivations = operationsGetActivations;
/**
 * Get activation by hash
 */
function operationsGetActivationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetActivationByHash = operationsGetActivationByHash;
/**
 * Get activations count
 */
function operationsGetActivationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetActivationsCount = operationsGetActivationsCount;
/**
 * Get double baking
 */
function operationsGetDoubleBaking({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('accuser', accuser)), queryParamParsers_1.default.queryParameter('offender', offender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleBaking = operationsGetDoubleBaking;
/**
 * Get double baking by hash
 */
function operationsGetDoubleBakingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleBakingByHash = operationsGetDoubleBakingByHash;
/**
 * Get double baking count
 */
function operationsGetDoubleBakingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleBakingCount = operationsGetDoubleBakingCount;
/**
 * Get double endorsing
 */
function operationsGetDoubleEndorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('accuser', accuser)), queryParamParsers_1.default.queryParameter('offender', offender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleEndorsing = operationsGetDoubleEndorsing;
/**
 * Get double endorsing by hash
 */
function operationsGetDoubleEndorsingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleEndorsingByHash = operationsGetDoubleEndorsingByHash;
/**
 * Get double endorsing count
 */
function operationsGetDoubleEndorsingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoubleEndorsingCount = operationsGetDoubleEndorsingCount;
/**
 * Get double preendorsing
 */
function operationsGetDoublePreendorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('accuser', accuser)), queryParamParsers_1.default.queryParameter('offender', offender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoublePreendorsing = operationsGetDoublePreendorsing;
/**
 * Get double preendorsing by hash
 */
function operationsGetDoublePreendorsingByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetDoublePreendorsingByHash = operationsGetDoublePreendorsingByHash;
/**
 * Get double preendorsing count
 */
function operationsGetDoublePreendorsingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetDoublePreendorsingCount = operationsGetDoublePreendorsingCount;
/**
 * Get nonce revelations
 */
function operationsGetNonceRevelations({ anyof, baker, sender, level, revealedCycle, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('revealedCycle', revealedCycle)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetNonceRevelations = operationsGetNonceRevelations;
/**
 * Get nonce revelation by hash
 */
function operationsGetNonceRevelationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetNonceRevelationByHash = operationsGetNonceRevelationByHash;
/**
 * Get nonce revelations count
 */
function operationsGetNonceRevelationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetNonceRevelationsCount = operationsGetNonceRevelationsCount;
/**
 * Get vdf revelations
 */
function operationsGetVdfRevelations({ baker, level, cycle, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetVdfRevelations = operationsGetVdfRevelations;
/**
 * Get vdf revelation by hash
 */
function operationsGetVdfRevelationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetVdfRevelationByHash = operationsGetVdfRevelationByHash;
/**
 * Get vdf revelations count
 */
function operationsGetVdfRevelationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetVdfRevelationsCount = operationsGetVdfRevelationsCount;
/**
 * Get drain delegate
 */
function operationsGetDrainDelegateOps({ anyof, delegate, target, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('delegate', delegate)), queryParamParsers_1.default.queryParameter('target', target)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetDrainDelegateOps = operationsGetDrainDelegateOps;
/**
 * Get drain delegate by hash
 */
function operationsGetDrainDelegateByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetDrainDelegateByHash = operationsGetDrainDelegateByHash;
/**
 * Get drain delegate count
 */
function operationsGetDrainDelegateOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetDrainDelegateOpsCount = operationsGetDrainDelegateOpsCount;
/**
 * Get delegations
 */
function operationsGetDelegations({ anyof, initiator, sender, prevDelegate, newDelegate, level, timestamp, senderCodeHash, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('initiator', initiator)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('prevDelegate', prevDelegate)), queryParamParsers_1.default.queryParameter('newDelegate', newDelegate)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('senderCodeHash', senderCodeHash)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetDelegations = operationsGetDelegations;
/**
 * Get delegation by hash
 */
function operationsGetDelegationByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetDelegationByHash = operationsGetDelegationByHash;
/**
 * Get delegation status
 */
function operationsGetDelegationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetDelegationStatus = operationsGetDelegationStatus;
/**
 * Get delegations count
 */
function operationsGetDelegationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetDelegationsCount = operationsGetDelegationsCount;
/**
 * Get originations
 */
function operationsGetOriginations({ anyof, initiator, sender, contractManager, contractDelegate, originatedContract, id, typeHash, codeHash, level, timestamp, senderCodeHash, anyCodeHash, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('initiator', initiator)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('contractManager', contractManager)), queryParamParsers_1.default.queryParameter('contractDelegate', contractDelegate)), queryParamParsers_1.default.queryParameter('originatedContract', originatedContract)), queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('typeHash', typeHash)), queryParamParsers_1.default.queryParameter('codeHash', codeHash)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('senderCodeHash', senderCodeHash)), queryParamParsers_1.default.queryParameter('anyCodeHash', anyCodeHash)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetOriginations = operationsGetOriginations;
/**
 * Get origination by hash
 */
function operationsGetOriginationByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetOriginationByHash = operationsGetOriginationByHash;
/**
 * Get origination status
 */
function operationsGetOriginationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetOriginationStatus = operationsGetOriginationStatus;
/**
 * Get originations count
 */
function operationsGetOriginationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetOriginationsCount = operationsGetOriginationsCount;
/**
 * Get transactions
 */
function operationsGetTransactions({ anyof, initiator, sender, target, amount, id, level, timestamp, senderCodeHash, targetCodeHash, codeHash, entrypoint, parameter, hasInternals, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('initiator', initiator)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('target', target)), queryParamParsers_1.default.queryParameter('amount', amount)), queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('senderCodeHash', senderCodeHash)), queryParamParsers_1.default.queryParameter('targetCodeHash', targetCodeHash)), queryParamParsers_1.default.queryParameter('codeHash', codeHash)), queryParamParsers_1.default.queryParameter('entrypoint', entrypoint)), queryParamParsers_1.default.jsonParameter('parameter', parameter)), queryParamParsers_1.default.queryParameter('hasInternals', hasInternals)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTransactions = operationsGetTransactions;
/**
 * Get transaction by hash
 */
function operationsGetTransactionByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTransactionByHash = operationsGetTransactionByHash;
/**
 * Get transaction by hash and counter
 */
function operationsGetTransactionByHashCounter(hash, counter, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTransactionByHashCounter = operationsGetTransactionByHashCounter;
/**
 * Get transaction by hash, counter and nonce
 */
function operationsGetTransactionByHashCounterNonce(hash, counter, nonce, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTransactionByHashCounterNonce = operationsGetTransactionByHashCounterNonce;
/**
 * Get transaction status
 */
function operationsGetTransactionStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTransactionStatus = operationsGetTransactionStatus;
/**
 * Get transactions count
 */
function operationsGetTransactionsCount({ anyof, initiator, sender, target, amount, level, timestamp, entrypoint, parameter, status, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('initiator', initiator)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('target', target)), queryParamParsers_1.default.queryParameter('amount', amount)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('entrypoint', entrypoint)), queryParamParsers_1.default.jsonParameter('parameter', parameter)), queryParamParsers_1.default.queryParameter('status', status))))}`, Object.assign({}, opts)));
}
exports.operationsGetTransactionsCount = operationsGetTransactionsCount;
/**
 * Get reveals
 */
function operationsGetReveals({ sender, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetReveals = operationsGetReveals;
/**
 * Get reveal by hash
 */
function operationsGetRevealByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetRevealByHash = operationsGetRevealByHash;
/**
 * Get reveal status
 */
function operationsGetRevealStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetRevealStatus = operationsGetRevealStatus;
/**
 * Get reveals count
 */
function operationsGetRevealsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetRevealsCount = operationsGetRevealsCount;
/**
 * Get register constants
 */
function operationsGetRegisterConstants({ sender, address, level, timestamp, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('address', address)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetRegisterConstants = operationsGetRegisterConstants;
/**
 * Get register constant by hash
 */
function operationsGetRegisterConstantByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetRegisterConstantByHash = operationsGetRegisterConstantByHash;
/**
 * Get register constant status
 */
function operationsGetRegisterConstantStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetRegisterConstantStatus = operationsGetRegisterConstantStatus;
/**
 * Get register constants count
 */
function operationsGetRegisterConstantsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetRegisterConstantsCount = operationsGetRegisterConstantsCount;
/**
 * Get set deposits limits
 */
function operationsGetSetDepositsLimits({ sender, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetSetDepositsLimits = operationsGetSetDepositsLimits;
/**
 * Get set deposits limit by hash
 */
function operationsGetSetDepositsLimitByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetSetDepositsLimitByHash = operationsGetSetDepositsLimitByHash;
/**
 * Get set deposits limit status
 */
function operationsGetSetDepositsLimitStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetSetDepositsLimitStatus = operationsGetSetDepositsLimitStatus;
/**
 * Get set deposits limits count
 */
function operationsGetSetDepositsLimitsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetSetDepositsLimitsCount = operationsGetSetDepositsLimitsCount;
/**
 * Get transfer ticket
 */
function operationsGetTransferTicketOps({ anyof, sender, target, ticketer, level, timestamp, status, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('target', target)), queryParamParsers_1.default.queryParameter('ticketer', ticketer)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTransferTicketOps = operationsGetTransferTicketOps;
/**
 * Get transfer ticket by hash
 */
function operationsGetTransferTicketOpsByHash(hash, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTransferTicketOpsByHash = operationsGetTransferTicketOpsByHash;
/**
 * Get transfer ticket status
 */
function operationsGetTransferTicketStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTransferTicketStatus = operationsGetTransferTicketStatus;
/**
 * Get transfer ticket count
 */
function operationsGetTransferTicketOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTransferTicketOpsCount = operationsGetTransferTicketOpsCount;
/**
 * Get tx rollup commit
 */
function operationsGetTxRollupCommitOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupCommitOps = operationsGetTxRollupCommitOps;
/**
 * Get tx rollup commit by hash
 */
function operationsGetTxRollupCommitOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupCommitOpsByHash = operationsGetTxRollupCommitOpsByHash;
/**
 * Get tx rollup commit status
 */
function operationsGetTxRollupCommitStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupCommitStatus = operationsGetTxRollupCommitStatus;
/**
 * Get tx rollup commit count
 */
function operationsGetTxRollupCommitOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupCommitOpsCount = operationsGetTxRollupCommitOpsCount;
/**
 * Get tx rollup dispatch tickets
 */
function operationsGetTxRollupDispatchTicketsOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupDispatchTicketsOps = operationsGetTxRollupDispatchTicketsOps;
/**
 * Get tx rollup dispatch tickets by hash
 */
function operationsGetTxRollupDispatchTicketsOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupDispatchTicketsOpsByHash = operationsGetTxRollupDispatchTicketsOpsByHash;
/**
 * Get tx rollup dispatch tickets status
 */
function operationsGetTxRollupDispatchTicketsStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupDispatchTicketsStatus = operationsGetTxRollupDispatchTicketsStatus;
/**
 * Get tx rollup dispatch tickets count
 */
function operationsGetTxRollupDispatchTicketsOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupDispatchTicketsOpsCount = operationsGetTxRollupDispatchTicketsOpsCount;
/**
 * Get tx rollup finalize commitment
 */
function operationsGetTxRollupFinalizeCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupFinalizeCommitmentOps = operationsGetTxRollupFinalizeCommitmentOps;
/**
 * Get tx rollup finalize commitment by hash
 */
function operationsGetTxRollupFinalizeCommitmentOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupFinalizeCommitmentOpsByHash = operationsGetTxRollupFinalizeCommitmentOpsByHash;
/**
 * Get tx rollup finalize commitment status
 */
function operationsGetTxRollupFinalizeCommitmentStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupFinalizeCommitmentStatus = operationsGetTxRollupFinalizeCommitmentStatus;
/**
 * Get tx rollup finalize commitment count
 */
function operationsGetTxRollupFinalizeCommitmentOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupFinalizeCommitmentOpsCount = operationsGetTxRollupFinalizeCommitmentOpsCount;
/**
 * Get tx rollup origination
 */
function operationsGetTxRollupOriginationOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupOriginationOps = operationsGetTxRollupOriginationOps;
/**
 * Get tx rollup origination by hash
 */
function operationsGetTxRollupOriginationOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupOriginationOpsByHash = operationsGetTxRollupOriginationOpsByHash;
/**
 * Get tx rollup origination status
 */
function operationsGetTxRollupOriginationStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupOriginationStatus = operationsGetTxRollupOriginationStatus;
/**
 * Get tx rollup origination count
 */
function operationsGetTxRollupOriginationOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupOriginationOpsCount = operationsGetTxRollupOriginationOpsCount;
/**
 * Get tx rollup rejection
 */
function operationsGetTxRollupRejectionOps({ anyof, sender, committer, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('committer', committer)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRejectionOps = operationsGetTxRollupRejectionOps;
/**
 * Get tx rollup rejection by hash
 */
function operationsGetTxRollupRejectionOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRejectionOpsByHash = operationsGetTxRollupRejectionOpsByHash;
/**
 * Get tx rollup rejection status
 */
function operationsGetTxRollupRejectionStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRejectionStatus = operationsGetTxRollupRejectionStatus;
/**
 * Get tx rollup rejection count
 */
function operationsGetTxRollupRejectionOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRejectionOpsCount = operationsGetTxRollupRejectionOpsCount;
/**
 * Get tx rollup remove commitment
 */
function operationsGetTxRollupRemoveCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRemoveCommitmentOps = operationsGetTxRollupRemoveCommitmentOps;
/**
 * Get tx rollup remove commitment by hash
 */
function operationsGetTxRollupRemoveCommitmentOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRemoveCommitmentOpsByHash = operationsGetTxRollupRemoveCommitmentOpsByHash;
/**
 * Get tx rollup remove commitment status
 */
function operationsGetTxRollupRemoveCommitmentStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRemoveCommitmentStatus = operationsGetTxRollupRemoveCommitmentStatus;
/**
 * Get tx rollup remove commitment count
 */
function operationsGetTxRollupRemoveCommitmentOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupRemoveCommitmentOpsCount = operationsGetTxRollupRemoveCommitmentOpsCount;
/**
 * Get tx rollup return bond
 */
function operationsGetTxRollupReturnBondOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupReturnBondOps = operationsGetTxRollupReturnBondOps;
/**
 * Get tx rollup return bond by hash
 */
function operationsGetTxRollupReturnBondOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupReturnBondOpsByHash = operationsGetTxRollupReturnBondOpsByHash;
/**
 * Get tx rollup return bond status
 */
function operationsGetTxRollupReturnBondStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupReturnBondStatus = operationsGetTxRollupReturnBondStatus;
/**
 * Get tx rollup return bond count
 */
function operationsGetTxRollupReturnBondOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupReturnBondOpsCount = operationsGetTxRollupReturnBondOpsCount;
/**
 * Get tx rollup submit batch
 */
function operationsGetTxRollupSubmitBatchOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('rollup', rollup)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupSubmitBatchOps = operationsGetTxRollupSubmitBatchOps;
/**
 * Get tx rollup submit batch by hash
 */
function operationsGetTxRollupSubmitBatchOpsByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupSubmitBatchOpsByHash = operationsGetTxRollupSubmitBatchOpsByHash;
/**
 * Get tx rollup submit batch status
 */
function operationsGetTxRollupSubmitBatchStatus(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}/status`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupSubmitBatchStatus = operationsGetTxRollupSubmitBatchStatus;
/**
 * Get tx rollup submit batch count
 */
function operationsGetTxRollupSubmitBatchOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetTxRollupSubmitBatchOpsCount = operationsGetTxRollupSubmitBatchOpsCount;
/**
 * Get increase paid storage
 */
function operationsGetIncreasePaidStorageOps({ sender, contract, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetIncreasePaidStorageOps = operationsGetIncreasePaidStorageOps;
/**
 * Get increase paid storage by hash
 */
function operationsGetIncreasePaidStorageByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetIncreasePaidStorageByHash = operationsGetIncreasePaidStorageByHash;
/**
 * Get increase paid storage count
 */
function operationsGetIncreasePaidStorageCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetIncreasePaidStorageCount = operationsGetIncreasePaidStorageCount;
/**
 * Get update consensus key
 */
function operationsGetUpdateConsensusKeyOps({ sender, activationCycle, level, timestamp, status, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('sender', sender)), queryParamParsers_1.default.queryParameter('activationCycle', activationCycle)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetUpdateConsensusKeyOps = operationsGetUpdateConsensusKeyOps;
/**
 * Get update consensus key by hash
 */
function operationsGetUpdateConsensusKeyByHash(hash, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/${encodeURIComponent(hash)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetUpdateConsensusKeyByHash = operationsGetUpdateConsensusKeyByHash;
/**
 * Get update consensus key count
 */
function operationsGetUpdateConsensusKeyOpsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetUpdateConsensusKeyOpsCount = operationsGetUpdateConsensusKeyOpsCount;
/**
 * Get migrations
 */
function operationsGetMigrations({ account, kind, balanceChange, id, level, timestamp, select, sort, offset, limit, micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        micheline,
        quote }, queryParamParsers_1.default.queryParameter('account', account)), queryParamParsers_1.default.queryParameter('kind', kind)), queryParamParsers_1.default.queryParameter('balanceChange', balanceChange)), queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetMigrations = operationsGetMigrations;
/**
 * Get migration by id
 */
function operationsGetMigrationById(id, { micheline, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/${encodeURIComponent(id)}${QS.query(QS.explode({
        micheline,
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetMigrationById = operationsGetMigrationById;
/**
 * Get migrations count
 */
function operationsGetMigrationsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetMigrationsCount = operationsGetMigrationsCount;
/**
 * Get revelation penalties
 */
function operationsGetRevelationPenalties({ baker, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetRevelationPenalties = operationsGetRevelationPenalties;
/**
 * Get revelation penalty by id
 */
function operationsGetRevelationPenaltyById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetRevelationPenaltyById = operationsGetRevelationPenaltyById;
/**
 * Get revelation penalties count
 */
function operationsGetRevelationPenaltiesCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetRevelationPenaltiesCount = operationsGetRevelationPenaltiesCount;
/**
 * Get baking
 */
function operationsGetBaking({ baker, anyof, proposer, producer, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('proposer', proposer)), queryParamParsers_1.default.queryParameter('producer', producer)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetBaking = operationsGetBaking;
/**
 * Get baking by id
 */
function operationsGetBakingById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetBakingById = operationsGetBakingById;
/**
 * Get baking count
 */
function operationsGetBakingCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetBakingCount = operationsGetBakingCount;
/**
 * Get endorsing rewards
 */
function operationsGetEndorsingRewards({ baker, level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsingRewards = operationsGetEndorsingRewards;
/**
 * Get endorsing reward by id
 */
function operationsGetEndorsingRewardById(id, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/${encodeURIComponent(id)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsingRewardById = operationsGetEndorsingRewardById;
/**
 * Get endorsing rewards count
 */
function operationsGetEndorsingRewardsCount({ level, timestamp, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/count${QS.query(QS.explode(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp))))}`, Object.assign({}, opts)));
}
exports.operationsGetEndorsingRewardsCount = operationsGetEndorsingRewardsCount;
/**
 * Get protocols count
 */
function protocolsGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/protocols/count', Object.assign({}, opts)));
}
exports.protocolsGetCount = protocolsGetCount;
/**
 * Get protocols
 */
function protocolsGet({ sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols${QS.query(QS.explode(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.protocolsGet = protocolsGet;
/**
 * Get current protocol
 */
function protocolsGetCurrent(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/protocols/current', Object.assign({}, opts)));
}
exports.protocolsGetCurrent = protocolsGetCurrent;
/**
 * Get protocol by code
 */
function protocolsGetByCode(code, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(code)}`, Object.assign({}, opts)));
}
exports.protocolsGetByCode = protocolsGetByCode;
/**
 * Get protocol by hash
 */
function protocolsGetByHash(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(hash)}`, Object.assign({}, opts)));
}
exports.protocolsGetByHash = protocolsGetByHash;
/**
 * Get protocol by cycle
 */
function protocolsGetByCycle(cycle, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/cycles/${encodeURIComponent(cycle)}`, Object.assign({}, opts)));
}
exports.protocolsGetByCycle = protocolsGetByCycle;
/**
 * Get quotes count
 */
function quotesGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/quotes/count', Object.assign({}, opts)));
}
exports.quotesGetCount = quotesGetCount;
/**
 * Get last quote
 */
function quotesGetLast(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/quotes/last', Object.assign({}, opts)));
}
exports.quotesGetLast = quotesGetLast;
/**
 * Get quotes
 */
function quotesGet({ level, timestamp, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quotes${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.quotesGet = quotesGet;
/**
 * Get baker cycle rewards count
 */
function rewardsGetBakerRewardsCount(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/count`, Object.assign({}, opts)));
}
exports.rewardsGetBakerRewardsCount = rewardsGetBakerRewardsCount;
/**
 * Get baker cycle rewards
 */
function rewardsGetBakerRewards(address, { cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.rewardsGetBakerRewards = rewardsGetBakerRewards;
/**
 * Get baker cycle rewards by cycle
 */
function rewardsGetBakerRewardsByCycle(address, cycle, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.rewardsGetBakerRewardsByCycle = rewardsGetBakerRewardsByCycle;
/**
 * Get delegator cycle rewards count
 */
function rewardsGetDelegatorRewardsCount(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/count`, Object.assign({}, opts)));
}
exports.rewardsGetDelegatorRewardsCount = rewardsGetDelegatorRewardsCount;
/**
 * Get delegator cycle rewards
 */
function rewardsGetDelegatorRewards(address, { cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.rewardsGetDelegatorRewards = rewardsGetDelegatorRewards;
/**
 * Get delegator cycle rewards by cycle
 */
function rewardsGetDelegatorRewardsByCycle(address, cycle, { quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        quote,
    }))}`, Object.assign({}, opts)));
}
exports.rewardsGetDelegatorRewardsByCycle = rewardsGetDelegatorRewardsByCycle;
/**
 * Get reward split
 */
function rewardsGetRewardSplit(baker, cycle, { offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}${QS.query(QS.explode({
        offset,
        limit,
    }))}`, Object.assign({}, opts)));
}
exports.rewardsGetRewardSplit = rewardsGetRewardSplit;
/**
 * Get reward split delegator
 */
function rewardsGetRewardSplitDelegator(baker, cycle, delegator, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}/${encodeURIComponent(delegator)}`, Object.assign({}, opts)));
}
exports.rewardsGetRewardSplitDelegator = rewardsGetRewardSplitDelegator;
/**
 * Get rights count
 */
function rightsGetCount({ $type, baker, cycle, level, slots, round, priority, status, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rights/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('type', $type)), queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('slots', slots)), queryParamParsers_1.default.queryParameter('round', round)), queryParamParsers_1.default.queryParameter('priority', priority)), queryParamParsers_1.default.queryParameter('status', status))))}`, Object.assign({}, opts)));
}
exports.rightsGetCount = rightsGetCount;
/**
 * Get rights
 */
function rightsGet({ $type, baker, cycle, level, slots, round, priority, status, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/rights${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('type', $type)), queryParamParsers_1.default.queryParameter('baker', baker)), queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('slots', slots)), queryParamParsers_1.default.queryParameter('round', round)), queryParamParsers_1.default.queryParameter('priority', priority)), queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.rightsGet = rightsGet;
/**
 * Get baker software
 */
function softwareGet({ select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/software${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.softwareGet = softwareGet;
/**
 * Get software count
 */
function softwareGetCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/software/count', Object.assign({}, opts)));
}
exports.softwareGetCount = softwareGetCount;
/**
 * Get statistics
 */
function statisticsGet({ level, timestamp, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.statisticsGet = statisticsGet;
/**
 * Get daily statistics
 */
function statisticsGetDaily({ date, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/daily${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('date', date)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.statisticsGetDaily = statisticsGetDaily;
/**
 * Get cyclic statistics
 */
function statisticsGetCyclesAll({ cycle, select, sort, offset, limit, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/cyclic${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign({ limit,
        quote }, queryParamParsers_1.default.queryParameter('cycle', cycle)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.statisticsGetCyclesAll = statisticsGetCyclesAll;
/**
 * Get current statistics
 */
function statisticsGetCycles({ select, quote, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/current${QS.query(QS.explode(Object.assign({ quote }, queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.statisticsGetCycles = statisticsGetCycles;
/**
 * Get tokens count
 */
function tokensGetTokensCount({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('tokenId', tokenId)), queryParamParsers_1.default.queryParameter('standard', standard)), queryParamParsers_1.default.queryParameter('firstMinter', firstMinter)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime)), queryParamParsers_1.default.jsonParameter('metadata', metadata)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokensCount = tokensGetTokensCount;
/**
 * Get tokens
 */
function tokensGetTokens({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('contract', contract)), queryParamParsers_1.default.queryParameter('tokenId', tokenId)), queryParamParsers_1.default.queryParameter('standard', standard)), queryParamParsers_1.default.queryParameter('firstMinter', firstMinter)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime)), queryParamParsers_1.default.jsonParameter('metadata', metadata)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokens = tokensGetTokens;
/**
 * Get token balances count
 */
function tokensGetTokenBalancesCount({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'token.HasFilters': tokenHasFilters }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('account', account)), queryParamParsers_1.default.queryParameter('token.id', tokenId)), queryParamParsers_1.default.queryParameter('token.contract', tokenContract)), queryParamParsers_1.default.queryParameter('token.tokenId', tokenTokenId)), queryParamParsers_1.default.queryParameter('token.standard', tokenStandard)), queryParamParsers_1.default.jsonParameter('token.metadata', tokenMetadata)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokenBalancesCount = tokensGetTokenBalancesCount;
/**
 * Get token balances
 */
function tokensGetTokenBalances({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'token.HasFilters': tokenHasFilters, limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('account', account)), queryParamParsers_1.default.queryParameter('token.id', tokenId)), queryParamParsers_1.default.queryParameter('token.contract', tokenContract)), queryParamParsers_1.default.queryParameter('token.tokenId', tokenTokenId)), queryParamParsers_1.default.queryParameter('token.standard', tokenStandard)), queryParamParsers_1.default.jsonParameter('token.metadata', tokenMetadata)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('firstLevel', firstLevel)), queryParamParsers_1.default.queryParameter('firstTime', firstTime)), queryParamParsers_1.default.queryParameter('lastLevel', lastLevel)), queryParamParsers_1.default.queryParameter('lastTime', lastTime)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokenBalances = tokensGetTokenBalances;
/**
 * Get token transfers count
 */
function tokensGetTokenTransfersCount({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers/count${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'token.HasFilters': tokenHasFilters }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('token.id', tokenId)), queryParamParsers_1.default.queryParameter('token.contract', tokenContract)), queryParamParsers_1.default.queryParameter('token.tokenId', tokenTokenId)), queryParamParsers_1.default.queryParameter('token.standard', tokenStandard)), queryParamParsers_1.default.jsonParameter('token.metadata', tokenMetadata)), queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('from', $from)), queryParamParsers_1.default.queryParameter('to', to)), queryParamParsers_1.default.queryParameter('amount', amount)), queryParamParsers_1.default.queryParameter('transactionId', transactionId)), queryParamParsers_1.default.queryParameter('originationId', originationId)), queryParamParsers_1.default.queryParameter('migrationId', migrationId)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokenTransfersCount = tokensGetTokenTransfersCount;
/**
 * Get token transfers
 */
function tokensGetTokenTransfers({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'token.HasFilters': tokenHasFilters, limit }, queryParamParsers_1.default.queryParameter('id', id)), queryParamParsers_1.default.queryParameter('level', level)), queryParamParsers_1.default.queryParameter('timestamp', timestamp)), queryParamParsers_1.default.queryParameter('token.id', tokenId)), queryParamParsers_1.default.queryParameter('token.contract', tokenContract)), queryParamParsers_1.default.queryParameter('token.tokenId', tokenTokenId)), queryParamParsers_1.default.queryParameter('token.standard', tokenStandard)), queryParamParsers_1.default.jsonParameter('token.metadata', tokenMetadata)), queryParamParsers_1.default.anyofParameter('anyof', anyof)), queryParamParsers_1.default.queryParameter('from', $from)), queryParamParsers_1.default.queryParameter('to', to)), queryParamParsers_1.default.queryParameter('amount', amount)), queryParamParsers_1.default.queryParameter('transactionId', transactionId)), queryParamParsers_1.default.queryParameter('originationId', originationId)), queryParamParsers_1.default.queryParameter('migrationId', migrationId)), queryParamParsers_1.default.queryParameter('indexedAt', indexedAt)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokenTransfers = tokensGetTokenTransfers;
/**
 * Get historical token balances
 */
function tokensGetTokenBalances2(level, { account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, sort, offset, limit, select, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/historical_balances/${encodeURIComponent(level)}${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'token.HasFilters': tokenHasFilters, limit }, queryParamParsers_1.default.queryParameter('account', account)), queryParamParsers_1.default.queryParameter('token.id', tokenId)), queryParamParsers_1.default.queryParameter('token.contract', tokenContract)), queryParamParsers_1.default.queryParameter('token.tokenId', tokenTokenId)), queryParamParsers_1.default.queryParameter('token.standard', tokenStandard)), queryParamParsers_1.default.jsonParameter('token.metadata', tokenMetadata)), queryParamParsers_1.default.queryParameter('balance', balance)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset)), queryParamParsers_1.default.queryParameter('select', select))))}`, Object.assign({}, opts)));
}
exports.tokensGetTokenBalances2 = tokensGetTokenBalances2;
/**
 * Get proposals count
 */
function votingGetProposalsCount(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/proposals/count', Object.assign({}, opts)));
}
exports.votingGetProposalsCount = votingGetProposalsCount;
/**
 * Get proposals
 */
function votingGetProposals({ hash, epoch, select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals${QS.query(QS.explode(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('hash', hash)), queryParamParsers_1.default.queryParameter('epoch', epoch)), queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.votingGetProposals = votingGetProposals;
/**
 * Get proposal by hash
 */
function votingGetProposalByHash(hash, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals/${encodeURIComponent(hash)}`, Object.assign({}, opts)));
}
exports.votingGetProposalByHash = votingGetProposalByHash;
/**
 * Get voting periods
 */
function votingGetPeriods({ select, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('select', select)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.votingGetPeriods = votingGetPeriods;
/**
 * Get voting period by index
 */
function votingGetPeriod(index, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}`, Object.assign({}, opts)));
}
exports.votingGetPeriod = votingGetPeriod;
/**
 * Get current voting period
 */
function votingGetCurrentPeriod(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/periods/current', Object.assign({}, opts)));
}
exports.votingGetCurrentPeriod = votingGetCurrentPeriod;
/**
 * Get period voters
 */
function votingGetPeriodVoters(index, { status, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.votingGetPeriodVoters = votingGetPeriodVoters;
/**
 * Get period voter
 */
function votingGetPeriodVoter(index, address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters/${encodeURIComponent(address)}`, Object.assign({}, opts)));
}
exports.votingGetPeriodVoter = votingGetPeriodVoter;
/**
 * Get current period voters
 */
function votingGetPeriodVoters2({ status, sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters${QS.query(QS.explode(Object.assign(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('status', status)), queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.votingGetPeriodVoters2 = votingGetPeriodVoters2;
/**
 * Get current period voter
 */
function votingGetPeriodVoter2(address, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters/${encodeURIComponent(address)}`, Object.assign({}, opts)));
}
exports.votingGetPeriodVoter2 = votingGetPeriodVoter2;
/**
 * Get voting epochs
 */
function votingGetEpochs({ sort, offset, limit, } = {}, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs${QS.query(QS.explode(Object.assign(Object.assign({ limit }, queryParamParsers_1.default.queryParameter('sort', sort)), queryParamParsers_1.default.queryParameter('offset', offset))))}`, Object.assign({}, opts)));
}
exports.votingGetEpochs = votingGetEpochs;
/**
 * Get voting epoch by index
 */
function votingGetEpoch(index, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs/${encodeURIComponent(index)}`, Object.assign({}, opts)));
}
exports.votingGetEpoch = votingGetEpoch;
/**
 * Get current voting epoch
 */
function votingGetCurrentEpoch(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/epochs/current', Object.assign({}, opts)));
}
exports.votingGetCurrentEpoch = votingGetCurrentEpoch;
/**
 * Get latest voting
 */
function votingGetLatestVoting(opts) {
    return oazapfts.ok(oazapfts.fetchJson('/v1/voting/epochs/latest_voting', Object.assign({}, opts)));
}
exports.votingGetLatestVoting = votingGetLatestVoting;
//# sourceMappingURL=data:application/json;base64,