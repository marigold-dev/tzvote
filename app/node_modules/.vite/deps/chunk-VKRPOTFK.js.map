{
  "version": 3,
  "sources": ["../../@taquito/core/src/errors.ts", "../../@taquito/michel-codec/src/micheline.ts", "../../@taquito/michel-codec/src/scan.ts", "../../@taquito/michel-codec/src/michelson-types.ts", "../../@taquito/michel-codec/src/macros.ts", "../../@taquito/michel-codec/src/global-constants.ts", "../../@taquito/michel-codec/src/micheline-parser.ts", "../../@taquito/michel-codec/src/micheline-emitter.ts", "../../@taquito/michel-codec/src/base58.ts", "../../@taquito/michel-codec/src/errors.ts", "../../@taquito/michel-codec/src/utils.ts", "../../@taquito/michel-codec/src/michelson-validator.ts", "../../@taquito/michel-codec/src/binary.ts", "../../@taquito/michel-codec/src/michelson-typecheck.ts", "../../@taquito/michel-codec/src/michelson-contract.ts", "../../@taquito/michel-codec/src/formatters.ts", "../../@taquito/michel-codec/src/version.ts"],
  "sourcesContent": ["// ==========================================================================================\n// parent error classes for Taquito\n// ==========================================================================================\n/**\n *  @category Error\n *  @description Parent error class all taquito errors to extend from\n */\nexport class TaquitoError extends Error {}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid user inputs\n */\nexport class ParameterValidationError extends TaquitoError {}\n\n/**\n *  @category Error\n *  @description Error returned by RPC node\n */\nexport class RpcError extends TaquitoError {}\n\n/**\n *  @category Error\n *  @description Error that indicates TezosToolKit has not been configured appropriately\n */\nexport class TezosToolkitConfigError extends TaquitoError {}\n\n/**\n *  @category Error\n *  @description Error that indicates a requested action is not supported by Taquito\n */\nexport class UnsupportedActionError extends TaquitoError {}\n\n/**\n *  @category Error\n *  @description Error during a network operation\n */\nexport class NetworkError extends TaquitoError {}\n\n/**\n *  @category Error\n *  @description Error that indicates user attempts an action without necessary permissions\n */\nexport class PermissionDeniedError extends TaquitoError {}\n\n// ==========================================================================================\n// common error classes for Taquito\n// ==========================================================================================\n/**\n *  @category Error\n *  @description Error that indicates an invalid originated or implicit address being passed or used\n */\nexport class InvalidAddressError extends ParameterValidationError {\n  constructor(public readonly address: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidAddressError';\n    this.message = `Invalid address \"${address}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid block hash being passed or used\n */\nexport class InvalidBlockHashError extends ParameterValidationError {\n  constructor(public readonly blockHash: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidBlockHashError';\n    this.message = `Invalid block hash \"${blockHash}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n * @category Error\n * @description Error that indicates an invalid amount of tez being passed as a parameter\n */\nexport class InvalidAmountError extends ParameterValidationError {\n  constructor(public readonly amount: string) {\n    super();\n    this.name = 'InvalidAmountError';\n    this.message = `Invalid amount \"${amount}\"`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid derivation path being passed or used\n */\nexport class InvalidDerivationPathError extends ParameterValidationError {\n  constructor(public readonly derivationPath: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidDerivationPathError';\n    this.message = `Invalid derivation path \"${derivationPath}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid hex string have been passed or used\n */\nexport class InvalidHexStringError extends ParameterValidationError {\n  constructor(public readonly hexString: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidHexStringError';\n    this.message = `Invalid hex string \"${hexString}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid message being passed or used\n */\nexport class InvalidMessageError extends ParameterValidationError {\n  constructor(public readonly msg: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidMessageError';\n    this.message = `Invalid message \"${msg}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid view parameter of a smart contract\n */\nexport class InvalidViewParameterError extends ParameterValidationError {\n  constructor(\n    public readonly viewName: string,\n    public readonly sigs: any,\n    public readonly args: any,\n    public readonly cause?: any\n  ) {\n    super();\n    this.name = 'InvalidViewParameterError';\n    this.message = `Invalid view arguments ${JSON.stringify(\n      args\n    )} received for name \"${viewName}\" expecting one of the following signatures ${JSON.stringify(\n      sigs\n    )}.`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid private key being passed or used\n */\nexport class InvalidKeyError extends ParameterValidationError {\n  constructor(public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidKeyError';\n    this.message = `Invalid private key`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an Invalid Public Key being passed or used\n */\nexport class InvalidPublicKeyError extends ParameterValidationError {\n  constructor(public readonly publicKey: string, readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidPublicKeyError';\n    this.message = `Invalid public key \"${publicKey}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid signature being passed or used\n */\nexport class InvalidSignatureError extends ParameterValidationError {\n  constructor(public readonly signature: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidSignatureError';\n    this.message = `Invalid signature \"${signature}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract address being passed or used\n */\nexport class InvalidContractAddressError extends ParameterValidationError {\n  constructor(public readonly contractAddress: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidContractAddressError';\n    this.message = `Invalid contract address \"${contractAddress}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid chain id being passed or used\n */\nexport class InvalidChainIdError extends ParameterValidationError {\n  constructor(public readonly chainId: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidChainIdError';\n    this.message = `Invalid chain id \"${chainId}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid public key hash being passed or used\n */\nexport class InvalidKeyHashError extends ParameterValidationError {\n  constructor(public readonly keyHash: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidKeyHashError';\n    this.message = `Invalid public key hash \"${keyHash}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation hash being passed or used\n */\nexport class InvalidOperationHashError extends ParameterValidationError {\n  constructor(public readonly operationHash: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidOperationHashError';\n    this.message = `Invalid operation hash \"${operationHash}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation kind being passed or used\n */\nexport class InvalidOperationKindError extends ParameterValidationError {\n  constructor(public readonly operationKind: string, public readonly errorDetail?: string) {\n    super();\n    this.name = 'InvalidOperationKindError';\n    this.message = `Invalid operation kind \"${operationKind}\"`;\n    this.message += errorDetail ? ` ${errorDetail}.` : '.';\n  }\n}\n\n/**\n *  @category Error\n *  @description General error that indicates something is no longer supported and/or deprecated\n */\nexport class DeprecationError extends UnsupportedActionError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'DeprecationError';\n  }\n}\n\n/**\n *  @category Error\n *  @description General error that indicates an action is prohibited or not allowed\n */\nexport class ProhibitedActionError extends UnsupportedActionError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'ProhibitedActionError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure in grabbing the public key\n */\nexport class PublicKeyNotFoundError extends TaquitoError {\n  constructor(public readonly pkh: string, public readonly cause?: any) {\n    super();\n    this.name = 'PublicKeyNotFoundError';\n    this.message = `Public key not found of this address \"${pkh}\" in either wallet or contract API.`;\n  }\n}\n", "// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\n\nexport type SourceReference = {\n  first: number;\n  last: number;\n  macro?: Expr;\n  globalConstant?: Expr;\n};\n\nexport const sourceReference: unique symbol = Symbol('source_reference');\n\nexport interface Node {\n  [sourceReference]?: SourceReference;\n}\n\n/**\n * An AST node representing Michelson string literal.\n */\nexport interface StringLiteral extends Node {\n  string: string;\n}\n\n/**\n * An AST node representing Michelson int literal.\n */\nexport interface IntLiteral<T extends string = string> extends Node {\n  int: T;\n}\n\n/**\n * An AST node representing Michelson bytes literal.\n */\nexport interface BytesLiteral extends Node {\n  bytes: string;\n}\n\n/**\n * An AST node representing Michelson primitive.\n */\nexport interface Prim<PT extends string = string, AT extends Expr[] = Expr[]> extends Node {\n  prim: PT;\n  args?: AT;\n  annots?: string[];\n}\n\nexport type List<T extends Expr> = T[] & Node;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ExprList extends List<Expr> {}\n\n/**\n * An AST node representing valid Michelson expression. Directly corresponds to JSON-encoded Michelson node\n */\n\nexport type Expr = Prim | StringLiteral | IntLiteral | BytesLiteral | ExprList;\n", "import { TaquitoError } from '@taquito/core';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when performing the scan step when parsing Michelson\n */\nexport class ScanError extends TaquitoError {\n  constructor(\n    public readonly src: string,\n    public readonly idx: number,\n    public readonly message: string\n  ) {\n    super();\n    this.name = 'ScanError';\n  }\n}\n\nexport enum Literal {\n  Comment,\n  Number,\n  String,\n  Bytes,\n  Ident,\n}\n\nexport type TokenType = '(' | ')' | '{' | '}' | ';' | Literal;\n\nconst isSpace = new RegExp('\\\\s');\nconst isIdentStart = new RegExp('[:@%_A-Za-z]');\nconst isIdent = new RegExp('[@%_\\\\.A-Za-z0-9]');\nconst isDigit = new RegExp('[0-9]');\nconst isHex = new RegExp('[0-9a-fA-F]');\n\nexport interface Token {\n  t: TokenType;\n  v: string;\n  first: number;\n  last: number;\n}\n\nexport function* scan(src: string, scanComments = false): Generator<Token, void> {\n  let i = 0;\n  while (i < src.length) {\n    // Skip space\n    while (i < src.length && isSpace.test(src[i])) {\n      i++;\n    }\n    if (i === src.length) {\n      return;\n    }\n\n    const s = src[i];\n    const start = i;\n    if (isIdentStart.test(s)) {\n      // Identifier\n      i++;\n      while (i < src.length && isIdent.test(src[i])) {\n        i++;\n      }\n      yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n    } else if (src.length - i > 1 && src.substring(i, i + 2) === '0x') {\n      // Bytes\n      i += 2;\n      while (i < src.length && isHex.test(src[i])) {\n        i++;\n      }\n      if (((i - start) & 1) !== 0) {\n        throw new ScanError(src, i, 'Bytes literal length is expected to be power of two');\n      }\n      yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n    } else if (isDigit.test(s) || s === '-') {\n      // Number\n      if (s === '-') {\n        i++;\n      }\n      const ii = i;\n      while (i < src.length && isDigit.test(src[i])) {\n        i++;\n      }\n      if (ii === i) {\n        throw new ScanError(src, i, 'Number literal is too short');\n      }\n      yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '\"') {\n      // String\n      i++;\n      let esc = false;\n      for (; i < src.length && (esc || src[i] !== '\"'); i++) {\n        if (!esc && src[i] === '\\\\') {\n          esc = true;\n        } else {\n          esc = false;\n        }\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated string literal');\n      }\n      i++;\n      yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '#') {\n      // Comment\n      i++;\n      while (i < src.length && src[i] !== '\\n') {\n        i++;\n      }\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (src.length - i > 1 && src.substring(i, i + 2) === '/*') {\n      // C style comment\n      i += 2;\n      while (i < src.length && !(src.length - i > 1 && src.substring(i, i + 2) === '*/')) {\n        i++;\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated C style comment');\n      }\n      i += 2;\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (s === '(' || s === ')' || s === '{' || s === '}' || s === ';') {\n      i++;\n      yield { t: s, v: s, first: start, last: i };\n    } else {\n      throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n    }\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { Prim, Expr, IntLiteral, StringLiteral, BytesLiteral, List, Node } from './micheline';\n\ninterface Prim0<PT extends string = string> extends Prim<PT> {\n  args?: never;\n}\ninterface PrimX<PT extends string = string, AT extends Expr[] = Expr[]> extends Prim<PT, AT> {\n  args: AT;\n}\n\n// Instructions\ntype MichelsonNoArgInstructionID =\n  | 'ABS'\n  | 'ADD'\n  | 'ADDRESS'\n  | 'AMOUNT'\n  | 'AND'\n  | 'APPLY'\n  | 'BALANCE'\n  | 'BLAKE2B'\n  | 'CAR'\n  | 'CDR'\n  | 'CHAIN_ID'\n  | 'CHECK_SIGNATURE'\n  | 'COMPARE'\n  | 'CONCAT'\n  | 'CONS'\n  | 'EDIV'\n  | 'EQ'\n  | 'EXEC'\n  | 'FAILWITH'\n  | 'GE'\n  | 'GET_AND_UPDATE'\n  | 'GT'\n  | 'HASH_KEY'\n  | 'IMPLICIT_ACCOUNT'\n  | 'INT'\n  | 'ISNAT'\n  | 'JOIN_TICKETS'\n  | 'KECCAK'\n  | 'LE'\n  | 'LEVEL'\n  | 'LSL'\n  | 'LSR'\n  | 'LT'\n  | 'MEM'\n  | 'MUL'\n  | 'NEG'\n  | 'NEQ'\n  | 'NEVER'\n  | 'NOT'\n  | 'NOW'\n  | 'OR'\n  | 'PACK'\n  | 'PAIRING_CHECK'\n  | 'READ_TICKET'\n  | 'SAPLING_VERIFY_UPDATE'\n  | 'SELF'\n  | 'SELF_ADDRESS'\n  | 'SENDER'\n  | 'SET_DELEGATE'\n  | 'SHA256'\n  | 'SHA3'\n  | 'SHA512'\n  | 'SIZE'\n  | 'SLICE'\n  | 'SOME'\n  | 'SOURCE'\n  | 'SPLIT_TICKET'\n  | 'SUB'\n  | 'SUB_MUTEZ'\n  | 'SWAP'\n  | 'TICKET'\n  | 'TICKET_DEPRECATED'\n  | 'TOTAL_VOTING_POWER'\n  | 'TRANSFER_TOKENS'\n  | 'UNIT'\n  | 'VOTING_POWER'\n  | 'XOR'\n  | 'RENAME'\n  | 'OPEN_CHEST'\n  | 'MIN_BLOCK_TIME'\n  | 'BYTES'\n  | 'NAT';\n\ntype MichelsonRegularInstructionID =\n  | 'CONTRACT'\n  | 'CREATE_CONTRACT'\n  | 'DIG'\n  | 'DIP'\n  | 'DROP'\n  | 'DUG'\n  | 'DUP'\n  | 'EMPTY_BIG_MAP'\n  | 'EMPTY_MAP'\n  | 'EMPTY_SET'\n  | 'GET'\n  | 'IF'\n  | 'IF_CONS'\n  | 'IF_LEFT'\n  | 'IF_NONE'\n  | 'ITER'\n  | 'LAMBDA'\n  | 'LAMBDA_REC'\n  | 'LEFT'\n  | 'LOOP'\n  | 'LOOP_LEFT'\n  | 'MAP'\n  | 'NIL'\n  | 'NONE'\n  | 'PAIR'\n  | 'PUSH'\n  | 'RIGHT'\n  | 'SAPLING_EMPTY_STATE'\n  | 'UNPACK'\n  | 'UNPAIR'\n  | 'UPDATE'\n  | 'CAST'\n  | 'VIEW'\n  | 'EMIT'\n  // legacy\n  | 'CREATE_ACCOUNT'\n  | 'STEPS_TO_QUOTA';\n\nexport type MichelsonInstructionID = MichelsonNoArgInstructionID | MichelsonRegularInstructionID;\ntype InstrPrim<PT extends MichelsonInstructionID, AT extends Expr[]> = Prim<PT, AT>;\ntype Instr0<PT extends MichelsonNoArgInstructionID> = Prim0<PT>;\ntype InstrX<PT extends MichelsonRegularInstructionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonCode = InstructionList | MichelsonInstruction;\nexport interface InstructionList extends List<MichelsonCode> {}\n\nexport type MichelsonNoArgInstruction = Instr0<MichelsonNoArgInstructionID>;\nexport type MichelsonInstruction =\n  | MichelsonNoArgInstruction\n  | InstrX<'DIG' | 'DUG' | 'SAPLING_EMPTY_STATE', [IntLiteral]>\n  | InstrX<'NONE' | 'LEFT' | 'RIGHT' | 'NIL' | 'CAST', [MichelsonType]>\n  | InstrX<'IF_NONE' | 'IF_LEFT' | 'IF_CONS' | 'IF', [InstructionList, InstructionList]>\n  | InstrX<'MAP' | 'ITER' | 'LOOP' | 'LOOP_LEFT' | 'DIP', [InstructionList]>\n  | InstrX<'UNPACK', [MichelsonType]>\n  | InstrX<'CONTRACT', [MichelsonType]>\n  | InstrX<'CREATE_CONTRACT', [MichelsonContract]>\n  | InstrX<'PUSH', [MichelsonType, MichelsonData]>\n  | InstrX<'EMPTY_SET', [MichelsonType]>\n  | InstrX<'EMPTY_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'EMPTY_BIG_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'LAMBDA' | 'LAMBDA_REC', [MichelsonType, MichelsonType, InstructionList]>\n  | InstrX<'DIP', [IntLiteral, InstructionList] | [InstructionList]>\n  | InstrX<'VIEW', [StringLiteral, MichelsonType]>\n  | InstrX<'EMIT', [MichelsonType]>\n  | InstrPrim<'DROP' | 'PAIR' | 'UNPAIR' | 'DUP' | 'GET' | 'UPDATE', [IntLiteral]>;\n\n// Types\n\nexport type MichelsonSimpleComparableTypeID =\n  | 'string'\n  | 'nat'\n  | 'int'\n  | 'bytes'\n  | 'bool'\n  | 'mutez'\n  | 'key_hash'\n  | 'address'\n  | 'timestamp'\n  | 'never'\n  | 'key'\n  | 'unit'\n  | 'signature'\n  | 'chain_id'\n  | 'tx_rollup_l2_address';\n\nexport type MichelsonTypeID =\n  | MichelsonSimpleComparableTypeID\n  | 'option'\n  | 'list'\n  | 'set'\n  | 'contract'\n  | 'operation'\n  | 'pair'\n  | 'or'\n  | 'lambda'\n  | 'map'\n  | 'big_map'\n  | 'sapling_transaction'\n  | 'sapling_transaction_deprecated'\n  | 'sapling_state'\n  | 'ticket'\n  | 'bls12_381_g1'\n  | 'bls12_381_g2'\n  | 'bls12_381_fr'\n  | 'chest_key'\n  | 'chest';\n\ntype Type0<PT extends MichelsonTypeID> = Prim0<PT>;\ntype TypeX<PT extends MichelsonTypeID, AT extends Expr[]> = PrimX<PT, AT>;\n\n// Michelson types\n\nexport const refContract: unique symbol = Symbol('ref_contract');\nexport interface MichelsonTypeAddress extends Type0<'address'> {\n  [refContract]?: MichelsonTypeContract<MichelsonType>;\n}\n\nexport type MichelsonTypeInt = Type0<'int'>;\nexport type MichelsonTypeNat = Type0<'nat'>;\nexport type MichelsonTypeString = Type0<'string'>;\nexport type MichelsonTypeBytes = Type0<'bytes'>;\nexport type MichelsonTypeMutez = Type0<'mutez'>;\nexport type MichelsonTypeBool = Type0<'bool'>;\nexport type MichelsonTypeKeyHash = Type0<'key_hash'>;\nexport type MichelsonTypeTimestamp = Type0<'timestamp'>;\nexport type MichelsonTypeKey = Type0<'key'>;\nexport type MichelsonTypeUnit = Type0<'unit'>;\nexport type MichelsonTypeSignature = Type0<'signature'>;\nexport type MichelsonTypeOperation = Type0<'operation'>;\nexport type MichelsonTypeChainID = Type0<'chain_id'>;\nexport type MichelsonTypeNever = Type0<'never'>;\nexport type MichelsonTypeBLS12_381_G1 = Type0<'bls12_381_g1'>;\nexport type MichelsonTypeBLS12_381_G2 = Type0<'bls12_381_g2'>;\nexport type MichelsonTypeBLS12_381_FR = Type0<'bls12_381_fr'>;\nexport type MichelsonTypeChestKey = Type0<'chest_key'>;\nexport type MichelsonTypeChest = Type0<'chest'>;\n\ntype TypeList<T extends MichelsonType[]> = T & Node;\nexport type MichelsonTypePair<T extends MichelsonType[]> = TypeX<'pair', T> | TypeList<T>;\n\nexport interface MichelsonTypeOption<T extends MichelsonType> extends TypeX<'option', [T]> {}\nexport interface MichelsonTypeList<T extends MichelsonType> extends TypeX<'list', [T]> {}\nexport interface MichelsonTypeContract<T extends MichelsonType> extends TypeX<'contract', [T]> {}\nexport interface MichelsonTypeOr<T extends [MichelsonType, MichelsonType]> extends TypeX<'or', T> {}\nexport interface MichelsonTypeLambda<Arg extends MichelsonType, Ret extends MichelsonType>\n  extends TypeX<'lambda', [Arg, Ret]> {}\n\nexport interface MichelsonTypeSet<T extends MichelsonType> extends TypeX<'set', [T]> {}\nexport interface MichelsonTypeMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'map', [K, V]> {}\nexport interface MichelsonTypeBigMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'big_map', [K, V]> {}\nexport interface MichelsonTypeSaplingState<S extends string = string>\n  extends TypeX<'sapling_state', [IntLiteral<S>]> {}\nexport interface MichelsonTypeSaplingTransaction<S extends string = string>\n  extends TypeX<'sapling_transaction', [IntLiteral<S>]> {}\nexport interface MichelsonTypeTicket<T extends MichelsonType> extends TypeX<'ticket', [T]> {}\n\nexport type MichelsonType<T extends MichelsonTypeID = MichelsonTypeID> = T extends 'int'\n  ? MichelsonTypeInt\n  : T extends 'nat'\n  ? MichelsonTypeNat\n  : T extends 'string'\n  ? MichelsonTypeString\n  : T extends 'bytes'\n  ? MichelsonTypeBytes\n  : T extends 'mutez'\n  ? MichelsonTypeMutez\n  : T extends 'bool'\n  ? MichelsonTypeBool\n  : T extends 'key_hash'\n  ? MichelsonTypeKeyHash\n  : T extends 'timestamp'\n  ? MichelsonTypeTimestamp\n  : T extends 'address'\n  ? MichelsonTypeAddress\n  : T extends 'key'\n  ? MichelsonTypeKey\n  : T extends 'unit'\n  ? MichelsonTypeUnit\n  : T extends 'signature'\n  ? MichelsonTypeSignature\n  : T extends 'operation'\n  ? MichelsonTypeOperation\n  : T extends 'chain_id'\n  ? MichelsonTypeChainID\n  : T extends 'option'\n  ? MichelsonTypeOption<MichelsonType>\n  : T extends 'list'\n  ? MichelsonTypeList<MichelsonType>\n  : T extends 'contract'\n  ? MichelsonTypeContract<MichelsonType>\n  : T extends 'ticket'\n  ? MichelsonTypeTicket<MichelsonType>\n  : T extends 'pair'\n  ? MichelsonTypePair<MichelsonType[]>\n  : T extends 'or'\n  ? MichelsonTypeOr<[MichelsonType, MichelsonType]>\n  : T extends 'lambda'\n  ? MichelsonTypeLambda<MichelsonType, MichelsonType>\n  : T extends 'set'\n  ? MichelsonTypeSet<MichelsonType>\n  : T extends 'map'\n  ? MichelsonTypeMap<MichelsonType, MichelsonType>\n  : T extends 'big_map'\n  ? MichelsonTypeBigMap<MichelsonType, MichelsonType>\n  : T extends 'never'\n  ? MichelsonTypeNever\n  : T extends 'bls12_381_g1'\n  ? MichelsonTypeBLS12_381_G1\n  : T extends 'bls12_381_g2'\n  ? MichelsonTypeBLS12_381_G2\n  : T extends 'bls12_381_fr'\n  ? MichelsonTypeBLS12_381_FR\n  : T extends 'sapling_transaction'\n  ? MichelsonTypeSaplingTransaction\n  : T extends 'sapling_state'\n  ? MichelsonTypeSaplingState\n  : T extends 'chest_key'\n  ? MichelsonTypeChestKey\n  : MichelsonTypeChest;\n\n// Data\n\nexport type MichelsonDataID =\n  | 'Unit'\n  | 'True'\n  | 'False'\n  | 'None'\n  | 'Pair'\n  | 'Left'\n  | 'Right'\n  | 'Some'\n  | 'Lambda_rec';\n\ntype Data0<PT extends MichelsonDataID> = Prim0<PT>;\ntype DataX<PT extends MichelsonDataID, AT extends MichelsonData[]> = PrimX<PT, AT>;\n\nexport type MichelsonDataOption = DataX<'Some', [MichelsonData]> | Data0<'None'>;\nexport type MichelsonDataOr = DataX<'Left' | 'Right', [MichelsonData]>;\ntype DataList<T extends MichelsonData[]> = T & Node;\nexport type MichelsonDataPair<T extends MichelsonData[]> = DataX<'Pair', T> | DataList<T>;\nexport type MichelsonMapElt = PrimX<'Elt', [MichelsonData, MichelsonData]>;\nexport type MichelsonMapEltList = List<MichelsonMapElt>;\nexport type MichelsonLambdaRec = DataX<'Lambda_rec', [InstructionList]>;\n\nexport type MichelsonData =\n  | IntLiteral\n  | StringLiteral\n  | BytesLiteral\n  | Data0<'Unit' | 'True' | 'False'>\n  | MichelsonDataOption\n  | MichelsonDataOr\n  | DataList<MichelsonData[]>\n  | MichelsonDataPair<MichelsonData[]>\n  | InstructionList\n  | MichelsonMapEltList\n  | MichelsonLambdaRec;\n\n// Top level script sections\n\nexport type MichelsonSectionID = 'parameter' | 'storage' | 'code' | 'view';\ntype SectionPrim<PT extends MichelsonSectionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonContractParameter = SectionPrim<'parameter', [MichelsonType]>;\nexport type MichelsonContractStorage = SectionPrim<'storage', [MichelsonType]>;\nexport type MichelsonContractCode = SectionPrim<'code', [InstructionList]>;\nexport type MichelsonContractView = SectionPrim<\n  'view',\n  [StringLiteral, MichelsonType, MichelsonType, InstructionList]\n>;\n\nexport type MichelsonContract = MichelsonContractSection[];\n\nexport type MichelsonContractSection<T extends MichelsonSectionID = MichelsonSectionID> =\n  T extends 'parameter'\n    ? MichelsonContractParameter\n    : T extends 'storage'\n    ? MichelsonContractStorage\n    : T extends 'view'\n    ? MichelsonContractView\n    : MichelsonContractCode;\n\n// Code analysis types\nexport interface MichelsonTypeFailed {\n  failed: MichelsonType;\n  level: number;\n}\n\nexport type MichelsonReturnType = MichelsonType[] | MichelsonTypeFailed;\n\nexport enum Protocol {\n  Ps9mPmXa = 'Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P',\n  PtCJ7pwo = 'PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY',\n  PsYLVpVv = 'PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt',\n  PsddFKi3 = 'PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP',\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdoTez = 'PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLoren = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANAD = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangzH = 'PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  PsiThaCa = 'PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  PtJakarta = 'PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw',\n  PtJakart2 = 'PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY',\n  PtKathman = 'PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg',\n  PtLimaPtL = 'PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW',\n  PtMumbaii = 'PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc',\n  PtMumbai2 = 'PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1',\n  PtNairobi = 'PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK', // temporary protocol hash\n}\n\nexport const DefaultProtocol = Protocol.Psithaca2;\n\nexport type ProtocolID = `${Protocol}`;\n\nconst protoLevel: Record<ProtocolID, number> = {\n  Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P: 0,\n  PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY: 1,\n  PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt: 2,\n  PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP: 3,\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq: 8,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r: 11,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP: 12,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw: 13,\n  PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY: 13,\n  PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg: 14,\n  PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW: 15,\n  PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc: 16,\n  PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1: 16,\n  PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf: 17,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 18,\n};\n\nexport function ProtoGreaterOrEqual(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] >= protoLevel[b];\n}\n\nexport function ProtoInferiorTo(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] < protoLevel[b];\n}\n\nexport interface ProtocolOptions {\n  protocol?: ProtocolID;\n}\n", "import { TaquitoError } from '@taquito/core';\nimport { Prim, Expr, IntLiteral } from './micheline';\nimport { DefaultProtocol, Protocol, ProtocolOptions, ProtoInferiorTo } from './michelson-types';\nimport { Tuple, NoArgs, ReqArgs, NoAnnots } from './utils';\n\n/**\n *  @category Error\n *  @description Error that indicates macros failed to be expanded\n */\nexport class MacroError extends TaquitoError {\n  constructor(public readonly prim: Prim, public readonly message: string) {\n    super();\n    this.name = 'MacroError';\n  }\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${ex.args?.length}`);\n}\n\nfunction assertNoAnnots(ex: Prim): ex is NoAnnots<Prim> {\n  if (ex.annots === undefined) {\n    return true;\n  }\n  throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex: Prim, arg: Expr): arg is IntLiteral {\n  if ('int' in arg) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\ntype PT = [number, [string | null, string | null]];\n\nfunction parsePairUnpairExpr(\n  p: Prim,\n  expr: string,\n  annotations: string[],\n  agg: (l: PT[] | undefined, r: PT[] | undefined, top: PT) => PT[]\n): { r: PT[]; n: number; an: number } {\n  let i = 0;\n  let ai = 0;\n  const ann: [string | null, string | null] = [null, null];\n\n  // Left expression\n  let lexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  let c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      lexpr = r;\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'A':\n      if (ai !== annotations.length) {\n        ann[0] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  // Right expression\n  let rexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      rexpr = r.map<PT>(([v, a]) => [v + 1, a]);\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'I':\n      if (ai !== annotations.length) {\n        ann[1] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\n\nfunction parseSetMapCadr(p: Prim, expr: string, vann: string[], term: { a: Expr; d: Expr }): Expr {\n  const c = expr[0];\n  switch (c) {\n    case 'A':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CAR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CDR', annots: ['@%%'] },\n            { prim: 'SWAP' },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.a;\n\n    case 'D':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CDR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CAR', annots: ['@%%'] },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.d;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n}\n\nfunction trimLast<T>(a: T[], v: T): T[] {\n  let l = a.length;\n  while (l > 0 && a[l - 1] === v) {\n    l--;\n  }\n  return a.slice(0, l);\n}\n\nfunction filterAnnotations(a?: string[]): {\n  fields: string[];\n  rest: string[];\n} {\n  const fields: string[] = [];\n  const rest: string[] = [];\n  if (a !== undefined) {\n    for (const v of a) {\n      (v.length !== 0 && v[0] === '%' ? fields : rest).push(v);\n    }\n  }\n  return { fields, rest };\n}\n\nfunction mkPrim({ prim, annots, args }: Prim): Prim {\n  return {\n    prim,\n    ...(annots && { annots }),\n    ...(args && { args }),\n  };\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nexport function expandMacros(ex: Prim, opt?: ProtocolOptions): Expr {\n  const proto = opt?.protocol || DefaultProtocol;\n\n  function mayRename(annots?: string[]): Prim[] {\n    return annots !== undefined ? [{ prim: 'RENAME', annots }] : [];\n  }\n\n  switch (ex.prim) {\n    // Compare\n    case 'CMPEQ':\n    case 'CMPNEQ':\n    case 'CMPLT':\n    case 'CMPGT':\n    case 'CMPLE':\n    case 'CMPGE':\n      if (assertArgs(ex, 0)) {\n        return [{ prim: 'COMPARE' }, mkPrim({ prim: ex.prim.slice(3), annots: ex.annots })];\n      }\n      break;\n\n    case 'IFEQ':\n    case 'IFNEQ':\n    case 'IFLT':\n    case 'IFGT':\n    case 'IFLE':\n    case 'IFGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: ex.prim.slice(2) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    case 'IFCMPEQ':\n    case 'IFCMPNEQ':\n    case 'IFCMPLT':\n    case 'IFCMPGT':\n    case 'IFCMPLE':\n    case 'IFCMPGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: 'COMPARE' },\n          { prim: ex.prim.slice(5) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    // Fail\n    case 'FAIL':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [{ prim: 'UNIT' }, { prim: 'FAILWITH' }];\n      }\n      break;\n\n    // Assertion macros\n    case 'ASSERT':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_EQ':\n    case 'ASSERT_NEQ':\n    case 'ASSERT_LT':\n    case 'ASSERT_GT':\n    case 'ASSERT_LE':\n    case 'ASSERT_GE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          { prim: ex.prim.slice(7) },\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_CMPEQ':\n    case 'ASSERT_CMPNEQ':\n    case 'ASSERT_CMPLT':\n    case 'ASSERT_CMPGT':\n    case 'ASSERT_CMPLE':\n    case 'ASSERT_CMPGE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          [{ prim: 'COMPARE' }, { prim: ex.prim.slice(10) }],\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_NONE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_SOME':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_LEFT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [mayRename(ex.annots), [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_RIGHT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    // Syntactic conveniences\n\n    case 'IF_SOME':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_NONE', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    case 'IF_RIGHT':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_LEFT', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    // CAR/CDR n\n    case 'CAR':\n    case 'CDR':\n      if (ex.args !== undefined) {\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          const n = parseInt(ex.args[0].int, 10);\n          return mkPrim({\n            prim: 'GET',\n            args: [{ int: ex.prim === 'CAR' ? String(n * 2 + 1) : String(n * 2) }],\n            annots: ex.annots,\n          });\n        }\n      } else {\n        return ex;\n      }\n  }\n\n  // More syntactic conveniences\n\n  // PAPPAIIR macro\n  if (pairRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [\n        ...(l || []),\n        ...(r || []),\n        top,\n      ]);\n\n      return r.map(([v, a], i) => {\n        const ann = [\n          ...trimLast(a, null).map((v) => (v === null ? '%' : v)),\n          ...(v === 0 && i === r.length - 1 ? rest : []),\n        ];\n\n        const leaf = mkPrim({ prim: 'PAIR', annots: ann.length !== 0 ? ann : undefined });\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    }\n  }\n\n  // UNPAPPAIIR macro\n  if (unpairRe.test(ex.prim)) {\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk) && assertArgs(ex, 0)) {\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [\n        top,\n        ...(r || []),\n        ...(l || []),\n      ]);\n      return r.map(([v, a]) => {\n        const leaf: Prim[] = [\n          { prim: 'DUP' },\n          mkPrim({ prim: 'CAR', annots: a[0] !== null ? [a[0]] : undefined }),\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'CDR', annots: a[1] !== null ? [a[1]] : undefined })]],\n          },\n        ];\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    } else {\n      if (ex.prim === 'UNPAIR') {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        // 008_edo: annotations are deprecated\n        const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [\n          top,\n          ...(r || []),\n          ...(l || []),\n        ]);\n        return r.map(([v]) => {\n          const leaf = mkPrim({\n            prim: 'UNPAIR',\n          });\n\n          return v === 0\n            ? leaf\n            : {\n                prim: 'DIP',\n                args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n              };\n        });\n      }\n    }\n  }\n\n  // C[AD]+R macro\n  if (cadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n\n      return ch.map<Prim>((c, i) => {\n        const ann = i === ch.length - 1 ? ex.annots : undefined;\n        switch (c) {\n          case 'A':\n            return mkPrim({ prim: 'CAR', annots: ann });\n          case 'D':\n            return mkPrim({ prim: 'CDR', annots: ann });\n          default:\n            throw new MacroError(ex, `unexpected character: ${c}`);\n        }\n      });\n    }\n  }\n\n  // SET_C[AD]+R macro\n  if (setCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term =\n        fields.length !== 0\n          ? {\n              a: [\n                { prim: 'DUP' },\n                { prim: 'CAR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: [fields[0], '%@'] },\n              ],\n              d: [\n                { prim: 'DUP' },\n                { prim: 'CDR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', fields[0]] },\n              ],\n            }\n          : {\n              a: [\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: ['%', '%@'] },\n              ],\n              d: [\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', '%'] },\n              ],\n            };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n    }\n  }\n\n  // MAP_C[AD]+R macro\n  if (mapCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      const { fields } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term = {\n        a: [\n          { prim: 'DUP' },\n          { prim: 'CDR', annots: ['@%%'] },\n          {\n            prim: 'DIP',\n            args: [\n              [\n                mkPrim({\n                  prim: 'CAR',\n                  annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n                }),\n                ex.args[0],\n              ],\n            ],\n          },\n          { prim: 'SWAP' },\n          { prim: 'PAIR', annots: [fields.length !== 0 ? fields[0] : '%', '%@'] },\n        ],\n        d: [\n          { prim: 'DUP' },\n          mkPrim({\n            prim: 'CDR',\n            annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n          }),\n          ex.args[0],\n          { prim: 'SWAP' },\n          { prim: 'CAR', annots: ['@%%'] },\n          { prim: 'PAIR', annots: ['%@', fields.length !== 0 ? fields[0] : '%'] },\n        ],\n      };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n    }\n  }\n\n  // Expand deprecated DI...IP to [DIP n]\n  if (diipRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      let n = 0;\n      while (ex.prim[1 + n] === 'I') {\n        n++;\n      }\n      return mkPrim({ prim: 'DIP', args: [{ int: String(n) }, ex.args[0]] });\n    }\n  }\n\n  // Expand DU...UP and DUP n\n  if (duupRe.test(ex.prim)) {\n    let n = 0;\n    while (ex.prim[1 + n] === 'U') {\n      n++;\n    }\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n      if (n === 1) {\n        if (ex.args === undefined) {\n          return ex; // skip\n        }\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          n = parseInt(ex.args[0].int, 10);\n        }\n      } else {\n        assertArgs(ex, 0);\n      }\n\n      if (n === 1) {\n        return [mkPrim({ prim: 'DUP', annots: ex.annots })];\n      } else if (n === 2) {\n        return [\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          { prim: 'SWAP' },\n        ];\n      } else {\n        return [\n          {\n            prim: 'DIP',\n            args: [{ int: String(n - 1) }, [mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          {\n            prim: 'DIG',\n            args: [{ int: String(n) }],\n          },\n        ];\n      }\n    } else {\n      if (n === 1) {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        return mkPrim({ prim: 'DUP', args: [{ int: String(n) }], annots: ex.annots });\n      }\n    }\n  }\n\n  return ex;\n}\n", "import { Prim, Expr } from './micheline';\nimport { GlobalConstantHashAndValue } from './micheline-parser';\n\nexport function expandGlobalConstants(ex: Prim, hashAndValue: GlobalConstantHashAndValue): Expr {\n  if (\n    ex.args !== undefined &&\n    ex.args.length === 1 &&\n    'string' in ex.args[0] &&\n    ex.args[0].string in hashAndValue\n  ) {\n    return hashAndValue[ex.args[0].string];\n  }\n\n  return ex;\n}\n", "import { scan, Token, Literal } from './scan';\nimport {\n  Expr,\n  Prim,\n  StringLiteral,\n  IntLiteral,\n  BytesLiteral,\n  sourceReference,\n  List,\n  SourceReference,\n} from './micheline';\nimport { expandMacros } from './macros';\nimport { ProtocolOptions } from './michelson-types';\nimport { expandGlobalConstants } from './global-constants';\nimport { TaquitoError } from '@taquito/core';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when parsing Micheline expressions\n */\nexport class MichelineParseError extends TaquitoError {\n  /**\n   * @param token A token caused the error\n   * @param message An error message\n   */\n  constructor(public readonly token: Token | null, public readonly message: string) {\n    super();\n    this.name = 'MichelineParseError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error inidicates a failure when parsing Micheline JSON\n */\nexport class JSONParseError extends TaquitoError {\n  /**\n   * @param node A node caused the error\n   * @param message An error message\n   */\n  constructor(public readonly node: unknown, public readonly message: string) {\n    super();\n    this.name = 'JSONParseError';\n  }\n}\n\nexport interface GlobalConstantHashAndValue {\n  [globalConstantHash: string]: Expr;\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok: Token): boolean {\n  return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n\nexport interface ParserOptions extends ProtocolOptions {\n  /**\n   * Expand [Michelson macros](https://tezos.gitlab.io/whitedoc/michelson.html#macros) during parsing.\n   */\n  expandMacros?: boolean;\n  /**\n   * Expand global constants during parsing.\n   * `expandGlobalConstant` expects an object where the keys are global constant hashes and the values are the corresponding JSON Micheline expressions.\n   * @example\n   * ```\n   * const parserOptions: ParserOptions = {\n   *  expandGlobalConstant: {\n   *      'expr...': { prim: 'DROP', args: [{ int: '2' }] }\n   *  }\n   * }\n   *\n   * const p = new Parser(parserOptions);\n   * ```\n   */\n  expandGlobalConstant?: GlobalConstantHashAndValue;\n}\n\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for inital storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nexport class Parser {\n  constructor(private opt?: ParserOptions) {}\n\n  private expand(ex: Prim): Expr {\n    if (this.opt?.expandGlobalConstant !== undefined && ex.prim === 'constant') {\n      const ret = expandGlobalConstants(ex, this.opt.expandGlobalConstant);\n      if (ret !== ex) {\n        ret[sourceReference] = {\n          ...(ex[sourceReference] || { first: 0, last: 0 }),\n          globalConstant: ex,\n        };\n      }\n      return ret;\n    }\n    if (this.opt?.expandMacros !== undefined ? this.opt?.expandMacros : true) {\n      const ret = expandMacros(ex, this.opt);\n      if (ret !== ex) {\n        ret[sourceReference] = { ...(ex[sourceReference] || { first: 0, last: 0 }), macro: ex };\n      }\n      return ret;\n    } else {\n      return ex;\n    }\n  }\n\n  private parseListExpr(scanner: Iterator<Token>, start: Token): Expr {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n\n    const expectBracket = start.t === '(';\n    let tok: IteratorResult<Token>;\n    if (expectBracket) {\n      tok = scanner.next();\n      if (tok.done) {\n        throw errEOF;\n      }\n      ref.last = tok.value.last;\n    } else {\n      tok = { value: start };\n    }\n\n    if (tok.value.t !== Literal.Ident) {\n      throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n    }\n\n    const ret: Prim = {\n      prim: tok.value.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const tok = scanner.next();\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        }\n        break;\n      } else if (tok.value.t === ')') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        }\n        ref.last = tok.value.last;\n        break;\n      } else if (isAnnotation(tok.value)) {\n        ret.annots = ret.annots || [];\n        ret.annots.push(tok.value.v);\n        ref.last = tok.value.last;\n      } else {\n        ret.args = ret.args || [];\n        const arg = this.parseExpr(scanner, tok.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        ret.args.push(arg);\n      }\n    }\n    return this.expand(ret);\n  }\n\n  private parseArgs(scanner: Iterator<Token>, start: Token): [Prim, IteratorResult<Token>] {\n    // Identifier with arguments\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const p: Prim = {\n      prim: start.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const t = scanner.next();\n      if (t.done || t.value.t === '}' || t.value.t === ';') {\n        return [p, t];\n      }\n\n      if (isAnnotation(t.value)) {\n        ref.last = t.value.last;\n        p.annots = p.annots || [];\n        p.annots.push(t.value.v);\n      } else {\n        const arg = this.parseExpr(scanner, t.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        p.args = p.args || [];\n        p.args.push(arg);\n      }\n    }\n  }\n\n  private parseSequenceExpr(scanner: Iterator<Token>, start: Token): List<Expr> {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const seq: List<Expr> = [];\n    seq[sourceReference] = ref;\n\n    const expectBracket = start.t === '{';\n    let tok: IteratorResult<Token> | null = start.t === '{' ? null : { value: start };\n\n    for (;;) {\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        } else {\n          return seq;\n        }\n      }\n\n      if (tok.value.t === '}') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        } else {\n          return seq;\n        }\n      } else if (tok.value.t === Literal.Ident) {\n        // Identifier with arguments\n        const [itm, n] = this.parseArgs(scanner, tok.value);\n        ref.last = itm[sourceReference]?.last || ref.last;\n        seq.push(this.expand(itm));\n        tok = n;\n      } else {\n        // Other\n        const ex = this.parseExpr(scanner, tok.value);\n        ref.last = ex[sourceReference]?.last || ref.last;\n        seq.push(ex);\n        tok = null;\n      }\n\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (!tok.done && tok.value.t === ';') {\n        tok = null;\n      }\n    }\n  }\n\n  private parseExpr(scanner: Iterator<Token>, tok: Token): Expr {\n    switch (tok.t) {\n      case Literal.Ident:\n        return this.expand({\n          prim: tok.v,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        });\n\n      case Literal.Number:\n        return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case Literal.String:\n        return {\n          string: JSON.parse(tok.v) as string,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        };\n\n      case Literal.Bytes:\n        return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case '{':\n        return this.parseSequenceExpr(scanner, tok);\n\n      default:\n        return this.parseListExpr(scanner, tok);\n    }\n  }\n\n  /**\n   * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseSequence(src: string): Expr[] | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseSequenceExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseList(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseListExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse any Michelson expression\n   * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n   * @returns An AST node or null for empty document.\n   */\n  parseMichelineExpression(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * An alias for `parseSequence`\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseScript(src: string): Expr[] | null {\n    return this.parseSequence(src);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * An alias for `parseList`\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseData(src: string): Expr | null {\n    return this.parseList(src);\n  }\n\n  /**\n   * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n   * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n   */\n  parseJSON(src: object): Expr {\n    if (typeof src !== 'object') {\n      throw new TypeError(`object type was expected, got ${typeof src} instead`);\n    }\n\n    if (Array.isArray(src)) {\n      const ret: Expr[] = [];\n      for (const n of src) {\n        if (n === null || typeof n !== 'object') {\n          throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n        }\n        ret.push(this.parseJSON(n));\n      }\n      return ret;\n    } else if ('prim' in src) {\n      const p = src as { prim: unknown; annots?: unknown[]; args?: unknown[] };\n      if (\n        typeof p.prim === 'string' &&\n        (p.annots === undefined || Array.isArray(p.annots)) &&\n        (p.args === undefined || Array.isArray(p.args))\n      ) {\n        const ret: Prim = {\n          prim: p.prim,\n        };\n\n        if (p.annots !== undefined) {\n          for (const a of p.annots) {\n            if (typeof a !== 'string') {\n              throw new JSONParseError(a, `string expected: ${a}`);\n            }\n          }\n          ret.annots = p.annots;\n        }\n\n        if (p.args !== undefined) {\n          ret.args = [];\n          for (const a of p.args) {\n            if (a === null || typeof a !== 'object') {\n              throw new JSONParseError(a, `unexpected argument: ${a}`);\n            }\n            ret.args.push(this.parseJSON(a));\n          }\n        }\n\n        return this.expand(ret);\n      }\n\n      throw new JSONParseError(src, `malformed prim expression: ${src}`);\n    } else if ('string' in src) {\n      if (typeof (src as StringLiteral).string === 'string') {\n        return { string: (src as StringLiteral).string };\n      }\n\n      throw new JSONParseError(src, `malformed string literal: ${src}`);\n    } else if ('int' in src) {\n      if (typeof (src as IntLiteral).int === 'string' && intRe.test((src as IntLiteral).int)) {\n        return { int: (src as IntLiteral).int };\n      }\n\n      throw new JSONParseError(src, `malformed int literal: ${src}`);\n    } else if ('bytes' in src) {\n      if (\n        typeof (src as BytesLiteral).bytes === 'string' &&\n        bytesRe.test((src as BytesLiteral).bytes)\n      ) {\n        return { bytes: (src as BytesLiteral).bytes };\n      }\n\n      throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n    } else {\n      throw new JSONParseError(src, `unexpected object: ${src}`);\n    }\n  }\n}\n", "import { Expr, Prim, sourceReference } from './micheline';\n\nexport interface FormatOptions {\n  /**\n   * A string used for code indentation if desired. Usually a tab character or a number of spaces.\n   */\n  indent?: string;\n  /**\n   * A string used for line separation. Usually a newline character (\"\\n\");\n   */\n  newline?: string;\n}\n\nclass Formatter {\n  constructor(private opt?: FormatOptions, private lev: number = 0) {}\n\n  indent(n = 0): string {\n    let ret = '';\n    if (this.opt?.indent !== undefined) {\n      for (let i = this.lev + n; i > 0; i--) {\n        ret += this.opt.indent;\n      }\n    }\n    return ret;\n  }\n\n  get lf(): string {\n    return this.opt?.newline || '';\n  }\n\n  get lfsp(): string {\n    return this.opt?.newline || ' ';\n  }\n\n  down(n: number): Formatter {\n    return new Formatter(this.opt, this.lev + n);\n  }\n}\n\nfunction hasArgs(node: Expr): node is Prim {\n  return (\n    'prim' in node &&\n    ((node.annots !== undefined && node.annots.length !== 0) ||\n      (node.args !== undefined && node.args.length !== 0))\n  );\n}\n\nfunction isMultiline(node: Prim): boolean {\n  if (node.args !== undefined) {\n    for (const a of node.args) {\n      if (Array.isArray(a) || hasArgs(a)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction emitExpr(node: Expr, f: Formatter, foldMacros: boolean): string {\n  const macro = node[sourceReference]?.macro;\n  if (foldMacros && macro) {\n    return emitExpr(macro, f, foldMacros);\n  }\n\n  if (Array.isArray(node)) {\n    return emitSeq(node, f, foldMacros);\n  } else if ('string' in node) {\n    return JSON.stringify(node.string);\n  } else if ('int' in node) {\n    return node.int;\n  } else if ('bytes' in node) {\n    return '0x' + node.bytes;\n  } else {\n    if (\n      (node.annots === undefined || node.annots.length === 0) &&\n      (node.args === undefined || node.args.length === 0)\n    ) {\n      return node.prim;\n    }\n\n    let ret = '(' + node.prim;\n    if (node.annots !== undefined) {\n      for (const a of node.annots) {\n        ret += ' ' + a;\n      }\n    }\n    if (node.args !== undefined) {\n      const multiline = isMultiline(node);\n      for (const a of node.args) {\n        if (multiline) {\n          ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n        } else {\n          ret += ' ' + emitExpr(a, f, foldMacros);\n        }\n      }\n    }\n    return ret + ')';\n  }\n}\n\nfunction emitSeq(node: Expr[], f: Formatter, foldMacros: boolean): string {\n  let ret = '{' + f.lf;\n  let i = node.length;\n  for (const el of node) {\n    ret += f.indent(1);\n\n    if ('prim' in el) {\n      ret += el.prim;\n\n      if (el.annots !== undefined) {\n        for (const a of el.annots) {\n          ret += ' ' + a;\n        }\n      }\n      if (el.args !== undefined) {\n        const multiline = isMultiline(el);\n        for (const a of el.args) {\n          if (multiline) {\n            ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n          } else {\n            ret += ' ' + emitExpr(a, f, foldMacros);\n          }\n        }\n      }\n    } else {\n      ret += emitExpr(el, f.down(1), foldMacros);\n    }\n\n    ret += i > 1 ? ';' + f.lfsp : f.lf;\n    i--;\n  }\n  return ret + f.indent() + '}';\n}\n\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nexport function emitMicheline(expr: Expr, opt?: FormatOptions, foldMacros = false): string {\n  if (typeof expr !== 'object') {\n    throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n  }\n\n  return emitExpr(expr, new Formatter(opt), foldMacros);\n}\n", "import { InvalidMessageError, TaquitoError } from '@taquito/core';\n\nconst H = [\n  0x6a09e667 | 0,\n  0xbb67ae85 | 0,\n  0x3c6ef372 | 0,\n  0xa54ff53a | 0,\n  0x510e527f | 0,\n  0x9b05688c | 0,\n  0x1f83d9ab | 0,\n  0x5be0cd19 | 0,\n];\n\nconst K = [\n  0x428a2f98 | 0,\n  0x71374491 | 0,\n  0xb5c0fbcf | 0,\n  0xe9b5dba5 | 0,\n  0x3956c25b | 0,\n  0x59f111f1 | 0,\n  0x923f82a4 | 0,\n  0xab1c5ed5 | 0,\n  0xd807aa98 | 0,\n  0x12835b01 | 0,\n  0x243185be | 0,\n  0x550c7dc3 | 0,\n  0x72be5d74 | 0,\n  0x80deb1fe | 0,\n  0x9bdc06a7 | 0,\n  0xc19bf174 | 0,\n  0xe49b69c1 | 0,\n  0xefbe4786 | 0,\n  0x0fc19dc6 | 0,\n  0x240ca1cc | 0,\n  0x2de92c6f | 0,\n  0x4a7484aa | 0,\n  0x5cb0a9dc | 0,\n  0x76f988da | 0,\n  0x983e5152 | 0,\n  0xa831c66d | 0,\n  0xb00327c8 | 0,\n  0xbf597fc7 | 0,\n  0xc6e00bf3 | 0,\n  0xd5a79147 | 0,\n  0x06ca6351 | 0,\n  0x14292967 | 0,\n  0x27b70a85 | 0,\n  0x2e1b2138 | 0,\n  0x4d2c6dfc | 0,\n  0x53380d13 | 0,\n  0x650a7354 | 0,\n  0x766a0abb | 0,\n  0x81c2c92e | 0,\n  0x92722c85 | 0,\n  0xa2bfe8a1 | 0,\n  0xa81a664b | 0,\n  0xc24b8b70 | 0,\n  0xc76c51a3 | 0,\n  0xd192e819 | 0,\n  0xd6990624 | 0,\n  0xf40e3585 | 0,\n  0x106aa070 | 0,\n  0x19a4c116 | 0,\n  0x1e376c08 | 0,\n  0x2748774c | 0,\n  0x34b0bcb5 | 0,\n  0x391c0cb3 | 0,\n  0x4ed8aa4a | 0,\n  0x5b9cca4f | 0,\n  0x682e6ff3 | 0,\n  0x748f82ee | 0,\n  0x78a5636f | 0,\n  0x84c87814 | 0,\n  0x8cc70208 | 0,\n  0x90befffa | 0,\n  0xa4506ceb | 0,\n  0xbef9a3f7 | 0,\n  0xc67178f2 | 0,\n];\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when decoding a base58 encoding\n */\nexport class Base58DecodingError extends TaquitoError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'Base58DecodingError';\n  }\n}\n\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg: number[] | Uint8Array): number[] {\n  // pad the message\n  const r = (msg.length + 9) % 64;\n  const pad = r === 0 ? 0 : 64 - r;\n\n  if (msg.length > 268435455) {\n    throw new InvalidMessageError('', `: Invalid length ${msg.length} is too big -- SHA-256.`);\n  }\n\n  const l = msg.length << 3;\n  const buffer = [\n    ...msg,\n    0x80,\n    ...new Array<number>(pad).fill(0),\n    0,\n    0,\n    0,\n    0,\n    (l >> 24) & 0xff,\n    (l >> 16) & 0xff,\n    (l >> 8) & 0xff,\n    l & 0xff,\n  ];\n\n  function ror(x: number, n: number): number {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  const h = [...H];\n  const w = new Array<number>(64);\n  const v = new Array<number>(8);\n\n  for (let offset = 0; offset < buffer.length; offset += 64) {\n    let q = offset;\n    let i = 0;\n    while (i < 16) {\n      w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n      q += 4;\n      i++;\n    }\n    while (i < 64) {\n      const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n      const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n      w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n      i++;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      v[i] = h[i];\n    }\n\n    for (let i = 0; i < 64; i++) {\n      const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n      const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n      const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ (~v[4] & v[6])) + K[i] + w[i]) | 0;\n      const t2 = (b0 + ((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2]))) | 0;\n\n      v[7] = v[6];\n      v[6] = v[5];\n      v[5] = v[4];\n      v[4] = (v[3] + t1) | 0;\n      v[3] = v[2];\n      v[2] = v[1];\n      v[1] = v[0];\n      v[0] = (t1 + t2) | 0;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      h[i] = (h[i] + v[i]) | 0;\n    }\n  }\n\n  const digest: number[] = [];\n  for (const v of h) {\n    digest.push((v >> 24) & 0xff);\n    digest.push((v >> 16) & 0xff);\n    digest.push((v >> 8) & 0xff);\n    digest.push(v & 0xff);\n  }\n\n  return digest;\n}\n\nconst base58alphabetFwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18,\n  19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n];\n\nconst base58alphabetBwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66,\n  67, 68, 69, 70, 71, 72, 73,\n];\n\nfunction byteAt(src: string, i: number): number {\n  const c = src.charCodeAt(i) - 49;\n  if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n    throw new Base58DecodingError(`Unexpected character at position ${i}: ${src[i]}`);\n  }\n  return base58alphabetFwd[c];\n}\n\nexport function decodeBase58(src: string): number[] {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && byteAt(src, i) === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = byteAt(src, i++);\n    /*\n        for every symbol x\n        acc = acc * 58 + x\n        where acc is a little endian arbitrary length integer\n        */\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 58 + carry;\n      acc[ii++] = m % 256;\n      carry = Math.floor(m / 256);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  return acc.reverse();\n}\n\nexport function encodeBase58(src: number[] | Uint8Array): string {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && src[i] === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = src[i++];\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 256 + carry;\n      acc[ii++] = m % 58;\n      carry = Math.floor(m / 58);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  acc.reverse();\n  return String.fromCharCode(...acc.map((v) => base58alphabetBwd[v] + 49));\n}\n\nexport function decodeBase58Check(src: string): number[] {\n  const buffer = decodeBase58(src);\n  if (buffer.length < 4) {\n    throw new Base58DecodingError(`Data is too short ${buffer.length}`);\n  }\n\n  const data = buffer.slice(0, buffer.length - 4);\n  const sum = buffer.slice(buffer.length - 4);\n  const computed = sha256(sha256(data));\n  if (\n    sum[0] !== computed[0] ||\n    sum[1] !== computed[1] ||\n    sum[2] !== computed[2] ||\n    sum[3] !== computed[3]\n  ) {\n    throw new Base58DecodingError('Invalid checksum');\n  }\n\n  return data;\n}\n\nexport function encodeBase58Check(src: number[] | Uint8Array): string {\n  const sum = sha256(sha256(src));\n  return encodeBase58([...src, ...sum.slice(0, 4)]);\n}\n", "import { ParameterValidationError, TaquitoError } from '@taquito/core';\n/**\n *  @category Error\n *  @description Error that indicates an invalid Michelson being passed or used\n */\nexport class InvalidMichelsonError extends ParameterValidationError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'InvalidMichelsonError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid type expression being passed or used\n */\nexport class InvalidTypeExpressionError extends ParameterValidationError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'InvalidTypeExpressionError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid data expression being passed or used\n */\nexport class InvalidDataExpressionError extends ParameterValidationError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'InvalidDataExpressionError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract entrypoint being referenced or passed\n */\nexport class InvalidEntrypointError extends ParameterValidationError {\n  constructor(public readonly entrypoint?: string) {\n    super();\n    this.name = 'InvalidEntrypointError';\n    this.message = `Contract has no entrypoint named: \"${entrypoint}\"`;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when trying to encode Tezos ID\n */\nexport class TezosIdEncodeError extends ParameterValidationError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'TezosIdEncodeError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a general error happening when trying to create a LongInteger\n */\nexport class LongIntegerError extends TaquitoError {\n  constructor(public readonly message: string) {\n    super();\n    this.name = 'LongIntegerError';\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when trying to parse a hex byte\n */\nexport class HexParseError extends TaquitoError {\n  constructor(public readonly hexByte: string) {\n    super();\n    this.name = 'HexParseError';\n    this.message = `Unable to parse hex byte \"${hexByte}\"`;\n  }\n}\n", "import { Prim, Expr, StringLiteral, IntLiteral } from './micheline';\nimport { decodeBase58Check, encodeBase58Check } from './base58';\nimport {\n  MichelsonData,\n  MichelsonDataPair,\n  MichelsonType,\n  MichelsonTypePair,\n} from './michelson-types';\nimport { HexParseError, LongIntegerError, TezosIdEncodeError } from './errors';\nimport { TaquitoError } from '@taquito/core';\n\nexport type Tuple<N extends number, T> = N extends 1\n  ? [T]\n  : N extends 2\n  ? [T, T]\n  : N extends 3\n  ? [T, T, T]\n  : N extends 4\n  ? [T, T, T, T]\n  : N extends 5\n  ? [T, T, T, T, T]\n  : N extends 6\n  ? [T, T, T, T, T, T]\n  : N extends 7\n  ? [T, T, T, T, T, T, T]\n  : N extends 8\n  ? [T, T, T, T, T, T, T, T]\n  : T[];\n\ntype RequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\ntype OmitProp<T, K extends keyof T> = Omit<T, K> & { [P in K]?: undefined };\n\nexport type ReqArgs<T extends Prim> = RequiredProp<T, 'args'>;\nexport type NoArgs<T extends Prim> = OmitProp<T, 'args'>;\nexport type NoAnnots<T extends Prim> = OmitProp<T, 'annots'>;\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\n/**\n *  @category Error\n *  @description Error that indicates a Michelson failure occurring\n */\nexport class MichelsonError<T extends Expr = Expr> extends TaquitoError {\n  /**\n   * @param val Value of a AST node caused the error\n   * @param path Path to a node caused the error\n   * @param message An error message\n   */\n  constructor(public readonly val: T, public readonly message: string) {\n    super();\n    this.name = 'MichelsonError';\n  }\n}\n\nexport function isMichelsonError<T extends Expr = Expr>(err: unknown): err is MichelsonError<T> {\n  return err instanceof MichelsonError;\n}\n\nexport class MichelsonTypeError extends MichelsonError<MichelsonType | MichelsonType[]> {\n  public data?: Expr;\n\n  /**\n   * @param val Value of a type node caused the error\n   * @param data Value of a data node caused the error\n   * @param message An error message\n   */\n  constructor(\n    public readonly val: MichelsonType | MichelsonType[],\n    public readonly message: string,\n    data?: Expr\n  ) {\n    super(val, message);\n    this.name = 'MichelsonTypeError';\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n}\n\n// Ad hoc big integer parser\nexport class LongInteger {\n  private neg = false;\n  private buf: number[] = [];\n\n  private append(c: number) {\n    let i = 0;\n    while (c !== 0 || i < this.buf.length) {\n      const m = (this.buf[i] || 0) * 10 + c;\n      this.buf[i++] = m % 256;\n      c = Math.floor(m / 256);\n    }\n  }\n\n  constructor(arg?: string | number) {\n    if (arg === undefined) {\n      return;\n    }\n    if (typeof arg === 'string') {\n      for (let i = 0; i < arg.length; i++) {\n        const c = arg.charCodeAt(i);\n        if (i === 0 && c === 0x2d) {\n          this.neg = true;\n        } else {\n          if (c < 0x30 || c > 0x39) {\n            throw new LongIntegerError(`unexpected character in integer constant \"${arg[i]}\"`);\n          }\n          this.append(c - 0x30);\n        }\n      }\n    } else if (arg < 0) {\n      this.neg = true;\n      this.append(-arg);\n    } else {\n      this.append(arg);\n    }\n  }\n\n  cmp(arg: LongInteger): number {\n    if (this.neg !== arg.neg) {\n      return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n    } else {\n      let ret = 0;\n      if (this.buf.length !== arg.buf.length) {\n        ret = this.buf.length < arg.buf.length ? -1 : 1;\n      } else if (this.buf.length !== 0) {\n        let i = arg.buf.length - 1;\n        while (i >= 0 && this.buf[i] === arg.buf[i]) {\n          i--;\n        }\n        ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n      }\n      return !this.neg ? ret : ret === 0 ? 0 : -ret;\n    }\n  }\n\n  get sign(): number {\n    return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n  }\n}\n\nexport function parseBytes(s: string): number[] | null {\n  const ret: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const x = parseInt(s.slice(i, i + 2), 16);\n    if (Number.isNaN(x)) {\n      return null;\n    }\n    ret.push(x);\n  }\n  return ret;\n}\n\nexport function compareBytes(a: number[] | Uint8Array, b: number[] | Uint8Array): number {\n  if (a.length !== b.length) {\n    return a.length < b.length ? -1 : 1;\n  } else if (a.length !== 0) {\n    let i = 0;\n    while (i < a.length && a[i] === b[i]) {\n      i++;\n    }\n    return i === a.length ? 0 : a[i] < b[i] ? -1 : 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function isDecimal(x: string): boolean {\n  try {\n    new LongInteger(x);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isNatural(x: string): boolean {\n  try {\n    return new LongInteger(x).sign >= 0;\n  } catch {\n    return false;\n  }\n}\n\nexport interface UnpackedAnnotations {\n  f?: string[];\n  t?: string[];\n  v?: string[];\n}\n\nexport interface UnpackAnnotationsOptions {\n  specialVar?: boolean; // CAR, CDR\n  emptyVar?: boolean;\n  specialFields?: boolean; // PAIR, LEFT, RIGHT\n  emptyFields?: boolean;\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z.%@]*)?)$/;\n\nexport function unpackAnnotations(\n  p: Prim | Expr[],\n  opt?: UnpackAnnotationsOptions\n): UnpackedAnnotations {\n  if (Array.isArray(p)) {\n    return {};\n  }\n\n  let field: string[] | undefined;\n  let type: string[] | undefined;\n  let vars: string[] | undefined;\n\n  if (p.annots !== undefined) {\n    for (const v of p.annots) {\n      if (v.length !== 0) {\n        if (\n          !annRe.test(v) ||\n          (!opt?.specialVar && (v === '@%' || v === '@%%')) ||\n          (!opt?.specialFields && v === '%@')\n        ) {\n          throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n        }\n\n        switch (v[0]) {\n          case '%':\n            if (opt?.emptyFields || v.length > 1) {\n              field = field || [];\n              field.push(v);\n            }\n            break;\n          case ':':\n            if (v.length > 1) {\n              type = type || [];\n              type.push(v);\n            }\n            break;\n          case '@':\n            if (opt?.emptyVar || v.length > 1) {\n              vars = vars || [];\n              vars.push(v);\n            }\n            break;\n        }\n      }\n    }\n  }\n  return { f: field, t: type, v: vars };\n}\n\nexport type TezosIDType =\n  | 'BlockHash'\n  | 'OperationHash'\n  | 'OperationListHash'\n  | 'OperationListListHash'\n  | 'ProtocolHash'\n  | 'ContextHash'\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash'\n  | 'CryptoboxPublicKeyHash'\n  | 'ED25519Seed'\n  | 'ED25519PublicKey'\n  | 'SECP256K1SecretKey'\n  | 'P256SecretKey'\n  | 'ED25519EncryptedSeed'\n  | 'SECP256K1EncryptedSecretKey'\n  | 'P256EncryptedSecretKey'\n  | 'SECP256K1PublicKey'\n  | 'P256PublicKey'\n  | 'SECP256K1Scalar'\n  | 'SECP256K1Element'\n  | 'ED25519SecretKey'\n  | 'ED25519Signature'\n  | 'SECP256K1Signature'\n  | 'P256Signature'\n  | 'GenericSignature'\n  | 'ChainID'\n  | 'RollupAddress'\n  | 'TxRollupL2Address';\n\nexport type TezosIDPrefix = [number, number[]]; // payload length, prefix\n\nexport const tezosPrefix: Record<TezosIDType, TezosIDPrefix> = {\n  BlockHash: [32, [1, 52]], // B(51)\n  OperationHash: [32, [5, 116]], // o(51)\n  OperationListHash: [32, [133, 233]], // Lo(52)\n  OperationListListHash: [32, [29, 159, 109]], // LLo(53)\n  ProtocolHash: [32, [2, 170]], // P(51)\n  ContextHash: [32, [79, 199]], // Co(52)\n  ED25519PublicKeyHash: [20, [6, 161, 159]], // tz1(36)\n  SECP256K1PublicKeyHash: [20, [6, 161, 161]], // tz2(36)\n  P256PublicKeyHash: [20, [6, 161, 164]], // tz3(36)\n  ContractHash: [20, [2, 90, 121]], // KT1(36)\n  CryptoboxPublicKeyHash: [16, [153, 103]], // id(30)\n  ED25519Seed: [32, [13, 15, 58, 7]], // edsk(54)\n  ED25519PublicKey: [32, [13, 15, 37, 217]], // edpk(54)\n  SECP256K1SecretKey: [32, [17, 162, 224, 201]], // spsk(54)\n  P256SecretKey: [32, [16, 81, 238, 189]], // p2sk(54)\n  ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]], // edesk(88)\n  SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]], // spesk(88)\n  P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]], // p2esk(88)\n  SECP256K1PublicKey: [33, [3, 254, 226, 86]], // sppk(55)\n  P256PublicKey: [33, [3, 178, 139, 127]], // p2pk(55)\n  SECP256K1Scalar: [33, [38, 248, 136]], // SSp(53)\n  SECP256K1Element: [33, [5, 92, 0]], // GSp(54)\n  ED25519SecretKey: [64, [43, 246, 78, 7]], // edsk(98)\n  ED25519Signature: [64, [9, 245, 205, 134, 18]], // edsig(99)\n  SECP256K1Signature: [64, [13, 115, 101, 19, 63]], // spsig1(99)\n  P256Signature: [64, [54, 240, 44, 52]], // p2sig(98)\n  GenericSignature: [64, [4, 130, 43]], // sig(96)\n  ChainID: [4, [87, 82, 0]],\n  RollupAddress: [20, [1, 128, 120, 31]],\n  TxRollupL2Address: [20, [6, 161, 166]],\n};\n\nexport function checkDecodeTezosID<T extends TezosIDType[]>(\n  id: string,\n  ...types: T\n): [T[number], number[]] | null {\n  const buf = decodeBase58Check(id);\n  for (const t of types) {\n    const [plen, p] = tezosPrefix[t];\n    if (buf.length === plen + p.length) {\n      let i = 0;\n      while (i < p.length && buf[i] === p[i]) {\n        i++;\n      }\n      if (i === p.length) {\n        return [t, buf.slice(p.length)];\n      }\n    }\n  }\n  return null;\n}\n\nexport function encodeTezosID(id: TezosIDType, data: number[] | Uint8Array): string {\n  const [plen, p] = tezosPrefix[id];\n  if (data.length !== plen) {\n    throw new TezosIdEncodeError(`Incorrect data length for ${id}: ${data.length}`);\n  }\n  return encodeBase58Check([...p, ...data]);\n}\n\n// reassemble comb pair for transparent comparison etc. non-recursive!\ntype PairTypeOrDataPrim<I extends 'pair' | 'Pair'> = I extends 'pair'\n  ? Extract<MichelsonTypePair<MichelsonType[]>, Prim>\n  : Extract<MichelsonDataPair<MichelsonData[]>, Prim>;\nexport function unpackComb<I extends 'pair' | 'Pair'>(\n  id: I,\n  v: I extends 'pair' ? MichelsonTypePair<MichelsonType[]> : MichelsonDataPair<MichelsonData[]>\n): PairTypeOrDataPrim<I> {\n  const vv: MichelsonTypePair<MichelsonType[]> | MichelsonDataPair<MichelsonData[]> = v;\n  const args = Array.isArray(vv) ? vv : vv.args;\n  if (args.length === 2) {\n    // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n    const ret =\n      id === 'pair'\n        ? {\n            prim: 'pair',\n            args,\n          }\n        : {\n            prim: 'Pair',\n            args,\n          };\n    return ret as PairTypeOrDataPrim<I>;\n  }\n\n  return {\n    ...(Array.isArray(vv) ? { prim: id } : vv),\n    args: [\n      args[0],\n      {\n        prim: id,\n        args: args.slice(1),\n      },\n    ],\n  } as PairTypeOrDataPrim<I>;\n}\n\nexport function isPairType(t: MichelsonType): t is MichelsonTypePair<MichelsonType[]> {\n  return Array.isArray(t) || t.prim === 'pair';\n}\n\nexport function isPairData(d: Expr): d is MichelsonDataPair<MichelsonData[]> {\n  return Array.isArray(d) || ('prim' in d && d.prim === 'Pair');\n}\n\nconst rfc3339Re =\n  /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nexport function parseDate(a: StringLiteral | IntLiteral): Date | null {\n  if ('string' in a) {\n    if (isNatural(a.string)) {\n      return new Date(parseInt(a.string, 10));\n    } else if (rfc3339Re.test(a.string)) {\n      const x = new Date(a.string);\n      if (!Number.isNaN(x.valueOf)) {\n        return x;\n      }\n    }\n  } else if (isDecimal(a.int)) {\n    return new Date(parseInt(a.int, 10));\n  }\n  return null;\n}\n\nexport function parseHex(s: string): number[] {\n  const res: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const ss = s.slice(i, i + 2);\n    const x = parseInt(ss, 16);\n    if (Number.isNaN(x)) {\n      throw new HexParseError(ss);\n    }\n    res.push(x);\n  }\n  return res;\n}\n\nexport function hexBytes(bytes: number[]): string {\n  return bytes.map((x) => ((x >> 4) & 0xf).toString(16) + (x & 0xf).toString(16)).join('');\n}\n", "import { Prim, Expr, IntLiteral, StringLiteral } from './micheline';\nimport { Tuple, NoArgs, ReqArgs, MichelsonError } from './utils';\nimport {\n  MichelsonCode,\n  MichelsonType,\n  MichelsonData,\n  MichelsonContract,\n  MichelsonNoArgInstruction,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonSimpleComparableTypeID,\n} from './michelson-types';\n\n// Michelson validator\n\nconst maxViewNameLength = 31;\n\nconst noArgInstructionIDs: Record<MichelsonNoArgInstruction['prim'], true> = {\n  ABS: true,\n  ADD: true,\n  ADDRESS: true,\n  AMOUNT: true,\n  AND: true,\n  APPLY: true,\n  BALANCE: true,\n  BLAKE2B: true,\n  CAR: true,\n  CDR: true,\n  CHAIN_ID: true,\n  CHECK_SIGNATURE: true,\n  COMPARE: true,\n  CONCAT: true,\n  CONS: true,\n  EDIV: true,\n  EQ: true,\n  EXEC: true,\n  FAILWITH: true,\n  GE: true,\n  GET_AND_UPDATE: true,\n  GT: true,\n  HASH_KEY: true,\n  IMPLICIT_ACCOUNT: true,\n  INT: true,\n  ISNAT: true,\n  JOIN_TICKETS: true,\n  KECCAK: true,\n  LE: true,\n  LEVEL: true,\n  LSL: true,\n  LSR: true,\n  LT: true,\n  MEM: true,\n  MUL: true,\n  NEG: true,\n  NEQ: true,\n  NEVER: true,\n  NOT: true,\n  NOW: true,\n  OR: true,\n  PACK: true,\n  PAIRING_CHECK: true,\n  READ_TICKET: true,\n  SAPLING_VERIFY_UPDATE: true,\n  SELF: true,\n  SELF_ADDRESS: true,\n  SENDER: true,\n  SET_DELEGATE: true,\n  SHA256: true,\n  SHA3: true,\n  SHA512: true,\n  SIZE: true,\n  SLICE: true,\n  SOME: true,\n  SOURCE: true,\n  SPLIT_TICKET: true,\n  SUB: true,\n  SWAP: true,\n  TICKET: true,\n  TICKET_DEPRECATED: true,\n  TOTAL_VOTING_POWER: true,\n  TRANSFER_TOKENS: true,\n  UNIT: true,\n  VOTING_POWER: true,\n  XOR: true,\n  RENAME: true,\n  OPEN_CHEST: true,\n  SUB_MUTEZ: true,\n  MIN_BLOCK_TIME: true,\n  BYTES: true,\n  NAT: true,\n};\n\nexport const instructionIDs: Record<MichelsonInstruction['prim'], true> = Object.assign(\n  {},\n  noArgInstructionIDs,\n  {\n    CONTRACT: true,\n    CREATE_CONTRACT: true,\n    DIG: true,\n    DIP: true,\n    DROP: true,\n    DUG: true,\n    DUP: true,\n    EMIT: true,\n    EMPTY_BIG_MAP: true,\n    EMPTY_MAP: true,\n    EMPTY_SET: true,\n    GET: true,\n    IF: true,\n    IF_CONS: true,\n    IF_LEFT: true,\n    IF_NONE: true,\n    ITER: true,\n    LAMBDA: true,\n    LAMBDA_REC: true,\n    LEFT: true,\n    LOOP: true,\n    LOOP_LEFT: true,\n    MAP: true,\n    NIL: true,\n    NONE: true,\n    PAIR: true,\n    PUSH: true,\n    RIGHT: true,\n    SAPLING_EMPTY_STATE: true,\n    UNPACK: true,\n    UNPAIR: true,\n    UPDATE: true,\n    CAST: true,\n    VIEW: true,\n  } as const\n);\n\nconst simpleComparableTypeIDs: Record<MichelsonSimpleComparableTypeID, true> = {\n  unit: true,\n  never: true,\n  bool: true,\n  int: true,\n  nat: true,\n  string: true,\n  chain_id: true,\n  bytes: true,\n  mutez: true,\n  key_hash: true,\n  key: true,\n  signature: true,\n  timestamp: true,\n  address: true,\n  tx_rollup_l2_address: true,\n};\n\nconst typeIDs: Record<MichelsonTypeID, true> = Object.assign({}, simpleComparableTypeIDs, {\n  or: true,\n  pair: true,\n  set: true,\n  big_map: true,\n  contract: true,\n  lambda: true,\n  list: true,\n  map: true,\n  operation: true,\n  option: true,\n  bls12_381_g1: true,\n  bls12_381_g2: true,\n  bls12_381_fr: true,\n  sapling_transaction: true,\n  sapling_transaction_deprecated: true,\n  sapling_state: true,\n  ticket: true,\n  chest_key: true,\n  chest: true,\n} as const);\n\nexport class MichelsonValidationError extends MichelsonError {\n  /**\n   * @param val Value of a node caused the error\n   * @param message An error message\n   */\n  constructor(public readonly val: Expr, public readonly message: string) {\n    super(val, message);\n    this.name = 'MichelsonValidationError';\n  }\n}\n\nfunction isPrim(ex: Expr): ex is Prim {\n  return 'prim' in ex;\n}\n\nfunction isPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  return Array.isArray(ex) || 'prim' in ex;\n}\n\nfunction assertPrim(ex: Expr): ex is Prim {\n  if (isPrim(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim expression expected');\n}\n\nfunction assertSeq(ex: Expr): ex is Expr[] {\n  if (Array.isArray(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'sequence expression expected');\n}\n\nfunction assertPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  if (isPrimOrSeq(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim or sequence expression expected');\n}\n\nfunction assertNatural(i: IntLiteral) {\n  if (i.int[0] === '-') {\n    throw new MichelsonValidationError(i, 'natural number expected');\n  }\n}\n\nfunction assertIntLiteral(ex: Expr): ex is IntLiteral {\n  if ('int' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'int literal expected');\n}\n\nfunction assertStringLiteral(ex: Expr): ex is StringLiteral {\n  if ('string' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'string literal expected');\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonInstruction(ex: Expr): ex is MichelsonCode {\n  if (Array.isArray(ex)) {\n    for (const n of ex) {\n      if (!Array.isArray(n) && !isPrim(n)) {\n        throw new MichelsonValidationError(ex, 'sequence or prim expected');\n      }\n      assertMichelsonInstruction(n);\n    }\n    return true;\n  }\n\n  if (assertPrim(ex)) {\n    if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n      assertArgs(ex, 0);\n      return true;\n    }\n\n    switch (ex.prim) {\n      case 'DROP':\n      case 'PAIR':\n      case 'UNPAIR':\n      case 'DUP':\n      case 'UPDATE':\n      case 'GET':\n        if (ex.args !== undefined && assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'DIG':\n      case 'DUG':\n      case 'SAPLING_EMPTY_STATE':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'NONE':\n      case 'LEFT':\n      case 'RIGHT':\n      case 'NIL':\n      case 'CAST':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonType(ex.args[0]);\n        }\n        break;\n\n      case 'UNPACK':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPackableType(ex.args[0]);\n        }\n        break;\n\n      case 'CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPassableType(ex.args[0]);\n        }\n        break;\n\n      case 'IF_NONE':\n      case 'IF_LEFT':\n      case 'IF_CONS':\n      case 'IF':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        }\n        break;\n\n      case 'MAP':\n      case 'ITER':\n      case 'LOOP':\n      case 'LOOP_LEFT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonInstruction(ex.args[0]);\n        }\n        break;\n\n      case 'CREATE_CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonContract(ex.args[0]);\n        }\n        break;\n\n      case 'DIP':\n        if (ex.args?.length === 2) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        } else if (ex.args?.length === 1) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n        } else {\n          throw new MichelsonValidationError(ex, '1 or 2 arguments expected');\n        }\n        break;\n\n      case 'PUSH':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonPushableType(ex.args[0]);\n          assertMichelsonData(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_SET':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonComparableType(ex.args[0]);\n        }\n        break;\n\n      case 'EMPTY_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_BIG_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonBigMapStorableType(ex.args[1]);\n        }\n        break;\n\n      case 'LAMBDA_REC':\n      case 'LAMBDA':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 3)) {\n          assertMichelsonType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[2])) {\n            assertMichelsonInstruction(ex.args[2]);\n          }\n        }\n        break;\n\n      case 'VIEW':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          if (assertStringLiteral(ex.args[0])) {\n            assertViewNameValid(ex.args[0]);\n          }\n          if (assertMichelsonType(ex.args[1])) {\n            assertMichelsonPushableType(ex.args[1]);\n          }\n        }\n        break;\n\n      case 'EMIT':\n        if (ex.args && ex.args.length > 0) {\n          assertArgs(ex, 1);\n        } else {\n          assertArgs(ex, 0);\n        }\n        break;\n\n      default:\n        throw new MichelsonValidationError(ex, 'instruction expected');\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonComparableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (Array.isArray(ex) || ex.prim === 'pair' || ex.prim === 'or' || ex.prim === 'option') {\n      traverseType(ex, (ex) => assertMichelsonComparableType(ex));\n    } else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n      throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPackableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used inside PACK/UNPACK instructions`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPackableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPushableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n      }\n      traverseType(ex, (ex) => assertMichelsonPushableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'operation' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a storage`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonStorableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPassableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation') {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a parameter`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPassableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonBigMapStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n      }\n      traverseType(ex, (ex) => assertMichelsonBigMapStorableType(ex));\n    }\n  }\n  return true;\n}\n\nconst viewRe = new RegExp('^[a-zA-Z0-9_.%@]*$');\n\nexport function assertViewNameValid(name: StringLiteral): void {\n  if (name.string.length > maxViewNameLength) {\n    throw new MichelsonValidationError(name, `view name too long: ${name.string}`);\n  }\n  if (!viewRe.test(name.string)) {\n    throw new MichelsonValidationError(name, `invalid character(s) in view name: ${name.string}`);\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n        throw new MichelsonValidationError(ex, 'type expected');\n      }\n      traverseType(ex, (ex) => assertMichelsonType(ex));\n    }\n  }\n  return true;\n}\n\nfunction traverseType(ex: Prim | Expr[], cb: (ex: Prim | Expr[]) => void): ex is MichelsonType {\n  if (Array.isArray(ex) || ex.prim === 'pair') {\n    const args = Array.isArray(ex) ? ex : ex.args;\n    if (args === undefined || args.length < 2) {\n      throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n    }\n    args.forEach((a) => {\n      if (assertPrimOrSeq(a)) {\n        cb(a);\n      }\n    });\n    return true;\n  }\n\n  switch (ex.prim) {\n    case 'option':\n    case 'list':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        cb(ex.args[0]);\n      }\n      break;\n\n    case 'contract':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonPassableType(ex.args[0]);\n      }\n      break;\n\n    case 'or':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        cb(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'lambda':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2)) {\n        assertMichelsonType(ex.args[0]);\n        assertMichelsonType(ex.args[1]);\n      }\n      break;\n\n    case 'set':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'big_map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        assertMichelsonBigMapStorableType(ex.args[1]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'ticket':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (assertArgs(ex, 1)) {\n        assertIntLiteral(ex.args[0]);\n      }\n      break;\n\n    default:\n      assertArgs(ex, 0);\n  }\n\n  return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonData(ex: Expr): ex is MichelsonData {\n  if ('int' in ex || 'string' in ex || 'bytes' in ex) {\n    return true;\n  }\n\n  if (Array.isArray(ex)) {\n    let mapElts = 0;\n    for (const n of ex) {\n      if (isPrim(n) && n.prim === 'Elt') {\n        /* istanbul ignore else */\n        if (assertArgs(n, 2)) {\n          assertMichelsonData(n.args[0]);\n          assertMichelsonData(n.args[1]);\n        }\n        mapElts++;\n      } else {\n        assertMichelsonData(n);\n      }\n    }\n\n    if (mapElts !== 0 && mapElts !== ex.length) {\n      throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n    }\n    return true;\n  }\n\n  if (isPrim(ex)) {\n    switch (ex.prim) {\n      case 'Unit':\n      case 'True':\n      case 'False':\n      case 'None':\n        assertArgs(ex, 0);\n        break;\n\n      case 'Pair':\n        /* istanbul ignore else */\n        if (ex.args === undefined || ex.args.length < 2) {\n          throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n        }\n        for (const a of ex.args) {\n          assertMichelsonData(a);\n        }\n        break;\n\n      case 'Left':\n      case 'Right':\n      case 'Some':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonData(ex.args[0]);\n        }\n        break;\n\n      case 'Lambda_rec':\n        if (ex.args) {\n          assertMichelsonInstruction(ex.args);\n        }\n        break;\n\n      default:\n        if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n          assertMichelsonInstruction(ex);\n        } else {\n          throw new MichelsonValidationError(ex, 'data entry or instruction expected');\n        }\n    }\n  } else {\n    throw new MichelsonValidationError(ex, 'data entry expected');\n  }\n\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonContract(ex: Expr): ex is MichelsonContract {\n  /* istanbul ignore else */\n  if (assertSeq(ex)) {\n    const toplevelSec: { [sec: string]: boolean } = {};\n    const views: { [name: string]: boolean } = {};\n    for (const sec of ex) {\n      if (assertPrim(sec)) {\n        if (sec.prim !== 'view') {\n          if (sec.prim in toplevelSec) {\n            throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n          }\n          toplevelSec[sec.prim] = true;\n        }\n\n        /* istanbul ignore else */\n        switch (sec.prim) {\n          case 'code':\n            if (assertArgs(sec, 1)) {\n              /* istanbul ignore else */\n              if (assertSeq(sec.args[0])) {\n                assertMichelsonInstruction(sec.args[0]);\n              }\n            }\n            break;\n\n          case 'parameter':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonPassableType(sec.args[0]);\n            }\n            if (sec.annots) {\n              throw new MichelsonValidationError(\n                sec,\n                'Annotation must be part of the parameter type'\n              );\n            }\n            break;\n\n          case 'storage':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonStorableType(sec.args[0]);\n            }\n            break;\n\n          case 'view':\n            if (assertArgs(sec, 4)) {\n              if (assertStringLiteral(sec.args[0])) {\n                const name = sec.args[0];\n                if (name.string in views) {\n                  throw new MichelsonValidationError(ex, `duplicate view name: ${name.string}`);\n                }\n                views[name.string] = true;\n                assertViewNameValid(name);\n              }\n\n              assertMichelsonPushableType(sec.args[1]);\n              assertMichelsonPushableType(sec.args[2]);\n              if (assertSeq(sec.args[3])) {\n                assertMichelsonInstruction(sec.args[3]);\n              }\n            }\n            break;\n\n          default:\n            throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nexport function isMichelsonScript(ex: Expr): ex is MichelsonContract {\n  try {\n    assertMichelsonContract(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nexport function isMichelsonData(ex: Expr): ex is MichelsonData {\n  try {\n    assertMichelsonData(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nexport function isMichelsonCode(ex: Expr): ex is InstructionList {\n  try {\n    assertMichelsonInstruction(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nexport function isMichelsonType(ex: Expr): ex is MichelsonType {\n  try {\n    assertMichelsonType(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isInstruction(p: Prim): p is MichelsonInstruction {\n  return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\n\nexport function assertDataListIfAny(d: MichelsonData): d is MichelsonData[] {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if ('prim' in v) {\n      if (isInstruction(v)) {\n        throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n      } else if (v.prim === 'Elt') {\n        throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n      }\n    }\n  }\n  return true;\n}\n", "import { BytesLiteral, Expr, IntLiteral, Prim } from './micheline';\nimport {\n  MichelsonTypeID,\n  MichelsonDataID,\n  MichelsonSectionID,\n  MichelsonInstructionID,\n  MichelsonData,\n  MichelsonType,\n  MichelsonDataOr,\n  MichelsonDataOption,\n  MichelsonInstruction,\n} from './michelson-types';\nimport {\n  assertDataListIfAny,\n  assertMichelsonData,\n  assertMichelsonInstruction,\n} from './michelson-validator';\nimport {\n  checkDecodeTezosID,\n  encodeTezosID,\n  hexBytes,\n  isPairData,\n  isPairType,\n  MichelsonTypeError,\n  parseBytes,\n  parseDate,\n  parseHex,\n  unpackComb,\n} from './utils';\n\ntype PrimID =\n  | MichelsonTypeID\n  | MichelsonDataID\n  | MichelsonSectionID\n  | MichelsonInstructionID\n  | 'Elt'\n  | 'constant';\n\n// The order is important!\n// The position represent the encoding value.\nconst primitives: PrimID[] = [\n  'parameter',\n  'storage',\n  'code',\n  'False',\n  'Elt',\n  'Left',\n  'None',\n  'Pair',\n  'Right',\n  'Some',\n  'True',\n  'Unit',\n  'PACK',\n  'UNPACK',\n  'BLAKE2B',\n  'SHA256',\n  'SHA512',\n  'ABS',\n  'ADD',\n  'AMOUNT',\n  'AND',\n  'BALANCE',\n  'CAR',\n  'CDR',\n  'CHECK_SIGNATURE',\n  'COMPARE',\n  'CONCAT',\n  'CONS',\n  'CREATE_ACCOUNT',\n  'CREATE_CONTRACT',\n  'IMPLICIT_ACCOUNT',\n  'DIP',\n  'DROP',\n  'DUP',\n  'EDIV',\n  'EMPTY_MAP',\n  'EMPTY_SET',\n  'EQ',\n  'EXEC',\n  'FAILWITH',\n  'GE',\n  'GET',\n  'GT',\n  'HASH_KEY',\n  'IF',\n  'IF_CONS',\n  'IF_LEFT',\n  'IF_NONE',\n  'INT',\n  'LAMBDA',\n  'LE',\n  'LEFT',\n  'LOOP',\n  'LSL',\n  'LSR',\n  'LT',\n  'MAP',\n  'MEM',\n  'MUL',\n  'NEG',\n  'NEQ',\n  'NIL',\n  'NONE',\n  'NOT',\n  'NOW',\n  'OR',\n  'PAIR',\n  'PUSH',\n  'RIGHT',\n  'SIZE',\n  'SOME',\n  'SOURCE',\n  'SENDER',\n  'SELF',\n  'STEPS_TO_QUOTA',\n  'SUB',\n  'SWAP',\n  'TRANSFER_TOKENS',\n  'SET_DELEGATE',\n  'UNIT',\n  'UPDATE',\n  'XOR',\n  'ITER',\n  'LOOP_LEFT',\n  'ADDRESS',\n  'CONTRACT',\n  'ISNAT',\n  'CAST',\n  'RENAME',\n  'bool',\n  'contract',\n  'int',\n  'key',\n  'key_hash',\n  'lambda',\n  'list',\n  'map',\n  'big_map',\n  'nat',\n  'option',\n  'or',\n  'pair',\n  'set',\n  'signature',\n  'string',\n  'bytes',\n  'mutez',\n  'timestamp',\n  'unit',\n  'operation',\n  'address',\n  'SLICE',\n  'DIG',\n  'DUG',\n  'EMPTY_BIG_MAP',\n  'APPLY',\n  'chain_id',\n  'CHAIN_ID',\n  'LEVEL',\n  'SELF_ADDRESS',\n  'never',\n  'NEVER',\n  'UNPAIR',\n  'VOTING_POWER',\n  'TOTAL_VOTING_POWER',\n  'KECCAK',\n  'SHA3',\n  'PAIRING_CHECK',\n  'bls12_381_g1',\n  'bls12_381_g2',\n  'bls12_381_fr',\n  'sapling_state',\n  'sapling_transaction_deprecated',\n  'SAPLING_EMPTY_STATE',\n  'SAPLING_VERIFY_UPDATE',\n  'ticket',\n  'TICKET_DEPRECATED',\n  'READ_TICKET',\n  'SPLIT_TICKET',\n  'JOIN_TICKETS',\n  'GET_AND_UPDATE',\n  'chest',\n  'chest_key',\n  'OPEN_CHEST',\n  'VIEW',\n  'view',\n  'constant',\n  'SUB_MUTEZ',\n  'tx_rollup_l2_address',\n  'MIN_BLOCK_TIME',\n  'sapling_transaction',\n  'EMIT',\n  'Lambda_rec',\n  'LAMBDA_REC',\n  'TICKET',\n  'BYTES',\n  'NAT',\n];\n\nconst primTags: { [key in PrimID]?: number } & { [key: string]: number | undefined } =\n  Object.assign({}, ...primitives.map((v, i) => ({ [v]: i })));\n\nenum Tag {\n  Int = 0,\n  String = 1,\n  Sequence = 2,\n  Prim0 = 3,\n  Prim0Annot = 4,\n  Prim1 = 5,\n  Prim1Annot = 6,\n  Prim2 = 7,\n  Prim2Annot = 8,\n  Prim = 9,\n  Bytes = 10,\n}\nclass Writer {\n  public buffer: number[] = [];\n\n  get length(): number {\n    return this.buffer.length;\n  }\n\n  writeBytes(val: number[]) {\n    this.buffer.push(...val.map((v) => v & 0xff));\n  }\n\n  writeUint8(val: number) {\n    const v = val | 0;\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint16(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint32(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 24) & 0xff);\n    this.buffer.push((v >> 16) & 0xff);\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeInt8(val: number) {\n    this.writeUint8(val);\n  }\n\n  writeInt16(val: number) {\n    this.writeUint16(val);\n  }\n\n  writeInt32(val: number) {\n    this.writeUint32(val);\n  }\n}\n\nconst boundsErr = new Error('bounds out of range');\nclass Reader {\n  constructor(\n    private buffer: number[] | Uint8Array,\n    private idx: number = 0,\n    private cap: number = buffer.length\n  ) {}\n\n  /** Remaining length */\n  get length(): number {\n    return this.cap - this.idx;\n  }\n\n  readBytes(len: number): number[] | Uint8Array {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = this.buffer.slice(this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  reader(len: number): Reader {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = new Reader(this.buffer, this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  copy(): Reader {\n    return new Reader(this.buffer, this.idx, this.cap);\n  }\n\n  readUint8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    return this.buffer[this.idx++] >>> 0;\n  }\n\n  readUint16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return ((x0 << 8) | x1) >>> 0;\n  }\n\n  readUint32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return ((x0 << 24) | (x1 << 16) | (x2 << 8) | x3) >>> 0;\n  }\n\n  readInt8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    const x = this.buffer[this.idx++];\n    return (x << 24) >> 24;\n  }\n\n  readInt16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return (((x0 << 8) | x1) << 16) >> 16;\n  }\n\n  readInt32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return (x0 << 24) | (x1 << 16) | (x2 << 8) | x3;\n  }\n}\n\nenum ContractID {\n  Implicit = 0,\n  Originated = 1,\n}\n\nenum PublicKeyHashID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\ntype AddressType =\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash';\n\nexport interface Address {\n  type: AddressType;\n  hash: number[] | Uint8Array;\n  entryPoint?: string;\n}\n\nfunction readPublicKeyHash(rd: Reader): Address {\n  let type: AddressType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyHashID.ED25519:\n      type = 'ED25519PublicKeyHash';\n      break;\n    case PublicKeyHashID.SECP256K1:\n      type = 'SECP256K1PublicKeyHash';\n      break;\n    case PublicKeyHashID.P256:\n      type = 'P256PublicKeyHash';\n      break;\n    default:\n      throw new Error(`unknown public key hash tag: ${tag}`);\n  }\n  return { type, hash: rd.readBytes(20) };\n}\n\nfunction readAddress(rd: Reader): Address {\n  let address: Address;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case ContractID.Implicit:\n      address = readPublicKeyHash(rd);\n      break;\n\n    case ContractID.Originated:\n      address = {\n        type: 'ContractHash',\n        hash: rd.readBytes(20),\n      };\n      rd.readBytes(1);\n      break;\n\n    default:\n      throw new Error(`unknown address tag: ${tag}`);\n  }\n\n  if (rd.length !== 0) {\n    // entry point\n    const dec = new TextDecoder();\n    address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n  }\n  return address;\n}\n\nfunction writePublicKeyHash(a: Address, w: Writer): void {\n  let tag: PublicKeyHashID;\n  switch (a.type) {\n    case 'ED25519PublicKeyHash':\n      tag = PublicKeyHashID.ED25519;\n      break;\n    case 'SECP256K1PublicKeyHash':\n      tag = PublicKeyHashID.SECP256K1;\n      break;\n    case 'P256PublicKeyHash':\n      tag = PublicKeyHashID.P256;\n      break;\n    default:\n      throw new Error(`unexpected address type: ${a.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(a.hash));\n}\n\nfunction writeAddress(a: Address, w: Writer): void {\n  if (a.type === 'ContractHash') {\n    w.writeUint8(ContractID.Originated);\n    w.writeBytes(Array.from(a.hash));\n    w.writeUint8(0);\n  } else {\n    w.writeUint8(ContractID.Implicit);\n    writePublicKeyHash(a, w);\n  }\n\n  if (a.entryPoint !== undefined && a.entryPoint !== '' && a.entryPoint !== 'default') {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(a.entryPoint);\n    w.writeBytes(Array.from(bytes));\n  }\n}\n\nenum PublicKeyID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\nexport type PublicKeyType = 'ED25519PublicKey' | 'SECP256K1PublicKey' | 'P256PublicKey';\nexport interface PublicKey {\n  type: PublicKeyType;\n  publicKey: number[] | Uint8Array;\n}\n\nfunction readPublicKey(rd: Reader): PublicKey {\n  let ln: number;\n  let type: PublicKeyType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyID.ED25519:\n      type = 'ED25519PublicKey';\n      ln = 32;\n      break;\n    case PublicKeyID.SECP256K1:\n      type = 'SECP256K1PublicKey';\n      ln = 33;\n      break;\n    case PublicKeyID.P256:\n      type = 'P256PublicKey';\n      ln = 33;\n      break;\n    default:\n      throw new Error(`unknown public key tag: ${tag}`);\n  }\n  return { type, publicKey: rd.readBytes(ln) };\n}\n\nfunction writePublicKey(pk: PublicKey, w: Writer): void {\n  let tag: PublicKeyID;\n  switch (pk.type) {\n    case 'ED25519PublicKey':\n      tag = PublicKeyID.ED25519;\n      break;\n    case 'SECP256K1PublicKey':\n      tag = PublicKeyID.SECP256K1;\n      break;\n    case 'P256PublicKey':\n      tag = PublicKeyID.P256;\n      break;\n    default:\n      throw new Error(`unexpected public key type: ${pk.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(pk.publicKey));\n}\n\ntype WriteTransformFunc = (e: Expr) => [Expr, IterableIterator<WriteTransformFunc>];\n\nfunction writeExpr(expr: Expr, wr: Writer, tf: WriteTransformFunc): void {\n  const [e, args] = tf(expr);\n\n  if (Array.isArray(e)) {\n    const w = new Writer();\n    for (const v of e) {\n      const a = args.next();\n      if (a.done) {\n        throw new Error('REPORT ME: iterator is done');\n      }\n      writeExpr(v, w, a.value);\n    }\n    wr.writeUint8(Tag.Sequence);\n    wr.writeUint32(w.length);\n    wr.writeBytes(w.buffer);\n    return;\n  }\n\n  if ('string' in e) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.string);\n    wr.writeUint8(Tag.String);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n    return;\n  }\n\n  if ('int' in e) {\n    wr.writeUint8(Tag.Int);\n    let val = BigInt(e.int);\n    const sign = val < 0;\n    if (sign) {\n      val = -val;\n    }\n    let i = 0;\n    do {\n      const bits = i === 0 ? BigInt(6) : BigInt(7);\n      let byte = val & ((BigInt(1) << bits) - BigInt(1));\n      val >>= bits;\n      if (val) {\n        byte |= BigInt(0x80);\n      }\n      if (i === 0 && sign) {\n        byte |= BigInt(0x40);\n      }\n      wr.writeUint8(Number(byte));\n      i++;\n    } while (val);\n    return;\n  }\n\n  if ('bytes' in e) {\n    const bytes = parseHex(e.bytes);\n    wr.writeUint8(Tag.Bytes);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(bytes);\n    return;\n  }\n\n  const prim = primTags[e.prim];\n  if (prim === undefined) {\n    throw new TypeError(`Can't encode primary: ${e.prim}`);\n  }\n\n  const tag =\n    (e.args?.length || 0) < 3\n      ? Tag.Prim0 +\n        (e.args?.length || 0) * 2 +\n        (e.annots === undefined || e.annots.length === 0 ? 0 : 1)\n      : Tag.Prim;\n\n  wr.writeUint8(tag);\n  wr.writeUint8(prim);\n\n  if (e.args !== undefined) {\n    if (e.args.length < 3) {\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, wr, a.value);\n      }\n    } else {\n      const w = new Writer();\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, w, a.value);\n      }\n      wr.writeUint32(w.length);\n      wr.writeBytes(w.buffer);\n    }\n  }\n\n  if (e.annots !== undefined && e.annots.length !== 0) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.annots.join(' '));\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n  } else if (e.args !== undefined && e.args.length >= 3) {\n    wr.writeUint32(0);\n  }\n}\n\ntype ReadTransformFuncs = [(e: Expr) => IterableIterator<ReadTransformFuncs>, (e: Expr) => Expr];\n\nfunction readExpr(rd: Reader, tf: ReadTransformFuncs): Expr {\n  function* passThrough() {\n    while (true) {\n      yield readPassThrough;\n    }\n  }\n  const [args, tr] = tf;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case Tag.Int: {\n      const buf: number[] = [];\n      let byte: number;\n      do {\n        byte = rd.readInt8();\n        buf.push(byte);\n      } while ((byte & 0x80) !== 0);\n      let val = BigInt(0);\n      let sign = false;\n      for (let i = buf.length - 1; i >= 0; i--) {\n        const bits = i === 0 ? BigInt(6) : BigInt(7);\n        const byte = BigInt(buf[i]);\n        val <<= bits;\n        val |= byte & ((BigInt(1) << bits) - BigInt(1));\n        if (i === 0) {\n          sign = !!(byte & BigInt(0x40));\n        }\n      }\n      if (sign) {\n        val = -val;\n      }\n      return tr({ int: String(val) });\n    }\n\n    case Tag.String: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const dec = new TextDecoder();\n      return tr({ string: dec.decode(new Uint8Array(bytes)) });\n    }\n\n    case Tag.Bytes: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const hex = hexBytes(Array.from(bytes));\n      return tr({ bytes: hex });\n    }\n\n    case Tag.Sequence: {\n      const length = rd.readUint32();\n      let res: Expr[] = [];\n      let savedrd = rd.copy();\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      for (let n = 0; n < 2; n++) {\n        const r = savedrd.reader(length);\n        res = [];\n        while (r.length > 0) {\n          const a = it.next();\n          if (a.done) {\n            throw new Error('REPORT ME: iterator is done');\n          }\n          res.push(readExpr(r, a.value));\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n      return tr(res);\n    }\n\n    default: {\n      if (tag > 9) {\n        throw new Error(`Unknown tag: ${tag}`);\n      }\n      const p = rd.readUint8();\n      if (p >= primitives.length) {\n        throw new Error(`Unknown primitive tag: ${p}`);\n      }\n      const prim = primitives[p];\n      const argn = (tag - 3) >> 1;\n      let res: Prim = { prim };\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      let savedrd = rd.copy();\n      for (let n = 0; n < 2; n++) {\n        res = { prim };\n        if (argn < 3) {\n          for (let i = 0; i < argn; i++) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args = res.args || [];\n            res.args.push(readExpr(savedrd, a.value));\n          }\n        } else {\n          res.args = res.args || [];\n          const length = savedrd.readUint32();\n          const r = savedrd.reader(length);\n          while (r.length > 0) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args.push(readExpr(r, a.value));\n          }\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n\n      if (((tag - 3) & 1) === 1 || argn === 3) {\n        // read annotations\n        const length = rd.readUint32();\n        if (length !== 0) {\n          const bytes = rd.readBytes(length);\n          const dec = new TextDecoder();\n          res.annots = dec.decode(new Uint8Array(bytes)).split(' ');\n        }\n      }\n      return tr(res);\n    }\n  }\n}\n\nconst isOrData = (e: Expr): e is MichelsonDataOr =>\n  'prim' in e && (e.prim === 'Left' || e.prim === 'Right');\nconst isOptionData = (e: Expr): e is MichelsonDataOption =>\n  'prim' in e && (e.prim === 'Some' || e.prim === 'None');\n\nconst getWriteTransformFunc = (t: MichelsonType): WriteTransformFunc => {\n  if (isPairType(t)) {\n    return (d: Expr) => {\n      if (!isPairData(d)) {\n        throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n      }\n      assertDataListIfAny(d);\n      // combs aren't used in pack format\n      const tc = unpackComb('pair', t);\n      const dc = unpackComb('Pair', d);\n      return [\n        dc,\n        (function* () {\n          for (const a of tc.args) {\n            yield getWriteTransformFunc(a);\n          }\n        })(),\n      ];\n    };\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return (d: Expr) => {\n        if (!isOrData(d)) {\n          throw new MichelsonTypeError(t, `or expected: ${JSON.stringify(d)}`, d);\n        }\n        return [\n          d,\n          (function* () {\n            yield getWriteTransformFunc(t.args[d.prim === 'Left' ? 0 : 1]);\n          })(),\n        ];\n      };\n\n    case 'option':\n      return (d: Expr) => {\n        if (!isOptionData(d)) {\n          throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n        }\n        return [\n          d,\n          (function* () {\n            const dd = d;\n            // TODO: refactor and remove ts-ignore\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (dd.prim === 'Some') {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'list':\n    case 'set':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n        }\n        return [\n          d,\n          (function* () {\n            for (const _v of d) {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'map':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, `map expected: ${JSON.stringify(d)}`, d);\n        }\n        return [\n          d,\n          (function* (): Generator<WriteTransformFunc> {\n            for (const _elt of d) {\n              yield (elt: Expr) => {\n                if (!('prim' in elt) || elt.prim !== 'Elt') {\n                  throw new MichelsonTypeError(\n                    t,\n                    `map element expected: ${JSON.stringify(elt)}`,\n                    elt\n                  );\n                }\n                return [\n                  elt,\n                  (function* () {\n                    for (const a of t.args) {\n                      yield getWriteTransformFunc(a);\n                    }\n                  })(),\n                ];\n              };\n            }\n          })(),\n        ];\n      };\n\n    case 'chain_id':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const id = checkDecodeTezosID(d.string, 'ChainID');\n          if (id === null) {\n            throw new MichelsonTypeError(t, `chain id base58 expected: ${d.string}`, d);\n          }\n          bytes = { bytes: hexBytes(id[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'signature':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const sig = checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          );\n          if (sig === null) {\n            throw new MichelsonTypeError(t, `signature base58 expected: ${d.string}`, d);\n          }\n          bytes = { bytes: hexBytes(sig[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key_hash':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const pkh = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash'\n          );\n          if (pkh === null) {\n            throw new MichelsonTypeError(t, `key hash base58 expected: ${d.string}`, d);\n          }\n          const w = new Writer();\n          writePublicKeyHash({ type: pkh[0], hash: pkh[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const key = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKey',\n            'SECP256K1PublicKey',\n            'P256PublicKey'\n          );\n          if (key === null) {\n            throw new MichelsonTypeError(t, `public key base58 expected: ${d.string}`, d);\n          }\n          const w = new Writer();\n          writePublicKey({ type: key[0], publicKey: key[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'address':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const s = d.string.split('%');\n          const address = checkDecodeTezosID(\n            s[0],\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash'\n          );\n          if (address === null) {\n            throw new MichelsonTypeError(t, `address base58 expected: ${d.string}`, d);\n          }\n          const w = new Writer();\n          writeAddress(\n            { type: address[0], hash: address[1], entryPoint: s.length > 1 ? s[1] : undefined },\n            w\n          );\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'timestamp':\n      return (d: Expr) => {\n        if (!('string' in d) && !('int' in d)) {\n          throw new MichelsonTypeError(t, `timestamp expected: ${JSON.stringify(d)}`, d);\n        }\n        let int: IntLiteral;\n        if ('string' in d) {\n          const p = parseDate(d);\n          if (p === null) {\n            throw new MichelsonTypeError(t, `can't parse date: ${d.string}`, d);\n          }\n          int = { int: String(Math.floor(p.getTime() / 1000)) };\n        } else {\n          int = d;\n        }\n        return [int, [][Symbol.iterator]()];\n      };\n\n    default:\n      return writePassThrough;\n  }\n};\n\ntype PushInstruction = MichelsonInstruction & Prim<'PUSH'>;\nconst isPushInstruction = (e: Expr): e is PushInstruction => 'prim' in e && e.prim === 'PUSH';\n\nconst writePassThrough: WriteTransformFunc = (e: Expr) => {\n  if (isPushInstruction(e)) {\n    assertMichelsonInstruction(e);\n    // capture inlined type definition\n    return [\n      e,\n      (function* () {\n        yield writePassThrough;\n        yield getWriteTransformFunc(e.args[0]);\n      })(),\n    ];\n  }\n\n  return [\n    e,\n    (function* () {\n      while (true) {\n        yield writePassThrough;\n      }\n    })(),\n  ];\n};\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\n * corresponding optimized binary forms borrowed from the Tezos protocol\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"address\"\n * };\n *\n * const packed = packData(data, typ);\n *\n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\n * ```\n *\n * Without a type definition the base58 encoded address will be treated as a string\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const packed = packData(data);\n *\n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as numeric array\n */\nexport function packData(d: MichelsonData, t?: MichelsonType): number[] {\n  const w = new Writer();\n  w.writeUint8(5);\n  writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n  return w.buffer;\n}\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"2019-09-26T10:59:51Z\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const packed = packDataBytes(data, typ);\n *\n * // { bytes: \"0500a7e8e4d80b\" }\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as a bytes literal\n */\nexport function packDataBytes(d: MichelsonData, t?: MichelsonType): BytesLiteral {\n  return { bytes: hexBytes(packData(d, t)) };\n}\n\nconst getReadTransformFuncs = (t: MichelsonType): ReadTransformFuncs => {\n  if (isPairType(t)) {\n    return [\n      (d: Expr) => {\n        if (!isPairData(d)) {\n          throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n        }\n        const tc = unpackComb('pair', t);\n        return (function* () {\n          for (const a of tc.args) {\n            yield getReadTransformFuncs(a);\n          }\n        })();\n      },\n      (d: Expr) => d,\n    ];\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return [\n        (d: Expr) => {\n          if (!isOrData(d)) {\n            throw new MichelsonTypeError(t, `or expected: ${JSON.stringify(d)}`, d);\n          }\n          return (function* () {\n            yield getReadTransformFuncs(t.args[d.prim === 'Left' ? 0 : 1]);\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'option':\n      return [\n        (d: Expr) => {\n          if (!isOptionData(d)) {\n            throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n          }\n          return (function* () {\n            // TODO: refactor and remove ts-ignore\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (d.prim === 'Some') {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'list':\n    case 'set':\n      return [\n        (d: Expr) => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n          }\n          return (function* () {\n            while (true) {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'map':\n      return [\n        (d: Expr): IterableIterator<ReadTransformFuncs> => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, `map expected: ${JSON.stringify(d)}`, d);\n          }\n          return (function* (): Generator<ReadTransformFuncs> {\n            while (true) {\n              yield [\n                (elt: Expr) => {\n                  if (!('prim' in elt) || elt.prim !== 'Elt') {\n                    throw new MichelsonTypeError(\n                      t,\n                      `map element expected: ${JSON.stringify(elt)}`,\n                      elt\n                    );\n                  }\n                  return (function* () {\n                    for (const a of t.args) {\n                      yield getReadTransformFuncs(a);\n                    }\n                  })();\n                },\n                (elt: Expr) => elt,\n              ];\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'chain_id':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n          }\n          return { string: encodeTezosID('ChainID', bytes) };\n        },\n      ];\n\n    case 'signature':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n          }\n          return { string: encodeTezosID('GenericSignature', bytes) };\n        },\n      ];\n\n    case 'key_hash':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readPublicKeyHash(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'key':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const pk = readPublicKey(rd);\n          return { string: encodeTezosID(pk.type, pk.publicKey) };\n        },\n      ];\n\n    case 'address':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readAddress(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'timestamp':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('int' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const date = new Date(parseInt(d.int, 10) * 1000);\n          return { string: date.toISOString().slice(0, 19) + 'Z' };\n        },\n      ];\n\n    default:\n      return readPassThrough;\n  }\n};\n\nconst readPassThrough: ReadTransformFuncs = [\n  (e: Expr) => {\n    if (isPushInstruction(e)) {\n      assertMichelsonInstruction(e);\n      // capture inlined type definition\n      return (function* () {\n        yield readPassThrough;\n        yield getReadTransformFuncs(e.args[0]);\n      })();\n    }\n\n    return (function* () {\n      while (true) {\n        yield readPassThrough;\n      }\n    })();\n  },\n  (e: Expr) => e,\n];\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed\n * back to their string representations like base58 and ISO timestamps.\n *\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackData(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n *\n * Same binary data without a type definition\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const data = unpackData(src);\n *\n * // { int: \"1569495591\" }\n * ```\n * @param src Byte array\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackData(src: number[] | Uint8Array, t?: MichelsonType): MichelsonData {\n  const r = new Reader(src);\n  if (r.readUint8() !== 5) {\n    throw new Error('incorrect packed data magic number');\n  }\n  const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n  if (assertMichelsonData(ex)) {\n    return ex;\n  }\n  throw new Error(); // never\n}\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const src = { bytes: \"0500a7e8e4d80b\" };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackDataBytes(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * @param src Bytes object\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackDataBytes(src: BytesLiteral, t?: MichelsonType): MichelsonData {\n  const bytes = parseBytes(src.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n  }\n  return unpackData(bytes, t);\n}\n\n// helper functions also used by validator\n\nexport function decodeAddressBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readAddress(rd);\n}\n\nexport function decodePublicKeyHashBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKeyHash(rd);\n}\n\nexport function decodePublicKeyBytes(b: BytesLiteral): PublicKey {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKey(rd);\n}\n", "import { Prim, Expr } from './micheline';\nimport {\n  MichelsonType,\n  MichelsonData,\n  MichelsonCode,\n  MichelsonTypeOption,\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonReturnType,\n  MichelsonTypePair,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonTypeOr,\n  DefaultProtocol,\n  Protocol,\n  refContract,\n  MichelsonTypeAddress,\n  MichelsonContractView,\n  ProtoInferiorTo,\n} from './michelson-types';\nimport {\n  unpackAnnotations,\n  MichelsonError,\n  isNatural,\n  LongInteger,\n  parseBytes,\n  compareBytes,\n  isDecimal,\n  checkDecodeTezosID,\n  UnpackedAnnotations,\n  Nullable,\n  UnpackAnnotationsOptions,\n  unpackComb,\n  MichelsonTypeError,\n  isPairType,\n  isPairData,\n  parseDate,\n} from './utils';\nimport { decodeBase58Check } from './base58';\nimport { decodeAddressBytes, decodePublicKeyBytes, decodePublicKeyHashBytes } from './binary';\nimport {\n  assertMichelsonComparableType,\n  assertMichelsonPackableType,\n  assertMichelsonStorableType,\n  assertMichelsonBigMapStorableType,\n  assertMichelsonPushableType,\n  isInstruction,\n  assertDataListIfAny,\n} from './michelson-validator';\nimport { ParserOptions } from './micheline-parser';\n\nexport interface Context extends ParserOptions {\n  contract?: MichelsonContract;\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class MichelsonInstructionError extends MichelsonError<MichelsonCode> {\n  /**\n   * @param val Value of a type node caused the error\n   * @param stackState Current stack state\n   * @param message An error message\n   */\n  constructor(\n    public readonly val: MichelsonCode,\n    public readonly stackState: MichelsonReturnType,\n    public readonly message: string\n  ) {\n    super(val, message);\n    this.name = 'MichelsonInstructionError';\n  }\n}\n\n// 'sequence as a pair' edo syntax helpers\nfunction typeID(t: MichelsonType): MichelsonTypeID {\n  return Array.isArray(t) ? 'pair' : t.prim;\n}\n\ntype TypeArgs<T extends MichelsonType> = T extends Prim ? T['args'] : T;\nfunction typeArgs<T extends MichelsonType>(t: T): TypeArgs<T> {\n  return ('prim' in t ? (t as Extract<MichelsonType, Prim>).args : t) as TypeArgs<T>;\n}\n\nfunction assertScalarTypesEqual(a: MichelsonType, b: MichelsonType, field = false): void {\n  if (typeID(a) !== typeID(b)) {\n    throw new MichelsonTypeError(a, `types mismatch: ${typeID(a)} != ${typeID(b)}`, undefined);\n  }\n\n  const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n  if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n    throw new MichelsonTypeError(\n      a,\n      `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`,\n      undefined\n    );\n  }\n  if (field && ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0]) {\n    throw new MichelsonTypeError(\n      a,\n      `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`,\n      undefined\n    );\n  }\n\n  if (isPairType(a)) {\n    const aArgs = unpackComb('pair', a);\n    const bArgs = unpackComb('pair', b as typeof a);\n    assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n    assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n    return;\n  }\n\n  switch (a.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n    case 'ticket':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      break;\n\n    case 'or':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0], true);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1], true);\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1]);\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (parseInt(a.args[0].int, 10) !== parseInt((b as typeof a).args[0].int, 10)) {\n        throw new MichelsonTypeError(\n          a,\n          `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${\n            (b as typeof a).args[0].int\n          }`,\n          undefined\n        );\n      }\n  }\n}\n\nfunction assertStacksEqual<T1 extends MichelsonType[], T2 extends T1>(a: T1, b: T2): void {\n  if (a.length !== b.length) {\n    throw new MichelsonTypeError(a, `stack length mismatch: ${a.length} != ${b.length}`, undefined);\n  }\n  for (let i = 0; i < a.length; i++) {\n    assertScalarTypesEqual(a[i], b[i]);\n  }\n}\n\nexport function assertTypeAnnotationsValid(t: MichelsonType, field = false): void {\n  if (!Array.isArray(t)) {\n    const ann = unpackAnnotations(t);\n    if ((ann.t?.length || 0) > 1) {\n      throw new MichelsonTypeError(\n        t,\n        `${t.prim}: at most one type annotation allowed: ${t.annots}`,\n        undefined\n      );\n    }\n\n    if (field) {\n      if ((ann.f?.length || 0) > 1) {\n        throw new MichelsonTypeError(\n          t,\n          `${t.prim}: at most one field annotation allowed: ${t.annots}`,\n          undefined\n        );\n      }\n    } else {\n      if ((ann.f?.length || 0) > 0) {\n        throw new MichelsonTypeError(\n          t,\n          `${t.prim}: field annotations aren't allowed: ${t.annots}`,\n          undefined\n        );\n      }\n    }\n  }\n\n  if (isPairType(t)) {\n    const args = typeArgs(t);\n    for (const a of args) {\n      assertTypeAnnotationsValid(a, true);\n    }\n    return;\n  }\n\n  switch (t.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n      assertTypeAnnotationsValid(t.args[0]);\n      break;\n\n    case 'or':\n      for (const a of t.args) {\n        assertTypeAnnotationsValid(a, true);\n      }\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertTypeAnnotationsValid(t.args[0]);\n      assertTypeAnnotationsValid(t.args[1]);\n  }\n}\n\n// Data integrity check\n\nfunction _compareMichelsonData(t: MichelsonType, a: MichelsonData, b: MichelsonData): number {\n  if (isPairType(t)) {\n    if (isPairData(a) && isPairData(b)) {\n      assertDataListIfAny(a);\n      assertDataListIfAny(b);\n      const tComb = unpackComb('pair', t);\n      const aComb = unpackComb('Pair', a);\n      const bComb = unpackComb('Pair', b);\n      const x = _compareMichelsonData(tComb.args[0], aComb.args[0], bComb.args[0]);\n      if (x !== 0) {\n        return x;\n      }\n      return _compareMichelsonData(tComb.args[0], aComb.args[1], bComb.args[1]);\n    }\n  } else {\n    switch (t.prim) {\n      case 'int':\n      case 'nat':\n      case 'mutez':\n        if ('int' in a && 'int' in b) {\n          return new LongInteger(a.int).cmp(new LongInteger(b.int));\n        }\n        break;\n\n      case 'string':\n        if ('string' in a && 'string' in b) {\n          const x = a.string.localeCompare(b.string);\n          return x < 0 ? -1 : x > 0 ? 1 : 0;\n        }\n        break;\n\n      case 'bytes':\n        if ('bytes' in a && 'bytes' in b) {\n          const aa = parseBytes(a.bytes);\n          const bb = parseBytes(b.bytes);\n          if (aa !== null && bb !== null) {\n            return compareBytes(aa, bb);\n          }\n        }\n        break;\n\n      case 'bool':\n        if (\n          'prim' in a &&\n          'prim' in b &&\n          (a.prim === 'True' || a.prim === 'False') &&\n          (b.prim === 'True' || b.prim === 'False')\n        ) {\n          return a.prim === b.prim ? 0 : a.prim === 'False' ? -1 : 1;\n        }\n        break;\n\n      case 'key':\n      case 'key_hash':\n      case 'address':\n      case 'signature':\n      case 'chain_id':\n        if (('string' in a || 'bytes' in a) && ('string' in b || 'bytes' in b)) {\n          return compareBytes(\n            'string' in a ? decodeBase58Check(a.string) : parseBytes(a.bytes) || [],\n            'string' in b ? decodeBase58Check(b.string) : parseBytes(b.bytes) || []\n          );\n        }\n        break;\n\n      case 'timestamp':\n        if (('string' in a || 'int' in a) && ('string' in b || 'int' in b)) {\n          const aa = parseDate(a);\n          const bb = parseDate(b);\n          if (aa !== null && bb !== null) {\n            const x = aa.valueOf() - bb.valueOf();\n            return x < 0 ? -1 : x > 0 ? 1 : 0;\n          }\n        }\n        break;\n\n      case 'unit':\n        if ('prim' in a && 'prim' in b && a.prim === 'Unit' && b.prim === 'Unit') {\n          return 0;\n        }\n    }\n  }\n\n  // Unlikely, types are expected to be verified before the function call\n  throw new MichelsonTypeError(\n    t,\n    `${typeID(t)}: not comparable values: ${JSON.stringify(a)}, ${JSON.stringify(b)}`,\n    undefined\n  );\n}\n\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d: MichelsonData): d is InstructionList {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if (!((Array.isArray(v) && isFunction(v)) || ('prim' in v && isInstruction(v)))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction assertDataValidInternal(d: MichelsonData, t: MichelsonType, ctx: Context | null): void {\n  if (isPairType(t)) {\n    if (isPairData(d)) {\n      assertDataListIfAny(d);\n      const dc = unpackComb('Pair', d);\n      const tc = unpackComb('pair', t);\n      assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n      assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n      return;\n    }\n    throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n  }\n\n  switch (t.prim) {\n    // Atomic literals\n    case 'int':\n      if ('int' in d && isDecimal(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `integer value expected: ${JSON.stringify(d)}`, d);\n\n    case 'nat':\n    case 'mutez':\n      if ('int' in d && isNatural(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `natural value expected: ${JSON.stringify(d)}`, d);\n\n    case 'string':\n      if ('string' in d) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `string value expected: ${JSON.stringify(d)}`, d);\n\n    case 'bytes':\n    case 'bls12_381_g1':\n    case 'bls12_381_g2':\n      if ('bytes' in d && parseBytes(d.bytes) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `bytes value expected: ${JSON.stringify(d)}`, d);\n\n    case 'bool':\n      if ('prim' in d && (d.prim === 'True' || d.prim === 'False')) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `boolean value expected: ${JSON.stringify(d)}`, d);\n\n    case 'key_hash':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(\n          d.string,\n          'ED25519PublicKeyHash',\n          'SECP256K1PublicKeyHash',\n          'P256PublicKeyHash'\n        ) !== null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyHashBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n\n    case 'timestamp':\n      if (('string' in d || 'int' in d) && parseDate(d) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `timestamp expected: ${JSON.stringify(d)}`, d);\n\n    case 'address':\n      if ('string' in d) {\n        let address = d.string;\n        const ep = d.string.indexOf('%');\n        if (ep >= 0) {\n          // trim entry point\n          address = d.string.slice(0, ep);\n        }\n        if (\n          checkDecodeTezosID(\n            address,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash',\n            'TxRollupL2Address',\n            'RollupAddress'\n          ) !== null\n        ) {\n          return;\n        }\n      } else if ('bytes' in d) {\n        try {\n          decodeAddressBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n\n    case 'key':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey') !==\n          null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n\n    case 'unit':\n      if ('prim' in d && d.prim === 'Unit') {\n        return;\n      }\n      throw new MichelsonTypeError(t, `unit value expected: ${JSON.stringify(d)}`, d);\n\n    case 'signature':\n      if (\n        'bytes' in d ||\n        ('string' in d &&\n          checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          ) !== null)\n      ) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n\n    case 'chain_id':\n      if ('bytes' in d || 'string' in d) {\n        const x = 'string' in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n        if (x !== null) {\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n\n    // Complex types\n    case 'option':\n      if ('prim' in d) {\n        if (d.prim === 'None') {\n          return;\n        } else if (d.prim === 'Some') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n\n    case 'list':\n    case 'set':\n      if (assertDataListIfAny(d)) {\n        //let prev: MichelsonData | undefined;\n        for (const v of d) {\n          assertDataValidInternal(v, t.args[0], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n\n    case 'or':\n      if ('prim' in d) {\n        if (d.prim === 'Left') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        } else if (d.prim === 'Right') {\n          assertDataValidInternal(d.args[0], t.args[1], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, `union (or) expected: ${JSON.stringify(d)}`, d);\n    case 'lambda':\n      if (isFunction(d)) {\n        const ret = functionTypeInternal(d, [t.args[0]], ctx);\n        if ('failed' in ret) {\n          throw new MichelsonTypeError(t, `function is failed with error type: ${ret.failed}`, d);\n        }\n        if (ret.length !== 1) {\n          throw new MichelsonTypeError(t, 'function must return a value', d);\n        }\n        assertScalarTypesEqual(t.args[1], ret[0]);\n        return;\n      }\n      throw new MichelsonTypeError(t, `function expected: ${JSON.stringify(d)}`, d);\n\n    case 'map':\n    case 'big_map':\n      if (Array.isArray(d)) {\n        //let prev: MichelsonMapElt | undefined;\n        for (const v of d) {\n          if (!('prim' in v) || v.prim !== 'Elt') {\n            throw new MichelsonTypeError(t, `map elements expected: ${JSON.stringify(d)}`, d);\n          }\n          assertDataValidInternal(v.args[0], t.args[0], ctx);\n          assertDataValidInternal(v.args[1], t.args[1], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n\n    case 'bls12_381_fr':\n      if (('int' in d && isDecimal(d.int)) || ('bytes' in d && parseBytes(d.bytes) !== null)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `BLS12-381 element expected: ${JSON.stringify(d)}`, d);\n\n    case 'sapling_state':\n      if (Array.isArray(d)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, `sapling state expected: ${JSON.stringify(d)}`, d);\n\n    case 'ticket':\n      assertDataValidInternal(\n        d,\n        {\n          prim: 'pair',\n          args: [{ prim: 'address' }, t.args[0], { prim: 'nat' }],\n        },\n        ctx\n      );\n      return;\n\n    default:\n      throw new MichelsonTypeError(\n        t,\n        `type ${typeID(t)} don't have Michelson literal representation`,\n        d\n      );\n  }\n}\n\n// Code validation\n\ntype StackType<T extends (MichelsonTypeID[] | null)[]> = {\n  [N in keyof T]: T[N] extends MichelsonTypeID[] ? MichelsonType<T[N][number]> : MichelsonType;\n};\n\nexport interface InstructionTrace {\n  op: MichelsonCode;\n  in: MichelsonType[];\n  out: MichelsonReturnType;\n}\n\nfunction instructionListType(\n  inst: InstructionList,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  let ret: MichelsonReturnType = stack;\n  let s = stack;\n  let i = 0;\n  for (const op of inst) {\n    const ft = functionTypeInternal(op, s, ctx);\n    ret = ft;\n    if ('failed' in ft) {\n      break;\n    }\n    s = ft;\n    i++;\n  }\n\n  if (\n    'failed' in ret &&\n    ret.level == 0 &&\n    (!('prim' in ret.failed) || ret.failed.prim !== 'never') &&\n    i !== inst.length - 1\n  ) {\n    throw new MichelsonInstructionError(inst, ret, 'FAIL must appear in a tail position');\n  }\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: inst,\n      in: stack,\n      out: ret,\n    };\n    ctx.traceCallback(trace);\n  }\n  return 'failed' in ret ? { failed: ret.failed, level: ret.level + 1 } : ret;\n}\n\nfunction functionTypeInternal(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  const proto = ctx?.protocol || DefaultProtocol;\n\n  if (Array.isArray(inst)) {\n    return instructionListType(inst, stack, ctx);\n  }\n  const instruction = inst; // Make it const for type guarding\n\n  // make sure the stack has enough number of arguments of specific types\n  function args<T extends (MichelsonTypeID[] | null)[]>(n: number, ...typeIds: T): StackType<T> {\n    if (stack.length < typeIds.length + n) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`\n      );\n    }\n\n    let i = n;\n    for (const ids of typeIds) {\n      if (ids !== null && ids.length !== 0) {\n        let ii = 0;\n        while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n          ii++;\n        }\n        if (ii === ids.length) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(\n              stack[i]\n            )} instead`\n          );\n        }\n      }\n      i++;\n    }\n    return stack.slice(n, typeIds.length + n) as StackType<T>;\n  }\n\n  function rethrow<T extends unknown[], U>(fn: (...args: T) => U) {\n    return (...args: T): U => {\n      try {\n        return fn(...args);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  function rethrowTypeGuard<T extends Expr, U extends MichelsonType & T>(fn: (arg: T) => arg is U) {\n    return (arg: T): arg is U => {\n      try {\n        return fn(arg);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  const argAnn = rethrow(unpackAnnotations);\n  const ensureStacksEqual = rethrow(assertStacksEqual);\n  const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n  const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n  const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n  const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n  const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n  const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType);\n\n  // unpack instruction annotations and assert their maximum number\n  function instructionAnn(\n    num: { f?: number; t?: number; v?: number },\n    opt?: UnpackAnnotationsOptions\n  ) {\n    const a = argAnn(instruction, {\n      ...opt,\n      emptyFields: num.f !== undefined && num.f > 1,\n      emptyVar: num.v !== undefined && num.v > 1,\n    });\n    const assertNum = (a: string[] | undefined, n: number | undefined, type: string) => {\n      if (a && a.length > (n || 0)) {\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`\n        );\n      }\n    };\n    assertNum(a.f, num.f, 'field');\n    assertNum(a.t, num.t, 'type');\n    assertNum(a.v, num.v, 'variable');\n    return a;\n  }\n\n  // also keeps annotation class if null is provided\n  function annotate<T extends MichelsonType>(tt: T, a: Nullable<UnpackedAnnotations>): T {\n    const tx: MichelsonType = tt;\n    const t: Extract<MichelsonType, Prim> = Array.isArray(tx) ? { prim: 'pair', args: tx } : tx;\n    const src = argAnn(t);\n    const ann =\n      a.v !== undefined || a.t !== undefined || a.f !== undefined\n        ? [\n            ...((a.v === null ? src.v : a.v) || []),\n            ...((a.t === null ? src.t : a.t) || []),\n            ...((a.f === null ? src.f : a.f) || []),\n          ]\n        : undefined;\n\n    const { annots: _annots, ...rest } = t;\n    return { ...(rest as T), ...(ann && ann.length !== 0 && { annots: ann }) };\n  }\n\n  // shortcut to copy at most one variable annotation from the instruction to the type\n  function annotateVar<T extends MichelsonType>(t: T, def?: string) {\n    const ia = instructionAnn({ v: 1 });\n    return annotate(t, {\n      v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null,\n      t: null,\n    });\n  }\n\n  // annotate CAR/CDR/UNPAIR/GET\n  function annotateField(\n    arg: MichelsonTypePair<MichelsonType[]>,\n    field: MichelsonType,\n    insAnn: UnpackedAnnotations,\n    n: number,\n    defField: string\n  ): MichelsonType {\n    const fieldAnn = argAnn(field).f?.[0]; // field's field annotation\n    const insFieldAnn = insAnn.f?.[n];\n    if (\n      insFieldAnn !== undefined &&\n      insFieldAnn !== '%' &&\n      fieldAnn !== undefined &&\n      insFieldAnn !== fieldAnn\n    ) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`\n      );\n    }\n    const insVarAnn = insAnn.v?.[n]; // nth instruction's variable annotation\n    const varAnn = argAnn(arg).v?.[0]; // instruction argument's variable annotation\n    return annotate(field, {\n      t: null,\n      v: insVarAnn\n        ? insVarAnn === '@%'\n          ? fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : insVarAnn === '@%%'\n          ? varAnn\n            ? ['@' + varAnn.slice(1) + '.' + (fieldAnn ? fieldAnn.slice(1) : defField)]\n            : fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : [insVarAnn]\n        : null,\n    });\n  }\n\n  // comb helper functions\n  function getN(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType[] {\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return [p.args[0]];\n    } else if (i === 2) {\n      return p.args;\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return [p.args[0], ...getN(right, n, i - 1)];\n    } else {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: at least ${n} fields are expected`\n      );\n    }\n  }\n\n  function getNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return src;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return p.args[0];\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return getNth(right, n, i - 2);\n    } else if (i === 2) {\n      return right;\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  function updateNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    x: MichelsonType,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return x;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return {\n        ...p,\n        args: [x, p.args[1]],\n      };\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return {\n        ...p,\n        args: [p.args[0], updateNth(right, x, n, i - 2)],\n      };\n    } else if (i === 2) {\n      return {\n        ...p,\n        args: [p.args[0], x],\n      };\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  const varSuffix = (a: UnpackedAnnotations, suffix: string) => [\n    '@' + (a.v ? a.v[0].slice(1) + '.' : '') + suffix,\n  ];\n\n  function branchType(br0: MichelsonReturnType, br1: MichelsonReturnType): MichelsonReturnType {\n    if ('failed' in br0 || 'failed' in br1) {\n      return 'failed' in br0 ? br1 : br0;\n    } else {\n      ensureStacksEqual(br0, br1);\n      return br0;\n    }\n  }\n\n  const retStack = ((instruction: MichelsonInstruction): MichelsonReturnType => {\n    switch (instruction.prim) {\n      case 'DUP': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n        if (n === 0) {\n          throw new MichelsonInstructionError(instruction, stack, 'DUP 0 is forbidden');\n        }\n        const s = args(n - 1, null)[0];\n        if (typeID(s) === 'ticket') {\n          throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n        }\n        return [s, ...stack];\n      }\n\n      case 'SWAP': {\n        const s = args(0, null, null);\n        instructionAnn({});\n        return [s[1], s[0], ...stack.slice(2)];\n      }\n\n      case 'SOME':\n        return [\n          annotate({ prim: 'option', args: [args(0, null)[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack.slice(1),\n        ];\n\n      case 'UNIT':\n        return [annotate({ prim: 'unit' }, instructionAnn({ v: 1, t: 1 })), ...stack];\n\n      case 'PAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n        }\n        const s = args(0, ...new Array<null>(n).fill(null));\n        const ia = instructionAnn({ f: n, t: 1, v: 1 }, { specialFields: true });\n        const trim = (s: string) => {\n          const i = s.lastIndexOf('.');\n          return s.slice(i > 0 ? i + 1 : 1);\n        };\n        const retArgs = s.map((v, i) => {\n          const va = argAnn(v);\n          const f =\n            ia.f && ia.f.length > i && ia.f[i] !== '%'\n              ? ia.f[i] === '%@'\n                ? va.v\n                  ? ['%' + trim(va.v?.[0] || '')]\n                  : undefined\n                : [ia.f[i]]\n              : undefined;\n          return annotate(v, { v: null, t: null, f });\n        });\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: retArgs,\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(n),\n        ];\n      }\n\n      case 'UNPAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n        }\n        const s = args(0, ['pair'])[0];\n        const ia = instructionAnn({ f: 2, v: 2 }, { specialVar: true });\n        const fields = getN(s, n);\n        return [\n          ...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? 'car' : 'cdr')),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAR':\n      case 'CDR': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        const field = s.args[instruction.prim === 'CAR' ? 0 : 1];\n        const ia = instructionAnn({ f: 1, v: 1 }, { specialVar: true });\n        return [\n          annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CONS': {\n        const s = args(0, null, ['list']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'list', args: [s[1].args[0]] }), ...stack.slice(2)];\n      }\n\n      case 'SIZE':\n        args(0, ['string', 'list', 'set', 'map', 'bytes']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'MEM': {\n        const s = args(0, null, ['set', 'map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(2)];\n      }\n\n      case 'GET':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, ['pair'])[0];\n          return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n        } else {\n          // map operation\n          const s = args(0, null, ['map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({ prim: 'option', args: [s[1].args[1]] }), ...stack.slice(2)];\n        }\n\n      case 'UPDATE':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, null, ['pair']);\n          return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n        } else {\n          // map operation\n          const s0 = args(0, null, ['bool', 'option']);\n          ensureComparableType(s0[0]);\n          if (s0[1].prim === 'bool') {\n            const s1 = args(2, ['set']);\n            ensureTypesEqual(s0[0], s1[0].args[0]);\n            return [\n              annotateVar({\n                prim: 'set',\n                args: [annotate(s0[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n\n          const s1 = args(2, ['map', 'big_map']);\n          ensureTypesEqual(s0[0], s1[0].args[0]);\n          if (s1[0].prim === 'map') {\n            return [\n              annotateVar({\n                prim: 'map',\n                args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n          ensureBigMapStorableType(s0[1].args[0]);\n          return [\n            annotateVar({\n              prim: 'big_map',\n              args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n            }),\n            ...stack.slice(3),\n          ];\n        }\n\n      case 'GET_AND_UPDATE': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, null, ['option'], ['map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        ensureTypesEqual(s[1].args[0], s[2].args[1]);\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        if (s[2].prim === 'map') {\n          return [\n            annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n            annotate(\n              {\n                prim: 'map',\n                args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n              },\n              { v: va?.[1] }\n            ),\n            ...stack.slice(3),\n          ];\n        }\n        ensureBigMapStorableType(s[1].args[0]);\n        return [\n          annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'big_map',\n              args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'EXEC': {\n        const s = args(0, null, ['lambda']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n      }\n\n      case 'APPLY': {\n        const s = args(0, null, ['lambda']);\n        ensureStorableType(s[0]);\n        ensurePushableType(s[0]);\n        if (!isPairType(s[1].args[0])) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`\n          );\n        }\n        const pt = s[1].args[0];\n        ensureTypesEqual(s[0], typeArgs(pt)[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [typeArgs(pt)[1], s[1].args[1]] }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'FAILWITH': {\n        const s = args(0, null)[0];\n        if (!ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n          ensurePackableType(s);\n        }\n        return { failed: s, level: 0 };\n      }\n\n      case 'NEVER':\n        args(0, ['never']);\n        return { failed: { prim: 'never' }, level: 0 };\n\n      case 'RENAME':\n        return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n\n      case 'CONCAT': {\n        const s0 = args(0, ['string', 'list', 'bytes']);\n        if (s0[0].prim === 'list') {\n          if (typeID(s0[0].args[0]) !== 'string' && typeID(s0[0].args[0]) !== 'bytes') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`\n            );\n          }\n          return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n        }\n        const s1 = args(1, ['string', 'bytes']);\n        if (s0[0].prim !== s1[0].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`\n          );\n        }\n        return [annotateVar(s1[0]), ...stack.slice(2)];\n      }\n\n      case 'SLICE':\n        return [\n          annotateVar(\n            { prim: 'option', args: [args(0, ['nat'], ['nat'], ['string', 'bytes'])[2]] },\n            '@slice'\n          ),\n          ...stack.slice(3),\n        ];\n\n      case 'PACK': {\n        const s = args(0, null)[0];\n        ensurePackableType(s);\n        return [annotateVar({ prim: 'bytes' }, '@packed'), ...stack.slice(1)];\n      }\n\n      case 'ADD': {\n        const s = args(\n          0,\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' && s[1].prim === 'timestamp') ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'int')\n        ) {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' ||\n            s[0].prim === 'nat' ||\n            s[0].prim === 'mutez' ||\n            s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n          s[0].prim === s[1].prim\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`\n        );\n      }\n\n      case 'SUB': {\n        const s = ProtoInferiorTo(proto, Protocol.PsiThaCa)\n          ? args(0, ['nat', 'int', 'timestamp', 'mutez'], ['nat', 'int', 'timestamp', 'mutez'])\n          : args(0, ['nat', 'int', 'timestamp'], ['nat', 'int', 'timestamp']);\n\n        if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') &&\n            (s[1].prim === 'nat' || s[1].prim === 'int')) ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'timestamp')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'timestamp' && s[1].prim === 'int') {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`\n        );\n      }\n\n      case 'SUB_MUTEZ': {\n        const _s = args(0, ['mutez'], ['mutez']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'mutez' }] }), ...stack.slice(2)];\n      }\n\n      case 'MUL': {\n        const s = args(\n          0,\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' && s[1].prim === 'mutez') ||\n          (s[0].prim === 'mutez' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n            s[1].prim === 'bls12_381_fr') ||\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[0].prim === s[1].prim)\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[1].prim === 'bls12_381_fr') ||\n          ((s[1].prim === 'nat' || s[1].prim === 'int') && s[0].prim === 'bls12_381_fr')\n        ) {\n          return [annotateVar({ prim: 'bls12_381_fr' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'EDIV': {\n        const res = (\n          a: 'nat' | 'int' | 'mutez',\n          b: 'nat' | 'int' | 'mutez'\n        ): MichelsonTypeOption<MichelsonType> => ({\n          prim: 'option',\n          args: [{ prim: 'pair', args: [{ prim: a }, { prim: b }] }],\n        });\n        const s = args(0, ['nat', 'int', 'mutez'], ['nat', 'int', 'mutez']);\n        if (s[0].prim === 'nat' && s[1].prim === 'nat') {\n          return [annotateVar(res('nat', 'nat')), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' || s[0].prim === 'int') &&\n          (s[1].prim === 'nat' || s[1].prim === 'int')\n        ) {\n          return [annotateVar(res('int', 'nat')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'nat') {\n          return [annotateVar(res('mutez', 'mutez')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar(res('nat', 'mutez')), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'ABS':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'ISNAT':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'nat' }] }), ...stack.slice(1)];\n\n      case 'INT':\n        args(0, ['nat', 'bls12_381_fr', 'bytes']);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n\n      case 'BYTES':\n        args(0, ['nat', 'int']);\n        return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n\n      case 'NAT':\n        args(0, ['bytes']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'NEG': {\n        const s = args(0, ['nat', 'int', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'])[0];\n        if (s.prim === 'nat' || s.prim === 'int') {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n        }\n        return [annotateVar(s), ...stack.slice(1)];\n      }\n\n      case 'LSL':\n      case 'LSR':\n        args(0, ['nat', 'bytes'], ['nat', 'bytes']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(2)];\n\n      case 'OR':\n      case 'XOR': {\n        const s = args(0, ['nat', 'bytes', 'bool'], ['nat', 'bytes', 'bool']);\n        if (s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'AND': {\n        const s = args(0, ['nat', 'bytes', 'bool', 'int'], ['nat', 'bytes', 'bool']);\n        if ((s[0].prim !== 'int' || s[1].prim !== 'nat') && s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'NOT': {\n        const s = args(0, ['nat', 'bytes', 'bool', 'int'])[0];\n        if (s.prim === 'bool') {\n          return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n        }\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n      }\n\n      case 'COMPARE': {\n        const s = args(0, null, null);\n        ensureComparableType(s[0]);\n        ensureComparableType(s[1]);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n      }\n\n      case 'EQ':\n      case 'NEQ':\n      case 'LT':\n      case 'GT':\n      case 'LE':\n      case 'GE':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n\n      case 'SELF': {\n        if (ctx?.contract === undefined) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract required`\n          );\n        }\n        const ia = instructionAnn({ f: 1, v: 1 });\n        const ep = contractEntryPoint(ctx.contract, ia.f?.[0]);\n        if (ep === null) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract has no entrypoint ${ep}`\n          );\n        }\n        return [\n          annotate({ prim: 'contract', args: [ep] }, { v: ia.v ? ia.v : ['@self'] }),\n          ...stack,\n        ];\n      }\n\n      case 'TRANSFER_TOKENS': {\n        const s = args(0, null, ['mutez'], ['contract']);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(3)];\n      }\n\n      case 'SET_DELEGATE': {\n        const s = args(0, ['option'])[0];\n        if (typeID(s.args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`\n          );\n        }\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(1)];\n      }\n\n      case 'IMPLICIT_ACCOUNT':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'contract', args: [{ prim: 'unit' }] }), ...stack.slice(1)];\n\n      case 'NOW':\n        return [annotateVar({ prim: 'timestamp' }, '@now'), ...stack];\n\n      case 'AMOUNT':\n        return [annotateVar({ prim: 'mutez' }, '@amount'), ...stack];\n\n      case 'BALANCE':\n        return [annotateVar({ prim: 'mutez' }, '@balance'), ...stack];\n\n      case 'CHECK_SIGNATURE':\n        args(0, ['key'], ['signature'], ['bytes']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(3)];\n\n      case 'BLAKE2B':\n      case 'SHA256':\n      case 'SHA512':\n      case 'KECCAK':\n      case 'SHA3':\n        args(0, ['bytes']);\n        return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n\n      case 'HASH_KEY':\n        args(0, ['key']);\n        return [annotateVar({ prim: 'key_hash' }), ...stack.slice(1)];\n\n      case 'SOURCE':\n        return [annotateVar({ prim: 'address' }, '@source'), ...stack];\n\n      case 'SENDER':\n        return [annotateVar({ prim: 'address' }, '@sender'), ...stack];\n\n      case 'ADDRESS': {\n        const s = args(0, ['contract'])[0];\n        const ia = instructionAnn({ v: 1 });\n        return [\n          annotate(\n            { prim: 'address', [refContract]: s },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'address') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SELF_ADDRESS': {\n        const addr: MichelsonTypeAddress = { prim: 'address' };\n        if (ctx?.contract !== undefined) {\n          addr[refContract] = {\n            prim: 'contract',\n            args: [contractSection(ctx.contract, 'parameter').args[0]],\n          };\n        }\n        return [annotateVar(addr, '@address'), ...stack];\n      }\n\n      case 'CHAIN_ID':\n        return [annotateVar({ prim: 'chain_id' }), ...stack];\n\n      case 'DROP': {\n        instructionAnn({});\n        const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        return stack.slice(n);\n      }\n\n      case 'DIG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n      }\n\n      case 'DUG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n      }\n\n      case 'NONE':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'option', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LEFT':\n      case 'RIGHT': {\n        const s = args(0, null)[0];\n        const ia = instructionAnn({ f: 2, t: 1, v: 1 }, { specialFields: true });\n        const va = argAnn(s);\n\n        const children: [MichelsonType, MichelsonType] = [\n          annotate(s, {\n            t: null,\n            v: null,\n            f:\n              ia.f && ia.f.length > 0 && ia.f[0] !== '%'\n                ? ia.f[0] === '%@'\n                  ? va.v\n                    ? ['%' + va.v[0].slice(1)]\n                    : undefined\n                  : ia.f\n                : undefined,\n          }),\n          annotate(instruction.args[0], {\n            t: null,\n            f: ia.f && ia.f.length > 1 && ia.f[1] !== '%' ? ia.f : undefined,\n          }),\n        ];\n\n        return [\n          annotate(\n            {\n              prim: 'or',\n              args: instruction.prim === 'LEFT' ? children : [children[1], children[0]],\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'NIL':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'list', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'UNPACK':\n        args(0, ['bytes']);\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotateVar({ prim: 'option', args: [instruction.args[0]] }, '@unpacked'),\n          ...stack.slice(1),\n        ];\n\n      case 'CONTRACT': {\n        const s = args(0, ['address'])[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        const ia = instructionAnn({ v: 1, f: 1 });\n        const contract = s[refContract];\n        if (contract !== undefined) {\n          const ep = contractEntryPoint(contract, ia.f?.[0]);\n          if (ep === null) {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: contract has no entrypoint ${ep}`\n            );\n          }\n          ensureTypesEqual(ep, instruction.args[0]);\n        }\n        return [\n          annotate(\n            { prim: 'option', args: [{ prim: 'contract', args: [instruction.args[0]] }] },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'contract') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAST': {\n        instructionAnn({});\n        const s = args(0, null)[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureTypesEqual(instruction.args[0], s);\n        return [instruction.args[0], ...stack.slice(1)];\n      }\n\n      case 'IF_NONE': {\n        instructionAnn({});\n        const s = args(0, ['option'])[0];\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'some') }), ...tail],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const va = argAnn(s);\n        const lefta = argAnn(s.args[0]);\n        const righta = argAnn(s.args[1]);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], {\n              t: null,\n              v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : 'left'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [\n            annotate(s.args[1], {\n              t: null,\n              v: varSuffix(va, righta.f ? righta.f[0].slice(1) : 'right'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_CONS': {\n        instructionAnn({});\n        const s = args(0, ['list'])[0];\n        const va = argAnn(s);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], { t: null, v: varSuffix(va, 'hd') }),\n            annotate(s, { t: null, v: varSuffix(va, 'tl') }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'IF': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'MAP': {\n        const s = args(0, ['list', 'map', 'option'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          if (!('prim' in body.failed) || body.failed.prim !== 'never') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: FAIL is not allowed in MAP`\n            );\n          }\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length < 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureStacksEqual(body.slice(1), tail);\n        return s.prim === 'list'\n          ? [annotateVar({ prim: 'list', args: [body[0]] }), ...tail]\n          : s.prim === 'map'\n          ? [annotateVar({ prim: 'map', args: [s.args[0], body[0]] }), ...tail]\n          : [annotateVar({ prim: 'option', args: [body[0]] }), ...tail];\n      }\n\n      case 'ITER': {\n        instructionAnn({});\n        const s = args(0, ['set', 'list', 'map'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, tail);\n        return tail;\n      }\n\n      case 'LOOP': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [{ prim: 'bool' }, ...tail]);\n        return tail;\n      }\n\n      case 'LOOP_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'left') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [s, ...tail]);\n        return [annotate(s.args[1], { t: null, v: instructionAnn({ v: 1 }).v }), ...tail];\n      }\n\n      case 'DIP': {\n        instructionAnn({});\n        const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        const head = stack.slice(0, n);\n        const tail = stack.slice(n);\n        // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n        const body =\n          instruction.args.length === 2\n            ? functionTypeInternal(instruction.args[1], tail, ctx)\n            : functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        return [...head, ...body];\n      }\n\n      case 'CREATE_CONTRACT': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['option'], ['mutez'], null);\n        if (typeID(s[0].args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`\n          );\n        }\n        if (ensureStorableType(s[2])) {\n          assertContractValid(instruction.args[0]);\n          assertScalarTypesEqual(contractSection(instruction.args[0], 'storage').args[0], s[2]);\n        }\n\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate({ prim: 'operation' }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'address',\n              [refContract]: {\n                prim: 'contract',\n                args: [contractSection(instruction.args[0], 'parameter').args[0]],\n              },\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'PUSH':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertDataValidInternal(instruction.args[1], instruction.args[0], {\n          ...ctx,\n          contract: undefined,\n        });\n        return [annotateVar(instruction.args[0]), ...stack];\n\n      case 'EMPTY_SET':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'set', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        return [\n          annotate({ prim: 'map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_BIG_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        ensureBigMapStorableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'big_map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LAMBDA_REC':\n      case 'LAMBDA': {\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        const s = [instruction.args[0]];\n        if (instruction.prim === 'LAMBDA_REC') {\n          s.push({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] });\n        }\n        const body = functionTypeInternal(instruction.args[2], s, {\n          ...ctx,\n          contract: undefined,\n        });\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length !== 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureTypesEqual(instruction.args[1], body[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] }),\n          ...stack,\n        ];\n      }\n\n      case 'LEVEL':\n        return [annotateVar({ prim: 'nat' }, '@level'), ...stack];\n\n      case 'TOTAL_VOTING_POWER':\n        return [annotateVar({ prim: 'nat' }), ...stack];\n\n      case 'VOTING_POWER':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'TICKET': {\n        const s = args(0, null, ['nat'])[0];\n        ensureComparableType(s);\n        if (ProtoInferiorTo(proto, Protocol.PtLimaPtL)) {\n          return [\n            annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 })),\n            ...stack.slice(2),\n          ];\n        } else {\n          return [\n            annotateVar({\n              prim: 'option',\n              args: [annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 }))],\n            }),\n            ...stack.slice(2),\n          ];\n        }\n      }\n\n      case 'JOIN_TICKETS': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        if (typeID(s.args[0]) !== 'ticket') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`\n          );\n        }\n        ensureTypesEqual(s.args[0], s.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [annotate(s.args[0], { t: null })],\n          }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SPLIT_TICKET': {\n        const s = args(0, ['ticket'], ['pair']);\n        const p = unpackComb('pair', s[1]);\n        if (typeID(p.args[0]) !== 'nat') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: nat expected: ${typeID(p.args[0])}`\n          );\n        }\n        ensureTypesEqual(p.args[0], p.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [\n              {\n                prim: 'pair',\n                args: [annotate(s[0], { t: null }), annotate(s[0], { t: null })],\n              },\n            ],\n          }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'READ_TICKET': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['ticket'])[0];\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: [{ prim: 'address' }, annotate(s.args[0], { t: null }), { prim: 'nat' }],\n            },\n            { v: va?.[0] }\n          ),\n          annotate(s, { v: va?.[1], t: null }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'PAIRING_CHECK': {\n        const p = args(0, ['list'])[0].args[0];\n        if (!isPairType(p)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: pair expected: ${typeID(p)}`\n          );\n        }\n        const c = unpackComb('pair', p);\n        if (typeID(c.args[0]) !== 'bls12_381_g1') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`\n          );\n        }\n        if (typeID(c.args[1]) !== 'bls12_381_g2') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`\n          );\n        }\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n      }\n\n      case 'SAPLING_EMPTY_STATE':\n        return [\n          annotate(\n            { prim: 'sapling_state', args: [instruction.args[0]] },\n            instructionAnn({ v: 1, t: 1 })\n          ),\n          ...stack,\n        ];\n\n      case 'SAPLING_VERIFY_UPDATE': {\n        const s = args(0, ['sapling_transaction'], ['sapling_state']);\n        if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`\n          );\n        }\n        return ProtoInferiorTo(proto, Protocol.PtJakarta)\n          ? [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ]\n          : [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      { prim: 'bytes' },\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                      },\n                    ],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ];\n      }\n\n      case 'OPEN_CHEST':\n        args(0, ['chest_key'], ['chest'], ['nat']);\n        return [\n          annotateVar({ prim: 'or', args: [{ prim: 'bytes' }, { prim: 'bool' }] }),\n          ...stack.slice(3),\n        ];\n\n      case 'VIEW': {\n        const s = args(0, null, ['address']);\n        ensurePushableType(s[0]);\n        return [annotateVar({ prim: 'option', args: [instruction.args[1]] }), ...stack.slice(2)];\n      }\n\n      case 'MIN_BLOCK_TIME':\n        return [annotateVar({ prim: 'nat' }), ...stack];\n\n      case 'EMIT': {\n        const ia = instructionAnn({ f: 1, t: 1 });\n        if (instruction.args) {\n          const s = args(0, null);\n          ensureTypesEqual(s[0], instruction.args[0]);\n          return [annotate({ prim: 'operation' }, ia), ...stack.slice(1)];\n        }\n        return [annotate({ prim: 'operation' }, ia), ...stack.slice(1)];\n      }\n\n      default:\n        throw new MichelsonError(\n          instruction as MichelsonCode,\n          `unexpected instruction: ${(instruction as Prim).prim}`\n        );\n    }\n  })(instruction);\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: instruction,\n      in: stack,\n      out: retStack,\n    };\n    ctx.traceCallback(trace);\n  }\n\n  return retStack;\n}\n\nexport function contractSection<T extends 'parameter' | 'storage' | 'code'>(\n  contract: MichelsonContract,\n  section: T\n): MichelsonContractSection<T> {\n  for (const s of contract) {\n    if (s.prim === section) {\n      return s as MichelsonContractSection<T>;\n    }\n  }\n  throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nexport function contractViews(contract: MichelsonContract): {\n  [name: string]: MichelsonContractView;\n} {\n  const views: { [name: string]: MichelsonContractView } = {};\n  for (const s of contract) {\n    if (s.prim === 'view') {\n      views[s.args[0].string] = s;\n    }\n  }\n  return views;\n}\n\nfunction isContract(v: Expr): v is MichelsonContract {\n  if (Array.isArray(v)) {\n    for (const s of v) {\n      if ('prim' in s && (s.prim === 'parameter' || s.prim === 'storage' || s.prim === 'code')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function contractEntryPoint(\n  src: MichelsonContract | MichelsonType,\n  ep?: string\n): MichelsonType | null {\n  ep = ep || '%default';\n  const entryPoint = contractEntryPoints(src).find((x) => x[0] === ep);\n\n  if (entryPoint !== undefined) {\n    return entryPoint[1];\n  } else if (ep === '%default') {\n    return isContract(src) ? contractSection(src, 'parameter').args[0] : src;\n  }\n  return null;\n}\n\nfunction isOrType(t: MichelsonType): t is MichelsonTypeOr<[MichelsonType, MichelsonType]> {\n  return Array.isArray(t) || t.prim === 'or';\n}\n\nexport function contractEntryPoints(\n  src: MichelsonContract | MichelsonType\n): [string, MichelsonType][] {\n  if (isContract(src)) {\n    const param = contractSection(src, 'parameter');\n    const ch = contractEntryPoints(param.args[0]);\n    const a = unpackAnnotations(param);\n    return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n  }\n\n  if (isOrType(src)) {\n    const args = typeArgs(src);\n    const getArg = (n: 0 | 1): [string, MichelsonType][] => {\n      const a = unpackAnnotations(args[n]);\n      if (typeID(args[n]) === 'or') {\n        const ch = contractEntryPoints(args[n]);\n        return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n      }\n      return a.f ? [[a.f[0], args[n]]] : [];\n    };\n    return [...getArg(0), ...getArg(1)];\n  }\n  return [];\n}\n\n// Contract validation\n\nexport function assertContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType {\n  const assertSection = (\n    parameter: MichelsonType,\n    storage: MichelsonType,\n    ret: MichelsonType,\n    code: InstructionList\n  ): MichelsonReturnType => {\n    assertTypeAnnotationsValid(parameter, true);\n    assertTypeAnnotationsValid(storage);\n    const arg: MichelsonType = {\n      prim: 'pair',\n      args: [\n        { ...parameter, ...{ annots: ['@parameter'] } },\n        { ...storage, ...{ annots: ['@storage'] } },\n      ],\n    };\n    const out = functionTypeInternal(code, [arg], { ...ctx, ...{ contract } });\n    if ('failed' in out) {\n      return out;\n    }\n\n    try {\n      assertStacksEqual(out, [ret]);\n    } catch (err) {\n      if (err instanceof MichelsonError) {\n        throw new MichelsonInstructionError(code, out, err.message);\n      } else {\n        throw err;\n      }\n    }\n    return out;\n  };\n\n  const parameter = contractSection(contract, 'parameter').args[0];\n  const storage = contractSection(contract, 'storage').args[0];\n  const code = contractSection(contract, 'code').args[0];\n  const expected: MichelsonType = {\n    prim: 'pair',\n    args: [{ prim: 'list', args: [{ prim: 'operation' }] }, storage],\n  };\n  const ret = assertSection(parameter, storage, expected, code);\n\n  for (const view of Object.values(contractViews(contract))) {\n    assertSection(view.args[1], storage, view.args[2], view.args[3]);\n  }\n\n  return ret;\n}\n\n// Exported wrapper functions\n\nexport function assertDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): void {\n  assertTypeAnnotationsValid(t);\n  assertDataValidInternal(d, t, ctx || null);\n}\n\nexport function functionType(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx?: Context\n): MichelsonReturnType {\n  for (const t of stack) {\n    assertTypeAnnotationsValid(t);\n  }\n\n  if (ctx?.contract !== undefined) {\n    for (const typesec of ['parameter', 'storage'] as const) {\n      const sec = contractSection(ctx.contract, typesec).args[0];\n      assertTypeAnnotationsValid(sec);\n    }\n  }\n\n  return functionTypeInternal(inst, stack, ctx || null);\n}\n\nexport function assertTypesEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): void {\n  if (Array.isArray(a)) {\n    // type guards don't work for parametrized generic types\n    for (const v of a as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n    for (const v of b as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n  } else {\n    assertTypeAnnotationsValid(a as MichelsonType);\n    assertTypeAnnotationsValid(b as MichelsonType);\n  }\n  assertScalarTypesEqual(a, b, field);\n}\n\nexport function isTypeAnnotationsValid(t: MichelsonType, field = false): boolean {\n  try {\n    assertTypeAnnotationsValid(t, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType | null {\n  try {\n    return assertContractValid(contract, ctx);\n  } catch {\n    return null;\n  }\n}\n\nexport function isDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): boolean {\n  try {\n    assertDataValid(d, t, ctx);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isTypeEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): boolean {\n  try {\n    assertTypesEqual(a, b, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n", "import {\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonType,\n  MichelsonData,\n  MichelsonCode,\n  MichelsonReturnType,\n} from './michelson-types';\nimport {\n  assertContractValid,\n  contractSection,\n  contractEntryPoint,\n  assertDataValid,\n  assertTypeAnnotationsValid,\n  InstructionTrace,\n  Context,\n  functionType,\n  isDataValid,\n  contractEntryPoints,\n} from './michelson-typecheck';\nimport { Parser, ParserOptions } from './micheline-parser';\nimport {\n  assertMichelsonContract,\n  assertMichelsonType,\n  assertMichelsonData,\n} from './michelson-validator';\nimport {\n  InvalidDataExpressionError,\n  InvalidEntrypointError,\n  InvalidMichelsonError,\n  InvalidTypeExpressionError,\n} from './errors';\n\nexport interface ContractOptions extends ParserOptions {\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class Contract {\n  private ctx: Context;\n  public readonly output: MichelsonReturnType;\n\n  constructor(public readonly contract: MichelsonContract, opt?: ContractOptions) {\n    this.ctx = { contract, ...opt };\n    this.output = assertContractValid(contract, this.ctx);\n  }\n\n  static parse(src: string | object, opt?: ContractOptions): Contract {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidMichelsonError('empty Michelson');\n    }\n    if (assertMichelsonContract(expr)) {\n      return new Contract(expr, opt);\n    }\n    throw undefined;\n  }\n\n  static parseTypeExpression(src: string | object, opt?: ParserOptions): MichelsonType {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidTypeExpressionError('empty type expression');\n    }\n    // remove assertTypeAnnotationsValid from if block because: () => void || throw error\n    if (assertMichelsonType(expr)) {\n      assertTypeAnnotationsValid(expr);\n      return expr;\n    }\n    throw undefined;\n  }\n\n  static parseDataExpression(src: string | object, opt?: ParserOptions): MichelsonData {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidDataExpressionError('empty data expression');\n    }\n    if (assertMichelsonData(expr)) {\n      return expr;\n    }\n    throw undefined;\n  }\n\n  section<T extends 'parameter' | 'storage' | 'code'>(section: T): MichelsonContractSection<T> {\n    return contractSection(this.contract, section);\n  }\n\n  entryPoints(): [string, MichelsonType][] {\n    return contractEntryPoints(this.contract);\n  }\n\n  entryPoint(ep?: string): MichelsonType | null {\n    return contractEntryPoint(this.contract, ep);\n  }\n\n  assertDataValid(d: MichelsonData, t: MichelsonType): void {\n    assertDataValid(d, t, this.ctx);\n  }\n\n  isDataValid(d: MichelsonData, t: MichelsonType): boolean {\n    return isDataValid(d, t, this.ctx);\n  }\n\n  assertParameterValid(ep: string | null, d: MichelsonData): void {\n    const t = this.entryPoint(ep || undefined);\n    if (t === null) {\n      throw new InvalidEntrypointError(ep?.toString());\n    }\n    this.assertDataValid(d, t);\n  }\n\n  isParameterValid(ep: string | null, d: MichelsonData): boolean {\n    try {\n      this.assertParameterValid(ep, d);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  functionType(inst: MichelsonCode, stack: MichelsonType[]): MichelsonReturnType {\n    return functionType(inst, stack, this.ctx);\n  }\n}\n\n// TODO: dummyContract not used anywhere in the codebase can be deleted?\nexport const dummyContract = new Contract([\n  { prim: 'parameter', args: [{ prim: 'unit' }] },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  {\n    prim: 'code',\n    args: [[{ prim: 'CAR' }, { prim: 'NIL', args: [{ prim: 'operation' }] }, { prim: 'PAIR' }]],\n  },\n]);\n", "import { sourceReference, Expr } from './micheline';\nimport { InstructionTrace, MichelsonInstructionError } from './michelson-typecheck';\nimport { emitMicheline } from './micheline-emitter';\nimport { unpackAnnotations, MichelsonError, MichelsonTypeError } from './utils';\nimport { MichelsonReturnType } from './michelson-types';\n\nexport function formatStack(s: MichelsonReturnType): string {\n  if ('failed' in s) {\n    return `[FAILED: ${emitMicheline(s.failed)}]`;\n  }\n\n  return s\n    .map((v, i) => {\n      const ann = unpackAnnotations(v);\n      return `[${i}${ann.v ? '/' + ann.v[0] : ''}]: ${emitMicheline(v)}`;\n    })\n    .join('\\n');\n}\n\nexport function traceDumpFunc(\n  blocks: boolean,\n  cb: (s: string) => void\n): (v: InstructionTrace) => void {\n  return (v: InstructionTrace) => {\n    if (Array.isArray(v) && !blocks) {\n      return;\n    }\n    const macro = v.op[sourceReference]?.macro;\n\n    const msg = `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n    cb(msg);\n  };\n}\n\nexport function formatError(err: MichelsonError): string {\n  if (err instanceof MichelsonInstructionError) {\n    const macro = err.val[sourceReference]?.macro;\n    return `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n  } else if (err instanceof MichelsonTypeError) {\n    const type = Array.isArray(err.val)\n      ? '[' + (err.val as Expr[]).map((v, i) => `[${i}]: ${emitMicheline(v)}`).join('; ') + ']'\n      : emitMicheline(err.val);\n\n    return `Type: ${type}\n${\n  err.data\n    ? `Data: ${emitMicheline(err.data)}\n`\n    : ''\n}\n`;\n  } else {\n    return `Value: ${emitMicheline(err.val)}`;\n  }\n}\n", "\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"b85fc404e34545a518215e449b3f1253f4520eec\",\n    \"version\": \"17.2.0\"\n};\n"],
  "mappings": "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",
  "names": ["Literal", "Protocol", "assertArgs", "r", "v", "tok", "i", "ex", "Tag", "ContractID", "PublicKeyHashID", "PublicKeyID", "byte", "args", "a", "instruction", "s", "_a", "s1", "parameter", "storage", "ret", "code"]
}
