import {
  __publicField
} from "./chunk-FOWDQQBS.js";

// node_modules/@tzkt/oazapfts/lib/module/runtime/util.js
var encodeReserved = [encodeURIComponent, encodeURIComponent];
function encode(encoders, delimiter = ",") {
  const q = (v, i) => {
    const encoder = encoders[i % encoders.length];
    if (typeof v === "undefined") {
      return "";
    }
    if (typeof v === "object") {
      if (Array.isArray(v)) {
        return v.map(encoder).join(delimiter);
      }
      const flat = Object.entries(v).reduce((flat2, entry) => [...flat2, ...entry], []);
      return flat.map(encoder).join(delimiter);
    }
    return encoder(String(v));
  };
  return (strings, ...values) => {
    return strings.reduce((prev, s, i) => {
      return `${prev}${s}${q(values[i], i)}`;
    }, "");
  };
}
function delimited(delimiter = ",") {
  return (params, encoders = encodeReserved) => Object.entries(params).filter(([, value]) => value !== void 0).map(([name, value]) => encode(encoders, delimiter)`${name}=${value}`).join("&");
}
function stripUndefined(obj) {
  return obj && JSON.parse(JSON.stringify(obj));
}
function joinUrl(...parts) {
  return parts.filter(Boolean).map((s, i) => i === 0 ? s : s.replace(/^\/+/, "")).map((s, i, a) => i === a.length - 1 ? s : s.replace(/\/+$/, "")).join("/");
}

// node_modules/@tzkt/oazapfts/lib/module/runtime/query.js
function query(...params) {
  const s = params.filter(Boolean).join("&");
  return s && `?${s}`;
}
function explode(params, encoders = encodeReserved) {
  const q = encode(encoders);
  return Object.entries(params).filter(([, value]) => value !== void 0).map(([name, value]) => {
    if (Array.isArray(value)) {
      return value.map((v) => q`${name}=${v}`).join("&");
    }
    if (typeof value === "object") {
      return explode(value, encoders);
    }
    return q`${name}=${value}`;
  }).join("&");
}
var form = delimited();
var pipe = delimited("|");
var space = delimited("%20");

// node_modules/@tzkt/oazapfts/lib/module/index.js
var SUCCESS_CODES = [200, 201, 202, 204];
async function ok(promise) {
  const res = await promise;
  if (SUCCESS_CODES.some((s) => s == res.status))
    return res.data;
  throw new HttpError(res.status, res.data);
}
var HttpError = class extends Error {
  constructor(status, data) {
    super(`Error: ${status}`);
    __publicField(this, "status");
    __publicField(this, "data");
    this.status = status;
    this.data = data;
  }
};

// node_modules/@tzkt/oazapfts/lib/module/runtime/index.js
function runtime(defaults2) {
  async function fetchText(url, req) {
    const res = await doFetch(url, req);
    let data;
    try {
      data = await res.text();
    } catch (err) {
    }
    return {
      status: res.status,
      headers: res.headers,
      contentType: res.headers.get("content-type"),
      data
    };
  }
  async function fetchJson(url, req = {}) {
    const { status, headers, contentType, data } = await fetchText(url, {
      ...req,
      headers: {
        Accept: "application/json",
        ...req.headers
      }
    });
    const isJson = contentType ? contentType.includes("json") : false;
    if (isJson) {
      return {
        status,
        headers,
        data: data ? JSON.parse(data) : null
      };
    }
    return { status, headers, data };
  }
  async function fetchBlob(url, req = {}) {
    const res = await doFetch(url, req);
    let data;
    try {
      data = await res.blob();
    } catch (err) {
    }
    return { status: res.status, headers: res.headers, data };
  }
  async function doFetch(url, req = {}) {
    const { baseUrl, headers, fetch: customFetch, ...init } = {
      ...defaults2,
      ...req
    };
    const href = joinUrl(baseUrl, url);
    const res = await (customFetch || fetch)(href, {
      ...init,
      headers: stripUndefined({ ...defaults2.headers, ...headers })
    });
    return res;
  }
  return {
    ok,
    fetchText,
    fetchJson,
    fetchBlob,
    json({ body, headers, ...req }) {
      return {
        ...req,
        ...body != null && { body: JSON.stringify(body) },
        headers: {
          ...headers,
          "Content-Type": "application/json"
        }
      };
    },
    form({ body, headers, ...req }) {
      return {
        ...req,
        ...body != null && { body: form(body) },
        headers: {
          ...headers,
          "Content-Type": "application/x-www-form-urlencoded"
        }
      };
    },
    multipart({ body, ...req }) {
      if (body == null)
        return req;
      const data = new (defaults2.formDataConstructor || req.formDataConstructor || FormData)();
      Object.entries(body).forEach(([name, value]) => {
        data.append(name, value);
      });
      return {
        ...req,
        body: data
      };
    }
  };
}

// node_modules/@tzkt/sdk-api/build/module/queryParamParsers.js
var jsonParameter = (paramName, p) => {
  if (!p)
    return {};
  const mainParamsObj = {};
  Object.entries(p).forEach(([k, v]) => {
    if (!(v instanceof Object)) {
      throw new Error(`Expected ${paramName} value to be object, received ${typeof v}`);
    }
    const { jsonPath, jsonValue } = v;
    if (jsonValue === void 0 || jsonValue === null)
      throw new Error(`Expected jsonValue in ${paramName} -> ${k}, found: ${jsonValue}`);
    const parameterPathParts = [paramName, jsonPath, k];
    const parameterPath = parameterPathParts.filter((p2) => p2 !== void 0).join(".");
    mainParamsObj[parameterPath] = jsonValue;
  });
  return mainParamsObj;
};
var anyofParameter = (paramName, p) => {
  if (!p)
    return {};
  const { fields } = p;
  const validateFields = (fields2) => {
    if (!Array.isArray(fields2)) {
      throw new Error(`Expected ${paramName} fields to be Array. Received ${typeof fields2}.`);
    }
    fields2.forEach((f) => {
      if (typeof f === "string")
        return;
      throw new Error(`Expected ${paramName} fields to be strings. Received ${typeof f}`);
    });
    return true;
  };
  if (!validateFields(fields))
    return {};
  const mainParamsObj = {};
  const anyof = fields.join(".");
  if (p.value) {
    const prefixedKey = `${paramName}.${anyof}`;
    mainParamsObj[prefixedKey] = p.value;
  }
  for (const param of ["in", "eq", "null"]) {
    if (p[param]) {
      const prefixedKey = `${paramName}.${anyof}.${param}`;
      mainParamsObj[prefixedKey] = Array.isArray(p[param]) ? p[param].join(",") : p[param];
      return mainParamsObj;
    }
  }
  return mainParamsObj;
};
var queryParameter = (paramName, p) => {
  if (!p)
    return {};
  const mainParamsObj = {};
  Object.entries(p).forEach(([k, v]) => {
    const key = `${paramName}.${k}`;
    mainParamsObj[key] = v;
  });
  return mainParamsObj;
};
var parsers = {
  jsonParameter,
  queryParameter,
  anyofParameter
};
var queryParamParsers_default = parsers;

// node_modules/@tzkt/sdk-api/build/module/index.js
var defaults = {
  baseUrl: "https://api.tzkt.io"
};
var oazapfts = runtime(defaults);
var servers = {
  server1: "https://api.tzkt.io"
};
function accountsGet({ id, address, $type, kind, delegate, balance, staked, lastActivity, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("type", $type),
    ...queryParamParsers_default.queryParameter("kind", kind),
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("staked", staked),
    ...queryParamParsers_default.queryParameter("lastActivity", lastActivity),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function accountsGetCount({ $type, kind, balance, staked, firstActivity } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/count${query(explode({
    ...queryParamParsers_default.queryParameter("type", $type),
    ...queryParamParsers_default.queryParameter("kind", kind),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("staked", staked),
    ...queryParamParsers_default.queryParameter("firstActivity", firstActivity)
  }))}`, {
    ...opts
  }));
}
function accountsGetByAddress(address, { legacy } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}${query(explode({
    legacy
  }))}`, {
    ...opts
  }));
}
function accountsGetContracts(address, { sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/contracts${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function accountsGetDelegators(address, { $type, balance, delegationLevel, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/delegators${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("type", $type),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("delegationLevel", delegationLevel),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function accountsGetOperations(address, { $type, initiator, sender, target, prevDelegate, newDelegate, contractManager, contractDelegate, originatedContract, accuser, offender, baker, level, timestamp, entrypoint, parameter, hasInternals, status, sort, lastId, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/operations${query(explode({
    type: $type,
    sort,
    lastId,
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.queryParameter("initiator", initiator),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("target", target),
    ...queryParamParsers_default.queryParameter("prevDelegate", prevDelegate),
    ...queryParamParsers_default.queryParameter("newDelegate", newDelegate),
    ...queryParamParsers_default.queryParameter("contractManager", contractManager),
    ...queryParamParsers_default.queryParameter("contractDelegate", contractDelegate),
    ...queryParamParsers_default.queryParameter("originatedContract", originatedContract),
    ...queryParamParsers_default.queryParameter("accuser", accuser),
    ...queryParamParsers_default.queryParameter("offender", offender),
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("entrypoint", entrypoint),
    ...queryParamParsers_default.jsonParameter("parameter", parameter),
    ...queryParamParsers_default.queryParameter("hasInternals", hasInternals),
    ...queryParamParsers_default.queryParameter("status", status)
  }))}`, {
    ...opts
  }));
}
function accountsGetCounter(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/counter`, {
    ...opts
  }));
}
function accountsGetBalance(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance`, {
    ...opts
  }));
}
function accountsGetBalanceAtLevel(address, level, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(level)}`, {
    ...opts
  }));
}
function accountsGetBalanceAtDate(address, datetime, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history/${encodeURIComponent(datetime)}`, {
    ...opts
  }));
}
function accountsGetBalanceHistory(address, { step, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(address)}/balance_history${query(explode({
    step,
    offset,
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort)
  }))}`, {
    ...opts
  }));
}
function accountsGetBalanceReport(address, { $from, to, currency, historical, delimiter, separator } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/accounts/${encodeURIComponent(address)}/report${query(explode({
    from: $from,
    to,
    currency,
    historical,
    delimiter,
    separator
  }))}`, {
    ...opts
  }));
}
function bigMapsGetBigMapsCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/bigmaps/count", {
    ...opts
  }));
}
function bigMapsGetBigMaps({ contract, path, tags, active, lastLevel, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps${query(explode({
    active,
    limit,
    micheline,
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("path", path),
    ...queryParamParsers_default.queryParameter("tags", tags),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function bigMapsGetBigMapUpdates({ bigmap, path, contract, tags, action, value, level, timestamp, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/updates${query(explode({
    limit,
    micheline,
    ...queryParamParsers_default.queryParameter("bigmap", bigmap),
    ...queryParamParsers_default.queryParameter("path", path),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("tags", tags),
    ...queryParamParsers_default.queryParameter("action", action),
    ...queryParamParsers_default.jsonParameter("value", value),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function bigMapsGetBigMapById(id, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function bigMapsGetBigMapType(id, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/type`, {
    ...opts
  }));
}
function bigMapsGetKeys(id, { active, key, value, lastLevel, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys${query(explode({
    active,
    limit,
    micheline,
    ...queryParamParsers_default.jsonParameter("key", key),
    ...queryParamParsers_default.jsonParameter("value", value),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function bigMapsGetKey(id, key, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function bigMapsGetKeyUpdates(id, key, { sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/keys/${encodeURIComponent(key)}/updates${query(explode({
    limit,
    micheline,
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function bigMapsGetHistoricalKeys(id, level, { active, key, value, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}${query(explode({
    active,
    limit,
    micheline,
    ...queryParamParsers_default.jsonParameter("key", key),
    ...queryParamParsers_default.jsonParameter("value", value),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function bigMapsGetKey2(id, level, key, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/bigmaps/${encodeURIComponent(id)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function blocksGetCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/blocks/count", {
    ...opts
  }));
}
function blocksGet({ baker, anyof, proposer, producer, level, timestamp, priority, blockRound, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("proposer", proposer),
    ...queryParamParsers_default.queryParameter("producer", producer),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("priority", priority),
    ...queryParamParsers_default.queryParameter("blockRound", blockRound),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function blocksGetByHash(hash, { operations, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(hash)}${query(explode({
    operations,
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function blocksGetByLevel(level, { operations, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}${query(explode({
    operations,
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function blocksGetByLevel2(level, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(level)}/timestamp`, {
    ...opts
  }));
}
function blocksGetByDate(timestamp, { operations, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}${query(explode({
    operations,
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function blocksGetByDate2(timestamp, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/blocks/${encodeURIComponent(timestamp)}/level`, {
    ...opts
  }));
}
function commitmentsGet(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/${encodeURIComponent(address)}`, {
    ...opts
  }));
}
function commitmentsGetAll({ activated, activationLevel, balance, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments${query(explode({
    activated,
    limit,
    ...queryParamParsers_default.queryParameter("activationLevel", activationLevel),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function commitmentsGetCount({ activated, balance } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/commitments/count${query(explode({
    activated,
    ...queryParamParsers_default.queryParameter("balance", balance)
  }))}`, {
    ...opts
  }));
}
function constantsGet({ address, creationLevel, creationTime, creator, refs, size, select, sort, offset, limit, format } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/constants${query(explode({
    limit,
    format,
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("creationLevel", creationLevel),
    ...queryParamParsers_default.queryParameter("creationTime", creationTime),
    ...queryParamParsers_default.queryParameter("creator", creator),
    ...queryParamParsers_default.queryParameter("refs", refs),
    ...queryParamParsers_default.queryParameter("size", size),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function constantsGetByAddress(address, { format } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/${encodeURIComponent(address)}${query(explode({
    format
  }))}`, {
    ...opts
  }));
}
function constantsGetCount({ refs } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/constants/count${query(explode({
    ...queryParamParsers_default.queryParameter("refs", refs)
  }))}`, {
    ...opts
  }));
}
function contractsGet({ address, kind, tzips, creator, manager, delegate, balance, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts${query(explode({
    limit,
    includeStorage,
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("kind", kind),
    ...queryParamParsers_default.queryParameter("tzips", tzips),
    ...queryParamParsers_default.queryParameter("creator", creator),
    ...queryParamParsers_default.queryParameter("manager", manager),
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("lastActivity", lastActivity),
    ...queryParamParsers_default.queryParameter("typeHash", typeHash),
    ...queryParamParsers_default.queryParameter("codeHash", codeHash),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetCount({ kind } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/count${query(explode({
    ...queryParamParsers_default.queryParameter("kind", kind)
  }))}`, {
    ...opts
  }));
}
function contractsGetByAddress(address, { legacy } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}${query(explode({
    legacy
  }))}`, {
    ...opts
  }));
}
function contractsGetSame(address, { select, sort, offset, limit, includeStorage } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/same${query(explode({
    limit,
    includeStorage,
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetSimilar(address, { select, sort, offset, limit, includeStorage } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/similar${query(explode({
    limit,
    includeStorage,
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetCode(address, { level, format } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/code${query(explode({
    level,
    format
  }))}`, {
    ...opts
  }));
}
function contractsGetInterface(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/interface`, {
    ...opts
  }));
}
function contractsGetEntrypoints(address, { all, json, micheline, michelson } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints${query(explode({
    all,
    json,
    micheline,
    michelson
  }))}`, {
    ...opts
  }));
}
function contractsGetEntrypointByName(address, name, { json, micheline, michelson } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}${query(explode({
    json,
    micheline,
    michelson
  }))}`, {
    ...opts
  }));
}
function contractsGetContractViews(address, { json, micheline, michelson } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views${query(explode({
    json,
    micheline,
    michelson
  }))}`, {
    ...opts
  }));
}
function contractsGetContractViewByName(address, name, { json, micheline, michelson } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/views/${encodeURIComponent(name)}${query(explode({
    json,
    micheline,
    michelson
  }))}`, {
    ...opts
  }));
}
function contractsBuildEntrypointParametersGet(address, name, { value } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build${query(explode({
    value
  }))}`, {
    ...opts
  }));
}
function contractsBuildEntrypointParametersPost(address, name, body, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/entrypoints/${encodeURIComponent(name)}/build`, oazapfts.json({
    ...opts,
    method: "POST",
    body
  })));
}
function contractsGetStorage(address, { level, path } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage${query(explode({
    level,
    path
  }))}`, {
    ...opts
  }));
}
function contractsGetStorageSchema(address, { level } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/contracts/${encodeURIComponent(address)}/storage/schema${query(explode({
    level
  }))}`, {
    ...opts
  }));
}
function contractsGetStorageHistory(address, { lastId, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/history${query(explode({
    lastId,
    limit
  }))}`, {
    ...opts
  }));
}
function contractsGetRawStorage(address, { level } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw${query(explode({
    level
  }))}`, {
    ...opts
  }));
}
function contractsGetRawStorageSchema(address, { level } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/schema${query(explode({
    level
  }))}`, {
    ...opts
  }));
}
function contractsGetRawStorageHistory(address, { lastId, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/storage/raw/history${query(explode({
    lastId,
    limit
  }))}`, {
    ...opts
  }));
}
function contractsGetBigMaps(address, { tags, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps${query(explode({
    limit,
    micheline,
    ...queryParamParsers_default.queryParameter("tags", tags),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetBigMapByName(address, name, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function contractsGetBigMapByNameKeys(address, name, { active, key, value, lastLevel, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys${query(explode({
    active,
    limit,
    micheline,
    ...queryParamParsers_default.jsonParameter("key", key),
    ...queryParamParsers_default.jsonParameter("value", value),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetKey(address, name, key, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function contractsGetKeyUpdates(address, name, key, { sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/keys/${encodeURIComponent(key)}/updates${query(explode({
    limit,
    micheline,
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetHistoricalKeys(address, name, level, { active, key, value, select, sort, offset, limit, micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}${query(explode({
    active,
    limit,
    micheline,
    ...queryParamParsers_default.jsonParameter("key", key),
    ...queryParamParsers_default.jsonParameter("value", value),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function contractsGetKey2(address, name, level, key, { micheline } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/${encodeURIComponent(address)}/bigmaps/${encodeURIComponent(name)}/historical_keys/${encodeURIComponent(level)}/${encodeURIComponent(key)}${query(explode({
    micheline
  }))}`, {
    ...opts
  }));
}
function cyclesGetCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/cycles/count", {
    ...opts
  }));
}
function cyclesGet({ snapshotIndex, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("snapshotIndex", snapshotIndex),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function cyclesGetByIndex(index, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/cycles/${encodeURIComponent(index)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function delegatesGet({ active, lastActivity, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("active", active),
    ...queryParamParsers_default.queryParameter("lastActivity", lastActivity),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function delegatesGetCount({ active } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/count${query(explode({
    ...queryParamParsers_default.queryParameter("active", active)
  }))}`, {
    ...opts
  }));
}
function delegatesGetByAddress(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/delegates/${encodeURIComponent(address)}`, {
    ...opts
  }));
}
function domainsGetCount({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/count${query(explode({
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("name", name),
    ...queryParamParsers_default.queryParameter("owner", owner),
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("reverse", reverse),
    ...queryParamParsers_default.queryParameter("expiration", expiration),
    ...queryParamParsers_default.jsonParameter("data", data),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime)
  }))}`, {
    ...opts
  }));
}
function domainsGet({ id, level, name, owner, address, reverse, expiration, data, firstLevel, firstTime, lastLevel, lastTime, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/domains${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("name", name),
    ...queryParamParsers_default.queryParameter("owner", owner),
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("reverse", reverse),
    ...queryParamParsers_default.queryParameter("expiration", expiration),
    ...queryParamParsers_default.jsonParameter("data", data),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function domainsGetByName(name, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/domains/${encodeURIComponent(name)}`, {
    ...opts
  }));
}
function eventsGetContractEventsCount({ id, level, timestamp, contract, codeHash, tag, payload, transactionId } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events/count${query(explode({
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("codeHash", codeHash),
    ...queryParamParsers_default.queryParameter("tag", tag),
    ...queryParamParsers_default.jsonParameter("payload", payload),
    ...queryParamParsers_default.queryParameter("transactionId", transactionId)
  }))}`, {
    ...opts
  }));
}
function eventsGetContractEvents({ id, level, timestamp, contract, codeHash, tag, payload, transactionId, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/contracts/events${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("codeHash", codeHash),
    ...queryParamParsers_default.queryParameter("tag", tag),
    ...queryParamParsers_default.jsonParameter("payload", payload),
    ...queryParamParsers_default.queryParameter("transactionId", transactionId),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function headGet(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/head", {
    ...opts
  }));
}
function helpersPostInject(body, { $async } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/helpers/inject${query(explode({
    async: $async
  }))}`, oazapfts.json({
    ...opts,
    method: "POST",
    body
  })));
}
function helpersPostRunScriptView(contract, name, body, opts) {
  return oazapfts.ok(oazapfts.fetchBlob(`/v1/helpers/view/${encodeURIComponent(contract)}/${encodeURIComponent(name)}`, oazapfts.json({
    ...opts,
    method: "POST",
    body
  })));
}
function operationsGetByHash(hash, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetByHashCounter(hash, counter, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetByHashCounterNonce(hash, counter, nonce, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetEndorsements({ delegate, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetEndorsementByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetEndorsementsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsements/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetPreendorsements({ delegate, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetPreendorsementByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetPreendorsementsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/preendorsements/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetBallots({ delegate, level, timestamp, epoch, period, proposal, vote, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("epoch", epoch),
    ...queryParamParsers_default.queryParameter("period", period),
    ...queryParamParsers_default.queryParameter("proposal", proposal),
    ...queryParamParsers_default.queryParameter("vote", vote),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetBallotByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetBallotsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/ballots/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetProposals({ delegate, level, timestamp, epoch, period, proposal, duplicated, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("epoch", epoch),
    ...queryParamParsers_default.queryParameter("period", period),
    ...queryParamParsers_default.queryParameter("proposal", proposal),
    ...queryParamParsers_default.queryParameter("duplicated", duplicated),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetProposalByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetProposalsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/proposals/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetActivations({ account, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("account", account),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetActivationByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetActivationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/activations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleBaking({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("accuser", accuser),
    ...queryParamParsers_default.queryParameter("offender", offender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleBakingByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleBakingCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_baking/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleEndorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("accuser", accuser),
    ...queryParamParsers_default.queryParameter("offender", offender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleEndorsingByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetDoubleEndorsingCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_endorsing/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoublePreendorsing({ anyof, accuser, offender, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("accuser", accuser),
    ...queryParamParsers_default.queryParameter("offender", offender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetDoublePreendorsingByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetDoublePreendorsingCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/double_preendorsing/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetNonceRevelations({ anyof, baker, sender, level, revealedCycle, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("revealedCycle", revealedCycle),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetNonceRevelationByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetNonceRevelationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/nonce_revelations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetVdfRevelations({ baker, level, cycle, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetVdfRevelationByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetVdfRevelationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/vdf_revelations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetDrainDelegateOps({ anyof, delegate, target, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("delegate", delegate),
    ...queryParamParsers_default.queryParameter("target", target),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetDrainDelegateByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetDrainDelegateOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/drain_delegate/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetDelegations({ anyof, initiator, sender, prevDelegate, newDelegate, level, timestamp, senderCodeHash, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("initiator", initiator),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("prevDelegate", prevDelegate),
    ...queryParamParsers_default.queryParameter("newDelegate", newDelegate),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("senderCodeHash", senderCodeHash),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetDelegationByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetDelegationStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetDelegationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/delegations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetOriginations({ anyof, initiator, sender, contractManager, contractDelegate, originatedContract, id, typeHash, codeHash, level, timestamp, senderCodeHash, anyCodeHash, status, select, sort, offset, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations${query(explode({
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("initiator", initiator),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("contractManager", contractManager),
    ...queryParamParsers_default.queryParameter("contractDelegate", contractDelegate),
    ...queryParamParsers_default.queryParameter("originatedContract", originatedContract),
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("typeHash", typeHash),
    ...queryParamParsers_default.queryParameter("codeHash", codeHash),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("senderCodeHash", senderCodeHash),
    ...queryParamParsers_default.queryParameter("anyCodeHash", anyCodeHash),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetOriginationByHash(hash, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetOriginationStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetOriginationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/originations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTransactions({ anyof, initiator, sender, target, amount, id, level, timestamp, senderCodeHash, targetCodeHash, codeHash, entrypoint, parameter, hasInternals, status, select, sort, offset, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions${query(explode({
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("initiator", initiator),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("target", target),
    ...queryParamParsers_default.queryParameter("amount", amount),
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("senderCodeHash", senderCodeHash),
    ...queryParamParsers_default.queryParameter("targetCodeHash", targetCodeHash),
    ...queryParamParsers_default.queryParameter("codeHash", codeHash),
    ...queryParamParsers_default.queryParameter("entrypoint", entrypoint),
    ...queryParamParsers_default.jsonParameter("parameter", parameter),
    ...queryParamParsers_default.queryParameter("hasInternals", hasInternals),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTransactionByHash(hash, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTransactionByHashCounter(hash, counter, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTransactionByHashCounterNonce(hash, counter, nonce, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/${encodeURIComponent(counter)}/${encodeURIComponent(nonce)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTransactionStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTransactionsCount({ anyof, initiator, sender, target, amount, level, timestamp, entrypoint, parameter, status } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transactions/count${query(explode({
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("initiator", initiator),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("target", target),
    ...queryParamParsers_default.queryParameter("amount", amount),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("entrypoint", entrypoint),
    ...queryParamParsers_default.jsonParameter("parameter", parameter),
    ...queryParamParsers_default.queryParameter("status", status)
  }))}`, {
    ...opts
  }));
}
function operationsGetReveals({ sender, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetRevealByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetRevealStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetRevealsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/reveals/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetRegisterConstants({ sender, address, level, timestamp, status, select, sort, offset, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants${query(explode({
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("address", address),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetRegisterConstantByHash(hash, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetRegisterConstantStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetRegisterConstantsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/register_constants/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetSetDepositsLimits({ sender, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetSetDepositsLimitByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetSetDepositsLimitStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetSetDepositsLimitsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/set_deposits_limits/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTransferTicketOps({ anyof, sender, target, ticketer, level, timestamp, status, select, sort, offset, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket${query(explode({
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("target", target),
    ...queryParamParsers_default.queryParameter("ticketer", ticketer),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTransferTicketOpsByHash(hash, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTransferTicketStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTransferTicketOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/transfer_ticket/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupCommitOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupCommitOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupCommitStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupCommitOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_commit/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupDispatchTicketsOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupDispatchTicketsOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupDispatchTicketsStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupDispatchTicketsOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_dispatch_tickets/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupFinalizeCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupFinalizeCommitmentOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupFinalizeCommitmentStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupFinalizeCommitmentOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_finalize_commitment/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupOriginationOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupOriginationOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupOriginationStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupOriginationOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_origination/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRejectionOps({ anyof, sender, committer, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("committer", committer),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRejectionOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRejectionStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupRejectionOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_rejection/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRemoveCommitmentOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRemoveCommitmentOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupRemoveCommitmentStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupRemoveCommitmentOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_remove_commitment/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupReturnBondOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupReturnBondOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupReturnBondStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupReturnBondOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_return_bond/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupSubmitBatchOps({ sender, rollup, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("rollup", rollup),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupSubmitBatchOpsByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetTxRollupSubmitBatchStatus(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/${encodeURIComponent(hash)}/status`, {
    ...opts
  }));
}
function operationsGetTxRollupSubmitBatchOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/tx_rollup_submit_batch/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetIncreasePaidStorageOps({ sender, contract, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetIncreasePaidStorageByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetIncreasePaidStorageCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/increase_paid_storage/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetUpdateConsensusKeyOps({ sender, activationCycle, level, timestamp, status, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("sender", sender),
    ...queryParamParsers_default.queryParameter("activationCycle", activationCycle),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetUpdateConsensusKeyByHash(hash, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/${encodeURIComponent(hash)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetUpdateConsensusKeyOpsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/update_consensus_key/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetMigrations({ account, kind, balanceChange, id, level, timestamp, select, sort, offset, limit, micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations${query(explode({
    limit,
    micheline,
    quote,
    ...queryParamParsers_default.queryParameter("account", account),
    ...queryParamParsers_default.queryParameter("kind", kind),
    ...queryParamParsers_default.queryParameter("balanceChange", balanceChange),
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetMigrationById(id, { micheline, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/${encodeURIComponent(id)}${query(explode({
    micheline,
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetMigrationsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/migrations/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetRevelationPenalties({ baker, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetRevelationPenaltyById(id, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/${encodeURIComponent(id)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetRevelationPenaltiesCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/revelation_penalties/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetBaking({ baker, anyof, proposer, producer, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("proposer", proposer),
    ...queryParamParsers_default.queryParameter("producer", producer),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetBakingById(id, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/${encodeURIComponent(id)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetBakingCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/baking/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function operationsGetEndorsingRewards({ baker, level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function operationsGetEndorsingRewardById(id, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/${encodeURIComponent(id)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function operationsGetEndorsingRewardsCount({ level, timestamp } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/operations/endorsing_rewards/count${query(explode({
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp)
  }))}`, {
    ...opts
  }));
}
function protocolsGetCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/protocols/count", {
    ...opts
  }));
}
function protocolsGet({ sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function protocolsGetCurrent(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/protocols/current", {
    ...opts
  }));
}
function protocolsGetByCode(code, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(code)}`, {
    ...opts
  }));
}
function protocolsGetByHash(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/${encodeURIComponent(hash)}`, {
    ...opts
  }));
}
function protocolsGetByCycle(cycle, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/protocols/cycles/${encodeURIComponent(cycle)}`, {
    ...opts
  }));
}
function quotesGetCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/quotes/count", {
    ...opts
  }));
}
function quotesGetLast(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/quotes/last", {
    ...opts
  }));
}
function quotesGet({ level, timestamp, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/quotes${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function rewardsGetBakerRewardsCount(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/count`, {
    ...opts
  }));
}
function rewardsGetBakerRewards(address, { cycle, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function rewardsGetBakerRewardsByCycle(address, cycle, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/bakers/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function rewardsGetDelegatorRewardsCount(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/count`, {
    ...opts
  }));
}
function rewardsGetDelegatorRewards(address, { cycle, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function rewardsGetDelegatorRewardsByCycle(address, cycle, { quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/delegators/${encodeURIComponent(address)}/${encodeURIComponent(cycle)}${query(explode({
    quote
  }))}`, {
    ...opts
  }));
}
function rewardsGetRewardSplit(baker, cycle, { offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}${query(explode({
    offset,
    limit
  }))}`, {
    ...opts
  }));
}
function rewardsGetRewardSplitDelegator(baker, cycle, delegator, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rewards/split/${encodeURIComponent(baker)}/${encodeURIComponent(cycle)}/${encodeURIComponent(delegator)}`, {
    ...opts
  }));
}
function rightsGetCount({ $type, baker, cycle, level, slots, round, priority, status } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rights/count${query(explode({
    ...queryParamParsers_default.queryParameter("type", $type),
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("slots", slots),
    ...queryParamParsers_default.queryParameter("round", round),
    ...queryParamParsers_default.queryParameter("priority", priority),
    ...queryParamParsers_default.queryParameter("status", status)
  }))}`, {
    ...opts
  }));
}
function rightsGet({ $type, baker, cycle, level, slots, round, priority, status, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/rights${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("type", $type),
    ...queryParamParsers_default.queryParameter("baker", baker),
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("slots", slots),
    ...queryParamParsers_default.queryParameter("round", round),
    ...queryParamParsers_default.queryParameter("priority", priority),
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function softwareGet({ select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/software${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function softwareGetCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/software/count", {
    ...opts
  }));
}
function statisticsGet({ level, timestamp, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function statisticsGetDaily({ date, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/daily${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("date", date),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function statisticsGetCyclesAll({ cycle, select, sort, offset, limit, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/cyclic${query(explode({
    limit,
    quote,
    ...queryParamParsers_default.queryParameter("cycle", cycle),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function statisticsGetCycles({ select, quote } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/statistics/current${query(explode({
    quote,
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokensCount({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/count${query(explode({
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("tokenId", tokenId),
    ...queryParamParsers_default.queryParameter("standard", standard),
    ...queryParamParsers_default.queryParameter("firstMinter", firstMinter),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime),
    ...queryParamParsers_default.jsonParameter("metadata", metadata),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokens({ id, contract, tokenId, standard, firstMinter, firstLevel, firstTime, lastLevel, lastTime, metadata, indexedAt, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("contract", contract),
    ...queryParamParsers_default.queryParameter("tokenId", tokenId),
    ...queryParamParsers_default.queryParameter("standard", standard),
    ...queryParamParsers_default.queryParameter("firstMinter", firstMinter),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime),
    ...queryParamParsers_default.jsonParameter("metadata", metadata),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokenBalancesCount({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances/count${query(explode({
    "token.HasFilters": tokenHasFilters,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("account", account),
    ...queryParamParsers_default.queryParameter("token.id", tokenId),
    ...queryParamParsers_default.queryParameter("token.contract", tokenContract),
    ...queryParamParsers_default.queryParameter("token.tokenId", tokenTokenId),
    ...queryParamParsers_default.queryParameter("token.standard", tokenStandard),
    ...queryParamParsers_default.jsonParameter("token.metadata", tokenMetadata),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokenBalances({ id, account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, firstLevel, firstTime, lastLevel, lastTime, indexedAt, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/balances${query(explode({
    "token.HasFilters": tokenHasFilters,
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("account", account),
    ...queryParamParsers_default.queryParameter("token.id", tokenId),
    ...queryParamParsers_default.queryParameter("token.contract", tokenContract),
    ...queryParamParsers_default.queryParameter("token.tokenId", tokenTokenId),
    ...queryParamParsers_default.queryParameter("token.standard", tokenStandard),
    ...queryParamParsers_default.jsonParameter("token.metadata", tokenMetadata),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("firstLevel", firstLevel),
    ...queryParamParsers_default.queryParameter("firstTime", firstTime),
    ...queryParamParsers_default.queryParameter("lastLevel", lastLevel),
    ...queryParamParsers_default.queryParameter("lastTime", lastTime),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokenTransfersCount({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers/count${query(explode({
    "token.HasFilters": tokenHasFilters,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("token.id", tokenId),
    ...queryParamParsers_default.queryParameter("token.contract", tokenContract),
    ...queryParamParsers_default.queryParameter("token.tokenId", tokenTokenId),
    ...queryParamParsers_default.queryParameter("token.standard", tokenStandard),
    ...queryParamParsers_default.jsonParameter("token.metadata", tokenMetadata),
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("from", $from),
    ...queryParamParsers_default.queryParameter("to", to),
    ...queryParamParsers_default.queryParameter("amount", amount),
    ...queryParamParsers_default.queryParameter("transactionId", transactionId),
    ...queryParamParsers_default.queryParameter("originationId", originationId),
    ...queryParamParsers_default.queryParameter("migrationId", migrationId),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokenTransfers({ id, level, timestamp, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, anyof, $from, to, amount, transactionId, originationId, migrationId, indexedAt, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/transfers${query(explode({
    "token.HasFilters": tokenHasFilters,
    limit,
    ...queryParamParsers_default.queryParameter("id", id),
    ...queryParamParsers_default.queryParameter("level", level),
    ...queryParamParsers_default.queryParameter("timestamp", timestamp),
    ...queryParamParsers_default.queryParameter("token.id", tokenId),
    ...queryParamParsers_default.queryParameter("token.contract", tokenContract),
    ...queryParamParsers_default.queryParameter("token.tokenId", tokenTokenId),
    ...queryParamParsers_default.queryParameter("token.standard", tokenStandard),
    ...queryParamParsers_default.jsonParameter("token.metadata", tokenMetadata),
    ...queryParamParsers_default.anyofParameter("anyof", anyof),
    ...queryParamParsers_default.queryParameter("from", $from),
    ...queryParamParsers_default.queryParameter("to", to),
    ...queryParamParsers_default.queryParameter("amount", amount),
    ...queryParamParsers_default.queryParameter("transactionId", transactionId),
    ...queryParamParsers_default.queryParameter("originationId", originationId),
    ...queryParamParsers_default.queryParameter("migrationId", migrationId),
    ...queryParamParsers_default.queryParameter("indexedAt", indexedAt),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function tokensGetTokenBalances2(level, { account, tokenId, tokenContract, tokenTokenId, tokenStandard, tokenMetadata, tokenHasFilters, balance, sort, offset, limit, select } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens/historical_balances/${encodeURIComponent(level)}${query(explode({
    "token.HasFilters": tokenHasFilters,
    limit,
    ...queryParamParsers_default.queryParameter("account", account),
    ...queryParamParsers_default.queryParameter("token.id", tokenId),
    ...queryParamParsers_default.queryParameter("token.contract", tokenContract),
    ...queryParamParsers_default.queryParameter("token.tokenId", tokenTokenId),
    ...queryParamParsers_default.queryParameter("token.standard", tokenStandard),
    ...queryParamParsers_default.jsonParameter("token.metadata", tokenMetadata),
    ...queryParamParsers_default.queryParameter("balance", balance),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset),
    ...queryParamParsers_default.queryParameter("select", select)
  }))}`, {
    ...opts
  }));
}
function votingGetProposalsCount(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/voting/proposals/count", {
    ...opts
  }));
}
function votingGetProposals({ hash, epoch, select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("hash", hash),
    ...queryParamParsers_default.queryParameter("epoch", epoch),
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function votingGetProposalByHash(hash, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/proposals/${encodeURIComponent(hash)}`, {
    ...opts
  }));
}
function votingGetPeriods({ select, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("select", select),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function votingGetPeriod(index, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}`, {
    ...opts
  }));
}
function votingGetCurrentPeriod(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/voting/periods/current", {
    ...opts
  }));
}
function votingGetPeriodVoters(index, { status, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function votingGetPeriodVoter(index, address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/${encodeURIComponent(index)}/voters/${encodeURIComponent(address)}`, {
    ...opts
  }));
}
function votingGetPeriodVoters2({ status, sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("status", status),
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function votingGetPeriodVoter2(address, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/periods/current/voters/${encodeURIComponent(address)}`, {
    ...opts
  }));
}
function votingGetEpochs({ sort, offset, limit } = {}, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs${query(explode({
    limit,
    ...queryParamParsers_default.queryParameter("sort", sort),
    ...queryParamParsers_default.queryParameter("offset", offset)
  }))}`, {
    ...opts
  }));
}
function votingGetEpoch(index, opts) {
  return oazapfts.ok(oazapfts.fetchJson(`/v1/voting/epochs/${encodeURIComponent(index)}`, {
    ...opts
  }));
}
function votingGetCurrentEpoch(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/voting/epochs/current", {
    ...opts
  }));
}
function votingGetLatestVoting(opts) {
  return oazapfts.ok(oazapfts.fetchJson("/v1/voting/epochs/latest_voting", {
    ...opts
  }));
}
export {
  accountsGet,
  accountsGetBalance,
  accountsGetBalanceAtDate,
  accountsGetBalanceAtLevel,
  accountsGetBalanceHistory,
  accountsGetBalanceReport,
  accountsGetByAddress,
  accountsGetContracts,
  accountsGetCount,
  accountsGetCounter,
  accountsGetDelegators,
  accountsGetOperations,
  bigMapsGetBigMapById,
  bigMapsGetBigMapType,
  bigMapsGetBigMapUpdates,
  bigMapsGetBigMaps,
  bigMapsGetBigMapsCount,
  bigMapsGetHistoricalKeys,
  bigMapsGetKey,
  bigMapsGetKey2,
  bigMapsGetKeyUpdates,
  bigMapsGetKeys,
  blocksGet,
  blocksGetByDate,
  blocksGetByDate2,
  blocksGetByHash,
  blocksGetByLevel,
  blocksGetByLevel2,
  blocksGetCount,
  commitmentsGet,
  commitmentsGetAll,
  commitmentsGetCount,
  constantsGet,
  constantsGetByAddress,
  constantsGetCount,
  contractsBuildEntrypointParametersGet,
  contractsBuildEntrypointParametersPost,
  contractsGet,
  contractsGetBigMapByName,
  contractsGetBigMapByNameKeys,
  contractsGetBigMaps,
  contractsGetByAddress,
  contractsGetCode,
  contractsGetContractViewByName,
  contractsGetContractViews,
  contractsGetCount,
  contractsGetEntrypointByName,
  contractsGetEntrypoints,
  contractsGetHistoricalKeys,
  contractsGetInterface,
  contractsGetKey,
  contractsGetKey2,
  contractsGetKeyUpdates,
  contractsGetRawStorage,
  contractsGetRawStorageHistory,
  contractsGetRawStorageSchema,
  contractsGetSame,
  contractsGetSimilar,
  contractsGetStorage,
  contractsGetStorageHistory,
  contractsGetStorageSchema,
  cyclesGet,
  cyclesGetByIndex,
  cyclesGetCount,
  defaults,
  delegatesGet,
  delegatesGetByAddress,
  delegatesGetCount,
  domainsGet,
  domainsGetByName,
  domainsGetCount,
  eventsGetContractEvents,
  eventsGetContractEventsCount,
  headGet,
  helpersPostInject,
  helpersPostRunScriptView,
  operationsGetActivationByHash,
  operationsGetActivations,
  operationsGetActivationsCount,
  operationsGetBaking,
  operationsGetBakingById,
  operationsGetBakingCount,
  operationsGetBallotByHash,
  operationsGetBallots,
  operationsGetBallotsCount,
  operationsGetByHash,
  operationsGetByHashCounter,
  operationsGetByHashCounterNonce,
  operationsGetDelegationByHash,
  operationsGetDelegationStatus,
  operationsGetDelegations,
  operationsGetDelegationsCount,
  operationsGetDoubleBaking,
  operationsGetDoubleBakingByHash,
  operationsGetDoubleBakingCount,
  operationsGetDoubleEndorsing,
  operationsGetDoubleEndorsingByHash,
  operationsGetDoubleEndorsingCount,
  operationsGetDoublePreendorsing,
  operationsGetDoublePreendorsingByHash,
  operationsGetDoublePreendorsingCount,
  operationsGetDrainDelegateByHash,
  operationsGetDrainDelegateOps,
  operationsGetDrainDelegateOpsCount,
  operationsGetEndorsementByHash,
  operationsGetEndorsements,
  operationsGetEndorsementsCount,
  operationsGetEndorsingRewardById,
  operationsGetEndorsingRewards,
  operationsGetEndorsingRewardsCount,
  operationsGetIncreasePaidStorageByHash,
  operationsGetIncreasePaidStorageCount,
  operationsGetIncreasePaidStorageOps,
  operationsGetMigrationById,
  operationsGetMigrations,
  operationsGetMigrationsCount,
  operationsGetNonceRevelationByHash,
  operationsGetNonceRevelations,
  operationsGetNonceRevelationsCount,
  operationsGetOriginationByHash,
  operationsGetOriginationStatus,
  operationsGetOriginations,
  operationsGetOriginationsCount,
  operationsGetPreendorsementByHash,
  operationsGetPreendorsements,
  operationsGetPreendorsementsCount,
  operationsGetProposalByHash,
  operationsGetProposals,
  operationsGetProposalsCount,
  operationsGetRegisterConstantByHash,
  operationsGetRegisterConstantStatus,
  operationsGetRegisterConstants,
  operationsGetRegisterConstantsCount,
  operationsGetRevealByHash,
  operationsGetRevealStatus,
  operationsGetReveals,
  operationsGetRevealsCount,
  operationsGetRevelationPenalties,
  operationsGetRevelationPenaltiesCount,
  operationsGetRevelationPenaltyById,
  operationsGetSetDepositsLimitByHash,
  operationsGetSetDepositsLimitStatus,
  operationsGetSetDepositsLimits,
  operationsGetSetDepositsLimitsCount,
  operationsGetStatus,
  operationsGetTransactionByHash,
  operationsGetTransactionByHashCounter,
  operationsGetTransactionByHashCounterNonce,
  operationsGetTransactionStatus,
  operationsGetTransactions,
  operationsGetTransactionsCount,
  operationsGetTransferTicketOps,
  operationsGetTransferTicketOpsByHash,
  operationsGetTransferTicketOpsCount,
  operationsGetTransferTicketStatus,
  operationsGetTxRollupCommitOps,
  operationsGetTxRollupCommitOpsByHash,
  operationsGetTxRollupCommitOpsCount,
  operationsGetTxRollupCommitStatus,
  operationsGetTxRollupDispatchTicketsOps,
  operationsGetTxRollupDispatchTicketsOpsByHash,
  operationsGetTxRollupDispatchTicketsOpsCount,
  operationsGetTxRollupDispatchTicketsStatus,
  operationsGetTxRollupFinalizeCommitmentOps,
  operationsGetTxRollupFinalizeCommitmentOpsByHash,
  operationsGetTxRollupFinalizeCommitmentOpsCount,
  operationsGetTxRollupFinalizeCommitmentStatus,
  operationsGetTxRollupOriginationOps,
  operationsGetTxRollupOriginationOpsByHash,
  operationsGetTxRollupOriginationOpsCount,
  operationsGetTxRollupOriginationStatus,
  operationsGetTxRollupRejectionOps,
  operationsGetTxRollupRejectionOpsByHash,
  operationsGetTxRollupRejectionOpsCount,
  operationsGetTxRollupRejectionStatus,
  operationsGetTxRollupRemoveCommitmentOps,
  operationsGetTxRollupRemoveCommitmentOpsByHash,
  operationsGetTxRollupRemoveCommitmentOpsCount,
  operationsGetTxRollupRemoveCommitmentStatus,
  operationsGetTxRollupReturnBondOps,
  operationsGetTxRollupReturnBondOpsByHash,
  operationsGetTxRollupReturnBondOpsCount,
  operationsGetTxRollupReturnBondStatus,
  operationsGetTxRollupSubmitBatchOps,
  operationsGetTxRollupSubmitBatchOpsByHash,
  operationsGetTxRollupSubmitBatchOpsCount,
  operationsGetTxRollupSubmitBatchStatus,
  operationsGetUpdateConsensusKeyByHash,
  operationsGetUpdateConsensusKeyOps,
  operationsGetUpdateConsensusKeyOpsCount,
  operationsGetVdfRevelationByHash,
  operationsGetVdfRevelations,
  operationsGetVdfRevelationsCount,
  protocolsGet,
  protocolsGetByCode,
  protocolsGetByCycle,
  protocolsGetByHash,
  protocolsGetCount,
  protocolsGetCurrent,
  quotesGet,
  quotesGetCount,
  quotesGetLast,
  rewardsGetBakerRewards,
  rewardsGetBakerRewardsByCycle,
  rewardsGetBakerRewardsCount,
  rewardsGetDelegatorRewards,
  rewardsGetDelegatorRewardsByCycle,
  rewardsGetDelegatorRewardsCount,
  rewardsGetRewardSplit,
  rewardsGetRewardSplitDelegator,
  rightsGet,
  rightsGetCount,
  servers,
  softwareGet,
  softwareGetCount,
  statisticsGet,
  statisticsGetCycles,
  statisticsGetCyclesAll,
  statisticsGetDaily,
  tokensGetTokenBalances,
  tokensGetTokenBalances2,
  tokensGetTokenBalancesCount,
  tokensGetTokenTransfers,
  tokensGetTokenTransfersCount,
  tokensGetTokens,
  tokensGetTokensCount,
  votingGetCurrentEpoch,
  votingGetCurrentPeriod,
  votingGetEpoch,
  votingGetEpochs,
  votingGetLatestVoting,
  votingGetPeriod,
  votingGetPeriodVoter,
  votingGetPeriodVoter2,
  votingGetPeriodVoters,
  votingGetPeriodVoters2,
  votingGetPeriods,
  votingGetProposalByHash,
  votingGetProposals,
  votingGetProposalsCount
};
//# sourceMappingURL=@tzkt_sdk-api.js.map
