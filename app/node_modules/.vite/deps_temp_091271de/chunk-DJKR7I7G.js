import {
  BigNumber,
  bignumber_default
} from "./chunk-CJ47JOF3.js";
import {
  require_blake2b,
  require_bs58check,
  require_crypto,
  require_ed25519,
  require_inherits_browser
} from "./chunk-OGRRQUQS.js";
import {
  require_buffer
} from "./chunk-TMQFY2KS.js";
import {
  DeprecationError,
  InvalidAddressError,
  InvalidAmountError,
  InvalidBlockHashError,
  InvalidChainIdError,
  InvalidContractAddressError,
  InvalidHexStringError,
  InvalidKeyHashError,
  InvalidOperationHashError,
  InvalidOperationKindError,
  InvalidPublicKeyError,
  InvalidViewParameterError,
  NetworkError,
  ParameterValidationError,
  Parser,
  PublicKeyNotFoundError,
  RpcError,
  TaquitoError,
  TezosToolkitConfigError,
  UnsupportedActionError,
  packDataBytes
} from "./chunk-VKRPOTFK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-FOWDQQBS.js";

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind2(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind2 = require_bind();
    var toString = Object.prototype.toString;
    function isArray4(val) {
      return Array.isArray(val);
    }
    function isUndefined2(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData2(val) {
      return toString.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString2(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction2(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction2(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv2() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray4(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge3() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge3(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge3({}, val);
        } else if (isArray4(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind2(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray: isArray4,
      isArrayBuffer,
      isBuffer,
      isFormData: isFormData2,
      isArrayBufferView,
      isString: isString2,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined: isUndefined2,
      isDate,
      isFile,
      isBlob,
      isFunction: isFunction2,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv2,
      forEach,
      merge: merge3,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL2(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError2(error, config2, code2, request, response) {
      error.config = config2;
      if (code2) {
        error.code = code2;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError2 = require_enhanceError();
    module.exports = function createError2(message, config2, code2, request, response) {
      var error = new Error(message);
      return enhanceError2(error, config2, code2, request, response);
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError2 = require_createError();
    module.exports = function settle2(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError2(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath2(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle2 = require_settle();
    var cookies = require_cookies();
    var buildURL2 = require_buildURL();
    var buildFullPath2 = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError2 = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config2.data;
        var requestHeaders = config2.headers;
        var responseType = config2.responseType;
        var onCanceled;
        function done() {
          if (config2.cancelToken) {
            config2.cancelToken.unsubscribe(onCanceled);
          }
          if (config2.signal) {
            config2.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config2.auth) {
          var username = config2.auth.username || "";
          var password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath2(config2.baseURL, config2.url);
        request.open(config2.method.toUpperCase(), buildURL2(fullPath, config2.params, config2.paramsSerializer), true);
        request.timeout = config2.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle2(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError2("Request aborted", config2, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError2("Network Error", config2, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config2.transitional || defaults.transitional;
          if (config2.timeoutErrorMessage) {
            timeoutErrorMessage = config2.timeoutErrorMessage;
          }
          reject(createError2(
            timeoutErrorMessage,
            config2,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName ? cookies.read(config2.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config2.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config2.withCredentials)) {
          request.withCredentials = !!config2.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config2.responseType;
        }
        if (typeof config2.onDownloadProgress === "function") {
          request.addEventListener("progress", config2.onDownloadProgress);
        }
        if (typeof config2.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config2.onUploadProgress);
        }
        if (config2.cancelToken || config2.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
          if (config2.signal) {
            config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError2 = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter2;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter2 = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter2 = require_xhr();
      }
      return adapter2;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError2(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context2 = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context2, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config2) {
      if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested();
      }
      if (config2.signal && config2.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config2) {
      throwIfCancellationRequested(config2);
      config2.headers = config2.headers || {};
      config2.data = transformData.call(
        config2,
        config2.data,
        config2.headers,
        config2.transformRequest
      );
      config2.headers = utils.merge(
        config2.headers.common || {},
        config2.headers[config2.method] || {},
        config2.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config2.headers[method];
        }
      );
      var adapter2 = config2.adapter || defaults.adapter;
      return adapter2(config2).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config2);
        response.data = transformData.call(
          config2,
          response.data,
          response.headers,
          config2.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config2);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config2,
              reason.response.data,
              reason.response.headers,
              config2.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config3 = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap2 = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge3 = mergeMap2[prop] || mergeDeepProperties;
        var configValue = merge3(prop);
        utils.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config3[prop] = configValue);
      });
      return config3;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.26.0"
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION2 = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION2 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL2 = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config2) {
      if (typeof configOrUrl === "string") {
        config2 = config2 || {};
        config2.url = configOrUrl;
      } else {
        config2 = configOrUrl || {};
      }
      config2 = mergeConfig(this.defaults, config2);
      if (config2.method) {
        config2.method = config2.method.toLowerCase();
      } else if (this.defaults.method) {
        config2.method = this.defaults.method.toLowerCase();
      } else {
        config2.method = "get";
      }
      var transitional = config2.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config2);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config2;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config2) {
      config2 = mergeConfig(this.defaults, config2);
      return buildURL2(config2.url, config2.params, config2.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          url,
          data: (config2 || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind2 = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context2 = new Axios(defaultConfig);
      var instance = bind2(Axios.prototype.request, context2);
      utils.extend(instance, Axios.prototype, context2);
      utils.extend(instance, context2);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module.exports = axios2;
    module.exports.default = axios2;
  }
});

// node_modules/@taquito/http-utils/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@taquito/http-utils/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex(bytes) {
      return Array.prototype.map.call(bytes, function(n) {
        return (n < 16 ? "0" : "") + n.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size) {
      let msg = "\n" + label + " = ";
      for (let i = 0; i < arr.length; i += 2) {
        if (size === 32) {
          msg += uint32ToHex(arr[i]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
        } else if (size === 64) {
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
          msg += uint32ToHex(arr[i]).toUpperCase();
        } else
          throw new Error("Invalid size " + size);
        if (i % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N, M) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N);
      for (let i = 0; i < N; i++) {
        input[i] = i % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i = 0; i < M; i++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N / (1 << 20) / (ms / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b2 = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v2, a, b) {
      const o0 = v2[a] + v2[b];
      let o1 = v2[a + 1] + v2[b + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a] = o0;
      v2[a + 1] = o1;
    }
    function ADD64AC(v2, a, b0, b1) {
      let o0 = v2[a] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v2[a + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a] = o0;
      v2[a + 1] = o1;
    }
    function B2B_GET32(arr, i) {
      return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
    }
    function B2B_G(a, b, c, d, ix, iy) {
      const x0 = m[ix];
      const x1 = m[ix + 1];
      const y0 = m[iy];
      const y1 = m[iy + 1];
      ADD64AA(v, a, b);
      ADD64AC(v, a, x0, x1);
      let xor0 = v[d] ^ v[a];
      let xor1 = v[d + 1] ^ v[a + 1];
      v[d] = xor1;
      v[d + 1] = xor0;
      ADD64AA(v, c, d);
      xor0 = v[b] ^ v[c];
      xor1 = v[b + 1] ^ v[c + 1];
      v[b] = xor0 >>> 24 ^ xor1 << 8;
      v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v, a, b);
      ADD64AC(v, a, y0, y1);
      xor0 = v[d] ^ v[a];
      xor1 = v[d + 1] ^ v[a + 1];
      v[d] = xor0 >>> 16 ^ xor1 << 16;
      v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v, c, d);
      xor0 = v[b] ^ v[c];
      xor1 = v[b + 1] ^ v[c + 1];
      v[b] = xor1 >>> 31 ^ xor0 << 1;
      v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x) {
        return x * 2;
      })
    );
    var v = new Uint32Array(32);
    var m = new Uint32Array(32);
    function blake2bCompress(ctx, last3) {
      let i = 0;
      for (i = 0; i < 16; i++) {
        v[i] = ctx.h[i];
        v[i + 16] = BLAKE2B_IV32[i];
      }
      v[24] = v[24] ^ ctx.t;
      v[25] = v[25] ^ ctx.t / 4294967296;
      if (last3) {
        v[28] = ~v[28];
        v[29] = ~v[29];
      }
      for (i = 0; i < 32; i++) {
        m[i] = B2B_GET32(ctx.b, 4 * i);
      }
      for (i = 0; i < 12; i++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
      }
      for (i = 0; i < 16; i++) {
        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key)
        parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt)
        parameterBlock.set(salt, 32);
      if (personal)
        parameterBlock.set(personal, 48);
      for (let i = 0; i < 16; i++) {
        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v2, i) {
      return v2[i] ^ v2[i + 1] << 8 ^ v2[i + 2] << 16 ^ v2[i + 3] << 24;
    }
    function B2S_G(a, b, c, d, x, y) {
      v[a] = v[a] + v[b] + x;
      v[d] = ROTR32(v[d] ^ v[a], 16);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 12);
      v[a] = v[a] + v[b] + y;
      v[d] = ROTR32(v[d] ^ v[a], 8);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 7);
    }
    function ROTR32(x, y) {
      return x >>> y ^ x << 32 - y;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v = new Uint32Array(16);
    var m = new Uint32Array(16);
    function blake2sCompress(ctx, last3) {
      let i = 0;
      for (i = 0; i < 8; i++) {
        v[i] = ctx.h[i];
        v[i + 8] = BLAKE2S_IV[i];
      }
      v[12] ^= ctx.t;
      v[13] ^= ctx.t / 4294967296;
      if (last3) {
        v[14] = ~v[14];
      }
      for (i = 0; i < 16; i++) {
        m[i] = B2S_GET32(ctx.b, 4 * i);
      }
      for (i = 0; i < 10; i++) {
        B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
      }
      for (i = 0; i < 8; i++) {
        ctx.h[i] ^= v[i] ^ v[i + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b2();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.5.4",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// browser-external:buffer
var require_buffer2 = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer3;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer3 = window.Buffer;
        } else {
          Buffer3 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min2(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer3 !== "undefined");
        return this.toArrayLike(Buffer3, endian, length);
      };
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
    "use strict";
    var utils = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray2;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  }
});

// node_modules/elliptic/lib/elliptic/utils.js
var require_utils3 = __commonJS({
  "node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var utils = exports;
    var BN = require_bn();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils2();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/brorand/index.js
var require_brorand = __commonJS({
  "node_modules/brorand/index.js"(exports, module) {
    var r;
    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate2(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto = require_crypto();
        if (typeof crypto.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }
    var crypto;
  }
});

// node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max2 = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max2 = Math.max(naf[a].length, max2);
          max2 = Math.max(naf[b].length, max2);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max2 = Math.max(jsf[0].length, max2);
        naf[a] = new Array(max2);
        naf[b] = new Array(max2);
        for (j = 0; j < max2; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max2; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max2 = (1 << wnd) - 1;
      var dbl = max2 === 1 ? null : this.dbl();
      for (var i = 1; i < max2; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils3();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils4 = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad2() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function Hmac(hash2, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash2, key, enc);
      this.Hash = hash2;
      this.blockSize = hash2.blockSize / 8;
      this.outSize = hash2.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
      for (i = 0; i < key.length; i++)
        key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++)
        key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    var hash2 = exports;
    hash2.utils = require_utils4();
    hash2.common = require_common();
    hash2.sha = require_sha();
    hash2.ripemd = require_ripemd();
    hash2.hmac = require_hmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  }
});

// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var curves = exports;
    var hash2 = require_hash();
    var curve = require_curve();
    var utils = require_utils3();
    var assert = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
    "use strict";
    var hash2 = require_hash();
    var utils = require_utils2();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash2.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate2(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify2(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils3();
    var curves = require_curves();
    var rand = require_brorand();
    var assert = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify2(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash2.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify2(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var hash2 = require_hash();
    var curves = require_curves();
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify2(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash3.update(arguments[i]);
      return utils.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var elliptic2 = exports;
    elliptic2.version = require_package().version;
    elliptic2.utils = require_utils3();
    elliptic2.rand = require_brorand();
    elliptic2.curve = require_curve();
    elliptic2.curves = require_curves();
    elliptic2.ec = require_ec();
    elliptic2.eddsa = require_eddsa();
  }
});

// node_modules/typedarray-to-buffer/index.js
var require_typedarray_to_buffer = __commonJS({
  "node_modules/typedarray-to-buffer/index.js"(exports, module) {
    module.exports = function typedarrayToBuffer(arr) {
      return ArrayBuffer.isView(arr) ? Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength) : Buffer.from(arr);
    };
  }
});

// node_modules/fast-json-stable-stringify/index.js
var require_fast_json_stable_stringify = __commonJS({
  "node_modules/fast-json-stable-stringify/index.js"(exports, module) {
    "use strict";
    module.exports = function(data, opts) {
      if (!opts)
        opts = {};
      if (typeof opts === "function")
        opts = { cmp: opts };
      var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
      var cmp = opts.cmp && function(f) {
        return function(node) {
          return function(a, b) {
            var aobj = { key: a, value: node[a] };
            var bobj = { key: b, value: node[b] };
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);
      var seen = [];
      return function stringify2(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        if (node === void 0)
          return;
        if (typeof node == "number")
          return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object")
          return JSON.stringify(node);
        var i, out;
        if (Array.isArray(node)) {
          out = "[";
          for (i = 0; i < node.length; i++) {
            if (i)
              out += ",";
            out += stringify2(node[i]) || "null";
          }
          return out + "]";
        }
        if (node === null)
          return "null";
        if (seen.indexOf(node) !== -1) {
          if (cycles)
            return JSON.stringify("__cycle__");
          throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = "";
        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = stringify2(node[key]);
          if (!value)
            continue;
          if (out)
            out += ",";
          out += JSON.stringify(key) + ":" + value;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
      }(data);
    };
  }
});

// node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js
var import_axios = __toESM(require_axios2());
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var settle = require_settle();
var buildURL = require_buildURL();
var buildFullPath = require_buildFullPath();
var { isUndefined, isStandardBrowserEnv, isFormData } = require_utils();
function fetchAdapter(config2) {
  return __awaiter(this, void 0, void 0, function* () {
    const request = createRequest(config2);
    const promiseChain = [getResponse(request, config2)];
    if (config2.timeout && config2.timeout > 0) {
      promiseChain.push(new Promise((res) => {
        setTimeout(() => {
          const message = config2.timeoutErrorMessage ? config2.timeoutErrorMessage : "timeout of " + config2.timeout + "ms exceeded";
          res(createError(message, config2, "ECONNABORTED", request));
        }, config2.timeout);
      }));
    }
    const data = yield Promise.race(promiseChain);
    return new Promise((resolve, reject) => {
      if (data instanceof Error) {
        reject(data);
      } else {
        const c = config2;
        "settle" in c && Object.prototype.toString.call(c.settle) === "[object Function]" ? c.settle(resolve, reject, data) : settle(resolve, reject, data);
      }
    });
  });
}
function getResponse(request, config2) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      const stageOne = yield fetch(request);
      let response = {
        ok: stageOne.ok,
        status: stageOne.status,
        statusText: stageOne.statusText,
        headers: new Headers(stageOne.headers),
        config: config2,
        request
      };
      if (stageOne.status >= 400) {
        return createError("Response Error", config2, "ERR_NETWORK", request, response);
      }
      response = {
        ok: stageOne.ok,
        status: stageOne.status,
        statusText: stageOne.statusText,
        headers: new Headers(stageOne.headers),
        config: config2,
        request
      };
      if (stageOne.status >= 200 && stageOne.status !== 204) {
        switch (config2.responseType) {
          case "arraybuffer":
            response.data = yield stageOne.arrayBuffer();
            break;
          case "blob":
            response.data = yield stageOne.blob();
            break;
          case "json":
            response.data = yield stageOne.json();
            break;
          default:
            response.data = yield stageOne.text();
            break;
        }
      }
      return response;
    } catch (e) {
      return createError("Network Error", config2, "ERR_NETWORK", request);
    }
  });
}
function createRequest(config2) {
  var _a3;
  const headers = new Headers(config2.headers);
  if (config2.auth) {
    const username = config2.auth.username || "";
    const password = config2.auth.password ? decodeURI(encodeURIComponent(config2.auth.password)) : "";
    headers.set("Authorization", `Basic ${btoa(username + ":" + password)}`);
  }
  const method = (_a3 = config2.method) === null || _a3 === void 0 ? void 0 : _a3.toUpperCase();
  const options = {
    headers,
    method
  };
  if (method !== "GET" && method !== "HEAD") {
    options.body = config2.data;
    if (isFormData(options.body) && isStandardBrowserEnv()) {
      headers.delete("Content-Type");
    }
  }
  const c = config2;
  if ("mode" in c) {
    options.mode = c.mode;
  }
  if ("cache" in c) {
    options.cache = c.cache;
  }
  if ("integrity" in c) {
    options.integrity = c.integrity;
  }
  if ("redirect" in c) {
    options.redirect = c.redirect;
  }
  if ("referrer" in c) {
    options.referrer = c.referrer;
  }
  if (!isUndefined(c.withCredentials)) {
    options.credentials = c.withCredentials ? "include" : "omit";
  }
  const fullPath = buildFullPath(c.baseURL, c.url);
  const url = buildURL(fullPath, c.params, c.paramsSerializer);
  return new Request(url, options);
}
function createError(message, config2, code2, request, response) {
  const error = new Error(message);
  return enhanceError(error, config2, code2, request, response);
}
function enhanceError(error, config2, code2, request, response) {
  error.config = config2;
  if (code2) {
    error.code = code2;
  }
  error.request = request;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: "description" in this ? this.description : void 0,
      number: "number" in this ? this.number : void 0,
      // Mozilla
      fileName: "fileName" in this ? this.fileName : void 0,
      lineNumber: "lineNumber" in this ? this.lineNumber : void 0,
      columnNumber: "columnNumber" in this ? this.columnNumber : void 0,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
}
var HttpRequestFailed = class extends NetworkError {
  constructor(method, url, cause) {
    super();
    this.method = method;
    this.url = url;
    this.cause = cause;
    this.name = "HttpRequestFailed";
    this.message = `${method} ${url} ${String(cause)}`;
  }
};
var HttpResponseError = class extends NetworkError {
  constructor(message, status, statusText, body, url) {
    super();
    this.message = message;
    this.status = status;
    this.statusText = statusText;
    this.body = body;
    this.url = url;
    this.name = "HttpResponse";
  }
};
var STATUS_CODE;
(function(STATUS_CODE2) {
  STATUS_CODE2[STATUS_CODE2["CONTINUE"] = 100] = "CONTINUE";
  STATUS_CODE2[STATUS_CODE2["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
  STATUS_CODE2[STATUS_CODE2["PROCESSING"] = 102] = "PROCESSING";
  STATUS_CODE2[STATUS_CODE2["OK"] = 200] = "OK";
  STATUS_CODE2[STATUS_CODE2["CREATED"] = 201] = "CREATED";
  STATUS_CODE2[STATUS_CODE2["ACCEPTED"] = 202] = "ACCEPTED";
  STATUS_CODE2[STATUS_CODE2["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
  STATUS_CODE2[STATUS_CODE2["NO_CONTENT"] = 204] = "NO_CONTENT";
  STATUS_CODE2[STATUS_CODE2["RESET_CONTENT"] = 205] = "RESET_CONTENT";
  STATUS_CODE2[STATUS_CODE2["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
  STATUS_CODE2[STATUS_CODE2["MULTI_STATUS"] = 207] = "MULTI_STATUS";
  STATUS_CODE2[STATUS_CODE2["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
  STATUS_CODE2[STATUS_CODE2["IM_USED"] = 226] = "IM_USED";
  STATUS_CODE2[STATUS_CODE2["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
  STATUS_CODE2[STATUS_CODE2["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
  STATUS_CODE2[STATUS_CODE2["FOUND"] = 302] = "FOUND";
  STATUS_CODE2[STATUS_CODE2["SEE_OTHER"] = 303] = "SEE_OTHER";
  STATUS_CODE2[STATUS_CODE2["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
  STATUS_CODE2[STATUS_CODE2["USE_PROXY"] = 305] = "USE_PROXY";
  STATUS_CODE2[STATUS_CODE2["SWITCH_PROXY"] = 306] = "SWITCH_PROXY";
  STATUS_CODE2[STATUS_CODE2["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
  STATUS_CODE2[STATUS_CODE2["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
  STATUS_CODE2[STATUS_CODE2["BAD_REQUEST"] = 400] = "BAD_REQUEST";
  STATUS_CODE2[STATUS_CODE2["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
  STATUS_CODE2[STATUS_CODE2["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
  STATUS_CODE2[STATUS_CODE2["FORBIDDEN"] = 403] = "FORBIDDEN";
  STATUS_CODE2[STATUS_CODE2["NOT_FOUND"] = 404] = "NOT_FOUND";
  STATUS_CODE2[STATUS_CODE2["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
  STATUS_CODE2[STATUS_CODE2["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
  STATUS_CODE2[STATUS_CODE2["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
  STATUS_CODE2[STATUS_CODE2["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
  STATUS_CODE2[STATUS_CODE2["CONFLICT"] = 409] = "CONFLICT";
  STATUS_CODE2[STATUS_CODE2["GONE"] = 410] = "GONE";
  STATUS_CODE2[STATUS_CODE2["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
  STATUS_CODE2[STATUS_CODE2["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
  STATUS_CODE2[STATUS_CODE2["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
  STATUS_CODE2[STATUS_CODE2["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
  STATUS_CODE2[STATUS_CODE2["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
  STATUS_CODE2[STATUS_CODE2["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
  STATUS_CODE2[STATUS_CODE2["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
  STATUS_CODE2[STATUS_CODE2["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
  STATUS_CODE2[STATUS_CODE2["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
  STATUS_CODE2[STATUS_CODE2["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
  STATUS_CODE2[STATUS_CODE2["LOCKED"] = 423] = "LOCKED";
  STATUS_CODE2[STATUS_CODE2["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
  STATUS_CODE2[STATUS_CODE2["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
  STATUS_CODE2[STATUS_CODE2["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
  STATUS_CODE2[STATUS_CODE2["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  STATUS_CODE2[STATUS_CODE2["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
  STATUS_CODE2[STATUS_CODE2["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
  STATUS_CODE2[STATUS_CODE2["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
  STATUS_CODE2[STATUS_CODE2["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
  STATUS_CODE2[STATUS_CODE2["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
  STATUS_CODE2[STATUS_CODE2["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
  STATUS_CODE2[STATUS_CODE2["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
  STATUS_CODE2[STATUS_CODE2["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
  STATUS_CODE2[STATUS_CODE2["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
  STATUS_CODE2[STATUS_CODE2["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
  STATUS_CODE2[STATUS_CODE2["LOOP_DETECTED"] = 508] = "LOOP_DETECTED";
  STATUS_CODE2[STATUS_CODE2["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
  STATUS_CODE2[STATUS_CODE2["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(STATUS_CODE || (STATUS_CODE = {}));
var _a;
var isNode = typeof process !== "undefined" && !!((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node);
var adapter = isNode ? void 0 : fetchAdapter;
var ResponseType;
(function(ResponseType2) {
  ResponseType2["TEXT"] = "text";
  ResponseType2["JSON"] = "json";
})(ResponseType || (ResponseType = {}));
var HttpBackend = class {
  constructor(timeout2 = 3e4) {
    this.timeout = timeout2;
  }
  serialize(obj) {
    if (!obj) {
      return "";
    }
    const str = [];
    for (const p in obj) {
      if (obj.hasOwnProperty(p) && typeof obj[p] !== "undefined") {
        const prop = typeof obj[p].toJSON === "function" ? obj[p].toJSON() : obj[p];
        if (prop === null) {
          str.push(encodeURIComponent(p));
          continue;
        }
        if (Array.isArray(prop)) {
          prop.forEach((item) => {
            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(item));
          });
          continue;
        }
        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(prop));
      }
    }
    const serialized = str.join("&");
    if (serialized) {
      return `?${serialized}`;
    } else {
      return "";
    }
  }
  /**
   *
   * @param options contains options to be passed for the HTTP request (url, method and timeout)
   * @throws {@link HttpRequestFailed} | {@link HttpResponseError}
   */
  createRequest({ url, method, timeout: timeout2 = this.timeout, query, headers = {}, json = true }, data) {
    return __awaiter(this, void 0, void 0, function* () {
      const urlWithQuery = url + this.serialize(query);
      let resType;
      let transformResponse = void 0;
      if (!headers["Content-Type"]) {
        headers["Content-Type"] = "application/json";
      }
      if (!json) {
        resType = ResponseType.TEXT;
        transformResponse = [(v) => v];
      } else {
        resType = ResponseType.JSON;
      }
      try {
        const response = yield import_axios.default.request({
          url: urlWithQuery,
          method: method !== null && method !== void 0 ? method : "GET",
          headers,
          responseType: resType,
          transformResponse,
          timeout: timeout2,
          data,
          adapter
        });
        return response.data;
      } catch (err) {
        if (import_axios.default.isAxiosError(err) && err.response || !isNode && err.response) {
          let errorData;
          if (typeof err.response.data === "object") {
            errorData = JSON.stringify(err.response.data);
          } else {
            errorData = err.response.data;
          }
          throw new HttpResponseError(`Http error response: (${err.response.status}) ${errorData}`, err.response.status, err.response.statusText, errorData, urlWithQuery);
        } else {
          throw new HttpRequestFailed(String(method), urlWithQuery, err);
        }
      }
    });
  }
};

// node_modules/@taquito/utils/dist/taquito-utils.es6.js
var import_buffer = __toESM(require_buffer());
var import_ed25519 = __toESM(require_ed25519());
var import_blake2b = __toESM(require_blake2b());
var import_blakejs = __toESM(require_blakejs());
var import_bs58check = __toESM(require_bs58check());
var import_elliptic = __toESM(require_elliptic());
var import_typedarray_to_buffer = __toESM(require_typedarray_to_buffer());
var Prefix;
(function(Prefix2) {
  Prefix2["TZ1"] = "tz1";
  Prefix2["TZ2"] = "tz2";
  Prefix2["TZ3"] = "tz3";
  Prefix2["TZ4"] = "tz4";
  Prefix2["KT"] = "KT";
  Prefix2["KT1"] = "KT1";
  Prefix2["EDSK2"] = "edsk2";
  Prefix2["SPSK"] = "spsk";
  Prefix2["P2SK"] = "p2sk";
  Prefix2["EDPK"] = "edpk";
  Prefix2["SPPK"] = "sppk";
  Prefix2["P2PK"] = "p2pk";
  Prefix2["BLPK"] = "BLpk";
  Prefix2["EDESK"] = "edesk";
  Prefix2["SPESK"] = "spesk";
  Prefix2["P2ESK"] = "p2esk";
  Prefix2["EDSK"] = "edsk";
  Prefix2["EDSIG"] = "edsig";
  Prefix2["SPSIG"] = "spsig";
  Prefix2["P2SIG"] = "p2sig";
  Prefix2["SIG"] = "sig";
  Prefix2["NET"] = "Net";
  Prefix2["NCE"] = "nce";
  Prefix2["B"] = "B";
  Prefix2["O"] = "o";
  Prefix2["LO"] = "Lo";
  Prefix2["LLO"] = "LLo";
  Prefix2["P"] = "P";
  Prefix2["CO"] = "Co";
  Prefix2["ID"] = "id";
  Prefix2["EXPR"] = "expr";
  Prefix2["TZ"] = "TZ";
  Prefix2["VH"] = "vh";
  Prefix2["SASK"] = "sask";
  Prefix2["ZET1"] = "zet1";
  Prefix2["TXR1"] = "txr1";
  Prefix2["TXI"] = "txi";
  Prefix2["TXM"] = "txm";
  Prefix2["TXC"] = "txc";
  Prefix2["TXMR"] = "txmr";
  Prefix2["TXRL"] = "txM";
  Prefix2["TXW"] = "txw";
  Prefix2["SR1"] = "sr1";
  Prefix2["SRC1"] = "src1";
})(Prefix || (Prefix = {}));
var prefix = {
  [Prefix.TZ1]: new Uint8Array([6, 161, 159]),
  [Prefix.TZ2]: new Uint8Array([6, 161, 161]),
  [Prefix.TZ3]: new Uint8Array([6, 161, 164]),
  [Prefix.TZ4]: new Uint8Array([6, 161, 166]),
  [Prefix.KT]: new Uint8Array([2, 90, 121]),
  [Prefix.KT1]: new Uint8Array([2, 90, 121]),
  [Prefix.EDSK]: new Uint8Array([43, 246, 78, 7]),
  [Prefix.EDSK2]: new Uint8Array([13, 15, 58, 7]),
  [Prefix.SPSK]: new Uint8Array([17, 162, 224, 201]),
  [Prefix.P2SK]: new Uint8Array([16, 81, 238, 189]),
  [Prefix.EDPK]: new Uint8Array([13, 15, 37, 217]),
  [Prefix.SPPK]: new Uint8Array([3, 254, 226, 86]),
  [Prefix.P2PK]: new Uint8Array([3, 178, 139, 127]),
  [Prefix.BLPK]: new Uint8Array([6, 149, 135, 204]),
  [Prefix.EDESK]: new Uint8Array([7, 90, 60, 179, 41]),
  [Prefix.SPESK]: new Uint8Array([9, 237, 241, 174, 150]),
  [Prefix.P2ESK]: new Uint8Array([9, 48, 57, 115, 171]),
  [Prefix.EDSIG]: new Uint8Array([9, 245, 205, 134, 18]),
  [Prefix.SPSIG]: new Uint8Array([13, 115, 101, 19, 63]),
  [Prefix.P2SIG]: new Uint8Array([54, 240, 44, 52]),
  [Prefix.SIG]: new Uint8Array([4, 130, 43]),
  [Prefix.NET]: new Uint8Array([87, 82, 0]),
  [Prefix.NCE]: new Uint8Array([69, 220, 169]),
  [Prefix.B]: new Uint8Array([1, 52]),
  [Prefix.O]: new Uint8Array([5, 116]),
  [Prefix.LO]: new Uint8Array([133, 233]),
  [Prefix.LLO]: new Uint8Array([29, 159, 109]),
  [Prefix.P]: new Uint8Array([2, 170]),
  [Prefix.CO]: new Uint8Array([79, 179]),
  [Prefix.ID]: new Uint8Array([153, 103]),
  [Prefix.EXPR]: new Uint8Array([13, 44, 64, 27]),
  // Legacy prefix
  [Prefix.TZ]: new Uint8Array([2, 90, 121]),
  [Prefix.VH]: new Uint8Array([1, 106, 242]),
  [Prefix.SASK]: new Uint8Array([11, 237, 20, 92]),
  [Prefix.ZET1]: new Uint8Array([18, 71, 40, 223]),
  [Prefix.TXR1]: new Uint8Array([1, 128, 120, 31]),
  [Prefix.TXI]: new Uint8Array([79, 148, 196]),
  [Prefix.TXM]: new Uint8Array([79, 149, 30]),
  [Prefix.TXC]: new Uint8Array([79, 148, 17]),
  [Prefix.TXMR]: new Uint8Array([18, 7, 206, 87]),
  [Prefix.TXRL]: new Uint8Array([79, 146, 82]),
  [Prefix.TXW]: new Uint8Array([79, 150, 72]),
  [Prefix.SR1]: new Uint8Array([6, 124, 117]),
  [Prefix.SRC1]: new Uint8Array([17, 165, 134, 138])
};
var prefixLength = {
  [Prefix.TZ1]: 20,
  [Prefix.TZ2]: 20,
  [Prefix.TZ3]: 20,
  [Prefix.TZ4]: 20,
  [Prefix.KT]: 20,
  [Prefix.KT1]: 20,
  [Prefix.EDPK]: 32,
  [Prefix.SPPK]: 33,
  [Prefix.P2PK]: 33,
  //working with value in comment for base58.ml line 445 but not consistent with the three above
  [Prefix.BLPK]: 48,
  [Prefix.EDSIG]: 64,
  [Prefix.SPSIG]: 64,
  [Prefix.P2SIG]: 64,
  [Prefix.SIG]: 64,
  [Prefix.NET]: 4,
  [Prefix.B]: 32,
  [Prefix.P]: 32,
  [Prefix.O]: 32,
  [Prefix.VH]: 32,
  [Prefix.SASK]: 169,
  [Prefix.ZET1]: 43,
  [Prefix.TXR1]: 20,
  [Prefix.TXI]: 32,
  [Prefix.TXM]: 32,
  [Prefix.TXC]: 32,
  [Prefix.TXMR]: 32,
  [Prefix.TXRL]: 32,
  [Prefix.TXW]: 32,
  [Prefix.SR1]: 20,
  [Prefix.SRC1]: 32
};
var ValueConversionError = class extends UnsupportedActionError {
  constructor(value, desiredType) {
    super();
    this.value = value;
    this.desiredType = desiredType;
    this.name = "ValueConversionError";
    this.message = `Unable to convert ${value} to a ${desiredType}`;
  }
};
var ValidationResult;
(function(ValidationResult2) {
  ValidationResult2[ValidationResult2["NO_PREFIX_MATCHED"] = 0] = "NO_PREFIX_MATCHED";
  ValidationResult2[ValidationResult2["INVALID_CHECKSUM"] = 1] = "INVALID_CHECKSUM";
  ValidationResult2[ValidationResult2["INVALID_LENGTH"] = 2] = "INVALID_LENGTH";
  ValidationResult2[ValidationResult2["VALID"] = 3] = "VALID";
})(ValidationResult || (ValidationResult = {}));
function isValidPrefix(value) {
  if (typeof value !== "string") {
    return false;
  }
  return value in prefix;
}
function validatePrefixedValue(value, prefixes) {
  const match = new RegExp(`^(${prefixes.join("|")})`).exec(value);
  if (!match || match.length === 0) {
    return ValidationResult.NO_PREFIX_MATCHED;
  }
  const prefixKey = match[0];
  if (!isValidPrefix(prefixKey)) {
    return ValidationResult.NO_PREFIX_MATCHED;
  }
  if (value.includes("%")) {
    value = value.split("%")[0];
  }
  const kt1Regex = /^(KT1\w{33})$/;
  if (!kt1Regex.test(value) && prefixKey === "KT1") {
    return ValidationResult.INVALID_CHECKSUM;
  }
  let decoded = import_bs58check.default.decodeUnsafe(value);
  if (!decoded) {
    return ValidationResult.INVALID_CHECKSUM;
  }
  decoded = decoded.slice(prefix[prefixKey].length);
  if (decoded.length !== prefixLength[prefixKey]) {
    return ValidationResult.INVALID_LENGTH;
  }
  return ValidationResult.VALID;
}
var implicitPrefix = [Prefix.TZ1, Prefix.TZ2, Prefix.TZ3, Prefix.TZ4];
var contractPrefix = [Prefix.KT1, Prefix.TXR1];
var signaturePrefix = [Prefix.EDSIG, Prefix.P2SIG, Prefix.SPSIG, Prefix.SIG];
var pkPrefix = [Prefix.EDPK, Prefix.SPPK, Prefix.P2PK, Prefix.BLPK];
var operationPrefix = [Prefix.O];
var protocolPrefix = [Prefix.P];
var blockPrefix = [Prefix.B];
var smartRollupPrefix = [Prefix.SR1];
function validateAddress(value) {
  return validatePrefixedValue(value, [...implicitPrefix, ...contractPrefix, ...smartRollupPrefix]);
}
function validateChain(value) {
  return validatePrefixedValue(value, [Prefix.NET]);
}
function validateContractAddress(value) {
  return validatePrefixedValue(value, contractPrefix);
}
function validateKeyHash(value) {
  return validatePrefixedValue(value, implicitPrefix);
}
function validateSignature(value) {
  return validatePrefixedValue(value, signaturePrefix);
}
function validatePublicKey(value) {
  return validatePrefixedValue(value, pkPrefix);
}
function validateOperation(value) {
  return validatePrefixedValue(value, operationPrefix);
}
function validateBlock(value) {
  return validatePrefixedValue(value, blockPrefix);
}
function invalidDetail(validation) {
  switch (validation) {
    case ValidationResult.NO_PREFIX_MATCHED:
      return "with unsupported prefix";
    case ValidationResult.INVALID_CHECKSUM:
      return "failed checksum";
    case ValidationResult.INVALID_LENGTH:
      return "with incorrect length";
    default:
      return "";
  }
}
var TZ_DECIMALS = 6;
var MTZ_DECIMALS = 3;
function getDecimal(format2) {
  switch (format2) {
    case "tz":
      return TZ_DECIMALS;
    case "mtz":
      return MTZ_DECIMALS;
    case "mutez":
    default:
      return 0;
  }
}
function format(from2 = "mutez", to = "mutez", amount) {
  const bigNum = new bignumber_default(amount);
  if (bigNum.isNaN()) {
    return amount;
  }
  return bigNum.multipliedBy(Math.pow(10, getDecimal(from2))).dividedBy(Math.pow(10, getDecimal(to)));
}
function encodeExpr(value) {
  const blakeHash = import_blakejs.default.blake2b(hex2buf(value), void 0, 32);
  return b58cencode(blakeHash, prefix["expr"]);
}
function b58cencode(value, prefix2) {
  const payloadAr = typeof value === "string" ? Uint8Array.from(import_buffer.Buffer.from(value, "hex")) : value;
  const n = new Uint8Array(prefix2.length + payloadAr.length);
  n.set(prefix2);
  n.set(payloadAr, prefix2.length);
  return import_bs58check.default.encode(import_buffer.Buffer.from(n.buffer));
}
var b58cdecode = (enc, prefixArg) => import_bs58check.default.decode(enc).slice(prefixArg.length);
function b58decode(payload) {
  const buf = import_bs58check.default.decode(payload);
  const prefixMap = {
    [prefix.tz1.toString()]: "0000",
    [prefix.tz2.toString()]: "0001",
    [prefix.tz3.toString()]: "0002"
  };
  const rollupPrefMap = {
    [prefix.txr1.toString()]: "02"
  };
  const pref = prefixMap[new Uint8Array(buf.slice(0, 3)).toString()];
  const rollupPref = rollupPrefMap[new Uint8Array(buf.slice(0, 4)).toString()];
  if (pref) {
    const hex = buf2hex(buf.slice(3));
    return pref + hex;
  } else if (rollupPref) {
    const hex = buf2hex(buf.slice(4));
    return rollupPref + hex + "00";
  } else {
    return "01" + buf2hex(buf.slice(3, 42)) + "00";
  }
}
function b58decodeL2Address(payload) {
  const buf = import_bs58check.default.decode(payload);
  return buf2hex(buf.slice(3, 42));
}
function encodePubKey(value) {
  if (value.substring(0, 2) === "00") {
    const pref = {
      "0000": prefix.tz1,
      "0001": prefix.tz2,
      "0002": prefix.tz3
    };
    return b58cencode(value.substring(4), pref[value.substring(0, 4)]);
  } else if (value.substring(0, 2) === "02") {
    return b58cencode(value.substring(2, value.length - 2), prefix.txr1);
  }
  return b58cencode(value.substring(2, 42), prefix.KT);
}
function encodeL2Address(value) {
  return b58cencode(value, prefix.tz4);
}
function encodeKey(value) {
  if (value[0] === "0") {
    const pref = {
      "00": new Uint8Array([13, 15, 37, 217]),
      "01": new Uint8Array([3, 254, 226, 86]),
      "02": new Uint8Array([3, 178, 139, 127])
    };
    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);
  }
}
function encodeKeyHash(value) {
  if (value[0] === "0") {
    const pref = {
      "00": new Uint8Array([6, 161, 159]),
      "01": new Uint8Array([6, 161, 161]),
      "02": new Uint8Array([6, 161, 164])
    };
    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);
  }
}
var hex2buf = (hex) => {
  if (hex.length % 2 !== 0) {
    throw new InvalidHexStringError(hex, `: Expecting even number of characters`);
  }
  const hexDigits = stripHexPrefix(hex);
  if (!hexDigits.match(/^([\da-f]{2})*$/gi)) {
    throw new InvalidHexStringError(hex, `: Only characters 0-9, a-f and A-F are expected. Optionally, it can be prefixed with '0x'`);
  }
  const out = new Uint8Array(hexDigits.length / 2);
  let j = 0;
  for (let i = 0; i < hexDigits.length; i += 2) {
    const v = parseInt(hexDigits.slice(i, i + 2), 16);
    if (Number.isNaN(v)) {
      throw new ValueConversionError(hex, "Uint8Array");
    }
    out[j++] = v;
  }
  return out;
};
var mergebuf = (b1, b2) => {
  const r = new Uint8Array(b1.length + b2.length);
  r.set(b1);
  r.set(b2, b1.length);
  return r;
};
var buf2hex = (buffer2) => {
  const byteArray = new Uint8Array(buffer2);
  const hexParts = [];
  byteArray.forEach((byte) => {
    const hex = byte.toString(16);
    const paddedHex = `00${hex}`.slice(-2);
    hexParts.push(paddedHex);
  });
  return hexParts.join("");
};
function char2Bytes(str) {
  return import_buffer.Buffer.from(str, "utf8").toString("hex");
}
function bytes2Char(hex) {
  return import_buffer.Buffer.from(hex2buf(hex)).toString("utf8");
}
function stripHexPrefix(hex) {
  return hex.startsWith("0x") ? hex.slice(2) : hex;
}

// node_modules/@taquito/rpc/dist/taquito-rpc.es6.js
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var defaultChain = "main";
var defaultRPCOptions = { block: "head" };
var RPCMethodName;
(function(RPCMethodName2) {
  RPCMethodName2["GET_BAKING_RIGHTS"] = "getBakingRights";
  RPCMethodName2["GET_BALLOTS"] = "getBallots";
  RPCMethodName2["GET_BALLOT_LIST"] = "getBallotList";
  RPCMethodName2["GET_BIG_MAP_KEY"] = "getBigMapKey";
  RPCMethodName2["GET_BIG_MAP_EXPR"] = "getBigMapExpr";
  RPCMethodName2["GET_BLOCK_HASH"] = "getBlockHash";
  RPCMethodName2["GET_BLOCK"] = "getBlock";
  RPCMethodName2["GET_BLOCK_HEADER"] = "getBlockHeader";
  RPCMethodName2["GET_BLOCK_METADATA"] = "getBlockMetadata";
  RPCMethodName2["GET_BALANCE"] = "getBalance";
  RPCMethodName2["GET_CHAIN_ID"] = "getChainId";
  RPCMethodName2["GET_CONSTANTS"] = "getConstants";
  RPCMethodName2["GET_CONTRACT"] = "getContract";
  RPCMethodName2["GET_CURRENT_PERIOD"] = "getCurrentPeriod";
  RPCMethodName2["GET_CURRENT_PROPOSAL"] = "getCurrentProposal";
  RPCMethodName2["GET_CURRENT_QUORUM"] = "getCurrentQuorum";
  RPCMethodName2["GET_DELEGATE"] = "getDelegate";
  RPCMethodName2["GET_DELEGATES"] = "getDelegates";
  RPCMethodName2["GET_VOTING_INFO"] = "getVotingInfo";
  RPCMethodName2["GET_ENDORSING_RIGHTS"] = "getEndorsingRights";
  RPCMethodName2["GET_ENTRYPOINTS"] = "getEntrypoints";
  RPCMethodName2["GET_LIVE_BLOCKS"] = "getLiveBlocks";
  RPCMethodName2["GET_MANAGER_KEY"] = "getManagerKey";
  RPCMethodName2["GET_NORMALIZED_SCRIPT"] = "getNormalizedScript";
  RPCMethodName2["GET_PROPOSALS"] = "getProposals";
  RPCMethodName2["GET_PROTOCOLS"] = "getProtocols";
  RPCMethodName2["GET_SAPLING_DIFF_BY_CONTRACT"] = "getSaplingDiffByContract";
  RPCMethodName2["GET_SAPLING_DIFF_BY_ID"] = "getSaplingDiffById";
  RPCMethodName2["GET_SCRIPT"] = "getScript";
  RPCMethodName2["GET_STORAGE"] = "getStorage";
  RPCMethodName2["GET_SUCCESSOR_PERIOD"] = "getSuccessorPeriod";
  RPCMethodName2["GET_TX_ROLLUP_INBOX"] = "getTxRollupInbox";
  RPCMethodName2["GET_TX_ROLLUP_STATE"] = "getTxRollupState";
  RPCMethodName2["GET_VOTES_LISTINGS"] = "getVotesListings";
  RPCMethodName2["PACK_DATA"] = "packData";
  RPCMethodName2["GET_STORAGE_USED_SPACE"] = "getStorageUsedSpace";
  RPCMethodName2["GET_STORAGE_PAID_SPACE"] = "getStoragePaidSpace";
  RPCMethodName2["GET_TICKET_BALANCE"] = "getTicketBalance";
  RPCMethodName2["GET_ALL_TICKET_BALANCES"] = "getAllTicketBalances";
  RPCMethodName2["GET_PENDING_OPERATIONS"] = "getPendingOperations";
  RPCMethodName2["GET_ORIGINATION_PROOF"] = "getOriginationProof";
})(RPCMethodName || (RPCMethodName = {}));
function castToBigNumber(data, keys) {
  const returnArray = Array.isArray(data);
  if (typeof keys === "undefined") {
    keys = Object.keys(data);
  }
  const response = returnArray ? [] : {};
  keys.forEach((key) => {
    const item = data[key];
    let res;
    if (typeof item === "undefined") {
      return;
    }
    if (Array.isArray(item)) {
      res = castToBigNumber(item);
      response[key] = res;
      return;
    }
    res = new bignumber_default(item);
    response[key] = res;
  });
  return response;
}
var OPERATION_METADATA;
(function(OPERATION_METADATA2) {
  OPERATION_METADATA2["TOO_LARGE"] = "too large";
})(OPERATION_METADATA || (OPERATION_METADATA = {}));
var METADATA_BALANCE_UPDATES_CATEGORY;
(function(METADATA_BALANCE_UPDATES_CATEGORY2) {
  METADATA_BALANCE_UPDATES_CATEGORY2["BAKING_REWARDS"] = "baking rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["REWARDS"] = "rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["FEES"] = "fees";
  METADATA_BALANCE_UPDATES_CATEGORY2["DEPOSITS"] = "deposits";
  METADATA_BALANCE_UPDATES_CATEGORY2["LEGACY_REWARDS"] = "legacy_rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["LEGACY_FEES"] = "legacy_fees";
  METADATA_BALANCE_UPDATES_CATEGORY2["LEGACY_DEPOSITS"] = "legacy_deposits";
  METADATA_BALANCE_UPDATES_CATEGORY2["BLOCK_FEES"] = "block fees";
  METADATA_BALANCE_UPDATES_CATEGORY2["NONCE_REVELATION_REWARDS"] = "nonce revelation rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["DOUBLE_SIGNING_EVIDENCE_REWARDS"] = "double signing evidence rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["ENDORSING_REWARDS"] = "endorsing rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["BAKING_BONUSES"] = "baking bonuses";
  METADATA_BALANCE_UPDATES_CATEGORY2["STORAGE_FEES"] = "storage fees";
  METADATA_BALANCE_UPDATES_CATEGORY2["PUNISHMENTS"] = "punishments";
  METADATA_BALANCE_UPDATES_CATEGORY2["LOST_ENDORSING_REWARDS"] = "lost endorsing rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["SUBSIDY"] = "subsidy";
  METADATA_BALANCE_UPDATES_CATEGORY2["BURNED"] = "burned";
  METADATA_BALANCE_UPDATES_CATEGORY2["COMMITMENT"] = "commitment";
  METADATA_BALANCE_UPDATES_CATEGORY2["BOOTSTRAP"] = "bootstrap";
  METADATA_BALANCE_UPDATES_CATEGORY2["INVOICE"] = "invoice";
  METADATA_BALANCE_UPDATES_CATEGORY2["MINTED"] = "minted";
  METADATA_BALANCE_UPDATES_CATEGORY2["TX_ROLLUP_REJECTION_REWARDS"] = "tx_rollup_rejection_rewards";
  METADATA_BALANCE_UPDATES_CATEGORY2["TX_ROLLUP_REJECTION_PUNISHMENTS"] = "tx_rollup_rejection_punishments";
  METADATA_BALANCE_UPDATES_CATEGORY2["BONDS"] = "bonds";
})(METADATA_BALANCE_UPDATES_CATEGORY || (METADATA_BALANCE_UPDATES_CATEGORY = {}));
var PvmKind;
(function(PvmKind2) {
  PvmKind2["WASM2"] = "wasm_2_0_0";
  PvmKind2["ARITH"] = "arith";
})(PvmKind || (PvmKind = {}));
var SmartRollupRefutationOptions;
(function(SmartRollupRefutationOptions2) {
  SmartRollupRefutationOptions2["START"] = "start";
  SmartRollupRefutationOptions2["MOVE"] = "move";
})(SmartRollupRefutationOptions || (SmartRollupRefutationOptions = {}));
var SmartRollupInputProofKind;
(function(SmartRollupInputProofKind2) {
  SmartRollupInputProofKind2["INBOX_PROOF"] = "inbox_proof";
  SmartRollupInputProofKind2["REVEAL_PROOF"] = "reveal_proof";
  SmartRollupInputProofKind2["FIRST_INPUT"] = "first_input";
})(SmartRollupInputProofKind || (SmartRollupInputProofKind = {}));
var SmartRollupRefuteRevealProofKind;
(function(SmartRollupRefuteRevealProofKind2) {
  SmartRollupRefuteRevealProofKind2["RAW_DATA_PROOF"] = "raw_data_proof";
  SmartRollupRefuteRevealProofKind2["METADATA_PROOF"] = "metadata_proof";
  SmartRollupRefuteRevealProofKind2["DAL_PAGE_PROOF"] = "dal_page_proof";
})(SmartRollupRefuteRevealProofKind || (SmartRollupRefuteRevealProofKind = {}));
var SmartRollupRefuteGameStatusOptions;
(function(SmartRollupRefuteGameStatusOptions2) {
  SmartRollupRefuteGameStatusOptions2["ONGOING"] = "ongoing";
  SmartRollupRefuteGameStatusOptions2["ENDED"] = "ended";
})(SmartRollupRefuteGameStatusOptions || (SmartRollupRefuteGameStatusOptions = {}));
var SmartRollupRefuteGameEndedPlayerOutcomes;
(function(SmartRollupRefuteGameEndedPlayerOutcomes2) {
  SmartRollupRefuteGameEndedPlayerOutcomes2["LOSER"] = "loser";
  SmartRollupRefuteGameEndedPlayerOutcomes2["DRAW"] = "draw";
})(SmartRollupRefuteGameEndedPlayerOutcomes || (SmartRollupRefuteGameEndedPlayerOutcomes = {}));
var SmartRollupRefuteGameEndedReason;
(function(SmartRollupRefuteGameEndedReason2) {
  SmartRollupRefuteGameEndedReason2["CONFLICT_RESOLVED"] = "conflict_resolved";
  SmartRollupRefuteGameEndedReason2["TIMEOUT"] = "timeout";
})(SmartRollupRefuteGameEndedReason || (SmartRollupRefuteGameEndedReason = {}));
var OpKind;
(function(OpKind2) {
  OpKind2["ORIGINATION"] = "origination";
  OpKind2["DELEGATION"] = "delegation";
  OpKind2["REVEAL"] = "reveal";
  OpKind2["TRANSACTION"] = "transaction";
  OpKind2["ACTIVATION"] = "activate_account";
  OpKind2["ENDORSEMENT"] = "endorsement";
  OpKind2["PREENDORSEMENT"] = "preendorsement";
  OpKind2["SET_DEPOSITS_LIMIT"] = "set_deposits_limit";
  OpKind2["DOUBLE_PREENDORSEMENT_EVIDENCE"] = "double_preendorsement_evidence";
  OpKind2["ENDORSEMENT_WITH_SLOT"] = "endorsement_with_slot";
  OpKind2["SEED_NONCE_REVELATION"] = "seed_nonce_revelation";
  OpKind2["DOUBLE_ENDORSEMENT_EVIDENCE"] = "double_endorsement_evidence";
  OpKind2["DOUBLE_BAKING_EVIDENCE"] = "double_baking_evidence";
  OpKind2["PROPOSALS"] = "proposals";
  OpKind2["BALLOT"] = "ballot";
  OpKind2["FAILING_NOOP"] = "failing_noop";
  OpKind2["REGISTER_GLOBAL_CONSTANT"] = "register_global_constant";
  OpKind2["TX_ROLLUP_ORIGINATION"] = "tx_rollup_origination";
  OpKind2["TX_ROLLUP_SUBMIT_BATCH"] = "tx_rollup_submit_batch";
  OpKind2["TX_ROLLUP_COMMIT"] = "tx_rollup_commit";
  OpKind2["TX_ROLLUP_RETURN_BOND"] = "tx_rollup_return_bond";
  OpKind2["TX_ROLLUP_FINALIZE_COMMITMENT"] = "tx_rollup_finalize_commitment";
  OpKind2["TX_ROLLUP_REMOVE_COMMITMENT"] = "tx_rollup_remove_commitment";
  OpKind2["TX_ROLLUP_REJECTION"] = "tx_rollup_rejection";
  OpKind2["TX_ROLLUP_DISPATCH_TICKETS"] = "tx_rollup_dispatch_tickets";
  OpKind2["TRANSFER_TICKET"] = "transfer_ticket";
  OpKind2["INCREASE_PAID_STORAGE"] = "increase_paid_storage";
  OpKind2["UPDATE_CONSENSUS_KEY"] = "update_consensus_key";
  OpKind2["DRAIN_DELEGATE"] = "drain_delegate";
  OpKind2["VDF_REVELATION"] = "vdf_revelation";
  OpKind2["EVENT"] = "event";
  OpKind2["TICKET_UPDATES"] = "ticket_updates";
  OpKind2["SMART_ROLLUP_ORIGINATE"] = "smart_rollup_originate";
  OpKind2["SMART_ROLLUP_ADD_MESSAGES"] = "smart_rollup_add_messages";
  OpKind2["SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE"] = "smart_rollup_execute_outbox_message";
  OpKind2["SMART_ROLLUP_PUBLISH"] = "smart_rollup_publish";
  OpKind2["SMART_ROLLUP_CEMENT"] = "smart_rollup_cement";
  OpKind2["SMART_ROLLUP_RECOVER_BOND"] = "smart_rollup_recover_bond";
  OpKind2["SMART_ROLLUP_REFUTE"] = "smart_rollup_refute";
  OpKind2["SMART_ROLLUP_TIMEOUT"] = "smart_rollup_timeout";
})(OpKind || (OpKind = {}));
var RpcClient = class {
  /**
   *
   * @param url rpc root url
   * @param chain chain (default main)
   * @param httpBackend Http backend that issue http request.
   * You can override it by providing your own if you which to hook in the request/response
   *
   * @example new RpcClient('https://mainnet.api.tez.ie/', 'main') this will use https://mainnet.api.tez.ie//chains/main
   */
  constructor(url, chain = defaultChain, httpBackend = new HttpBackend()) {
    this.url = url;
    this.chain = chain;
    this.httpBackend = httpBackend;
  }
  createURL(path) {
    return `${this.url.replace(/\/+$/g, "")}${path}`;
  }
  validateAddress(address) {
    const addressValidation = validateAddress(address);
    if (addressValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(address, invalidDetail(addressValidation));
    }
  }
  validateContract(address) {
    const addressValidation = validateContractAddress(address);
    if (addressValidation !== ValidationResult.VALID) {
      throw new InvalidContractAddressError(address, invalidDetail(addressValidation));
    }
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Get the block's hash, its unique identifier.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-hash
   */
  getBlockHash({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const hash2 = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/hash`),
        method: "GET"
      });
      return hash2;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-live-blocks
   */
  getLiveBlocks({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const blocks = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/live_blocks`),
        method: "GET"
      });
      return blocks;
    });
  }
  /**
   *
   * @param address address from which we want to retrieve the balance
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the balance of a contract.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-balance
   */
  getBalance(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      const balance = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/balance`),
        method: "GET"
      });
      return new bignumber_default(balance);
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the storage
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the data of the contract.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-storage
   */
  getStorage(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateContract(address);
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/storage`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the script
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the code and data of the contract.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script
   */
  getScript(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateContract(address);
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the script
   * @param unparsingMode default is { unparsing_mode: "Readable" }
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the script of the contract and normalize it using the requested unparsing mode.
   *
   */
  getNormalizedScript(address, unparsingMode = { unparsing_mode: "Readable" }, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateContract(address);
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script/normalized`),
        method: "POST"
      }, unparsingMode);
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the complete status of a contract.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id
   */
  getContract(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      const contractResponse = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}`),
        method: "GET"
      });
      return Object.assign(Object.assign({}, contractResponse), { balance: new bignumber_default(contractResponse.balance) });
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the manager
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the manager key of a contract.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-manager-key
   */
  getManagerKey(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/manager_key`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the delegate (baker)
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the delegate of a contract, if any.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-delegate
   */
  getDelegate(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      let delegate;
      try {
        delegate = yield this.httpBackend.createRequest({
          url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/delegate`),
          method: "GET"
        });
      } catch (ex) {
        if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {
          delegate = null;
        } else {
          throw ex;
        }
      }
      return delegate;
    });
  }
  /**
   *
   * @param address contract address from which we want to retrieve the big map key
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the value associated with a key in the big map storage of the contract.
   *
   * @deprecated Deprecated in favor of getBigMapKeyByID
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get
   */
  getBigMapKey(address, key, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/big_map_get`),
        method: "POST"
      }, key);
    });
  }
  /**
   *
   * @param id Big Map ID
   * @param expr Expression hash to query (A b58check encoded Blake2b hash of the expression (The expression can be packed using the pack_data method))
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the value associated with a key in a big map.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr
   */
  getBigMapExpr(id, expr, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/big_maps/${id}/${expr}`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param address delegate address which we want to retrieve
   * @param options contains generic configuration for rpc calls
   *
   * @description Fetches information about a delegate from RPC.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh
   */
  getDelegates(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/delegates/${address}`),
        method: "GET"
      });
      const castedResponse = castToBigNumber(response, [
        "balance",
        "full_balance",
        "current_frozen_deposits",
        "frozen_deposits",
        "frozen_balance",
        "frozen_deposits_limit",
        "staking_balance",
        "delegated_balance",
        "voting_power"
      ]);
      return Object.assign(Object.assign(Object.assign({}, response), castedResponse), { frozen_balance_by_cycle: response.frozen_balance_by_cycle ? response.frozen_balance_by_cycle.map((_a3) => {
        var { deposit, deposits, fees, rewards } = _a3, rest = __rest(_a3, ["deposit", "deposits", "fees", "rewards"]);
        const castedToBigNumber = castToBigNumber({ deposit, deposits, fees, rewards }, [
          "deposit",
          "deposits",
          "fees",
          "rewards"
        ]);
        return Object.assign(Object.assign({}, rest), { deposit: castedToBigNumber.deposit, deposits: castedToBigNumber.deposits, fees: castedToBigNumber.fees, rewards: castedToBigNumber.rewards });
      }) : void 0 });
    });
  }
  /**
   *
   * @param address delegate address which we want to retrieve
   * @param options contains generic configuration for rpc calls
   *
   * @description Returns the delegate info (e.g. voting power) found in the listings of the current voting period.
   *
   * @see https://tezos.gitlab.io/kathmandu/rpc.html#get-block-id-context-delegates-pkh-voting-info
   */
  getVotingInfo(address, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateAddress(address);
      return yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/delegates/${address}/voting_info`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description All constants
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-constants
   */
  getConstants({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/constants`),
        method: "GET"
      });
      const castedResponse = castToBigNumber(response, [
        "time_between_blocks",
        "hard_gas_limit_per_operation",
        "hard_gas_limit_per_block",
        "proof_of_work_threshold",
        "tokens_per_roll",
        "seed_nonce_revelation_tip",
        "block_security_deposit",
        "endorsement_security_deposit",
        "block_reward",
        "endorsement_reward",
        "cost_per_byte",
        "hard_storage_limit_per_operation",
        "test_chain_duration",
        "baking_reward_per_endorsement",
        "delay_per_missing_endorsement",
        "minimal_block_delay",
        "liquidity_baking_subsidy",
        "cache_layout",
        "baking_reward_fixed_portion",
        "baking_reward_bonus_per_slot",
        "endorsing_reward_per_slot",
        "double_baking_punishment",
        "delay_increment_per_round",
        "tx_rollup_commitment_bond",
        "vdf_difficulty",
        "sc_rollup_stake_amount",
        "minimal_stake"
      ]);
      return Object.assign(Object.assign({}, response), castedResponse);
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls. See examples for various available sytaxes.
   *
   * @description All the information about a block
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id
   * @example getBlock() will default to /main/chains/block/head.
   * @example getBlock({ block: head~2 }) will return an offset of 2 blocks.
   * @example getBlock({ block: BL8fTiWcSxWCjiMVnDkbh6EuhqVPZzgWheJ2dqwrxYRm9AephXh~2 }) will return an offset of 2 blocks from given block hash..
   */
  getBlock({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description The whole block header
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-header
   */
  getBlockHeader({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/header`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description All the metadata associated to the block
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata
   */
  getBlockMetadata({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/metadata`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param args contains optional query arguments
   * @param options contains generic configuration for rpc calls
   *
   * @description Retrieves the list of delegates allowed to bake a block.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-baking-rights
   */
  getBakingRights(args = {}, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/baking_rights`),
        method: "GET",
        query: args
      });
      return response;
    });
  }
  /**
   *
   * @param args contains optional query arguments
   * @param options contains generic configuration for rpc calls
   *
   * @description Retrieves the list of delegates allowed to bake a block.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-endorsing-rights
   */
  getEndorsingRights(args = {}, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/endorsing_rights`),
        method: "GET",
        query: args
      });
      return response;
    });
  }
  /**
   * @param options contains generic configuration for rpc calls
   *
   * @description Ballots casted so far during a voting period
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballot-list
   */
  getBallotList({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballot_list`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Sum of ballots casted so far during a voting period.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballots
   */
  getBallots({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballots`),
        method: "GET"
      });
      const casted = castToBigNumber(response, ["yay", "nay", "pass"]);
      return casted;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Current proposal under evaluation.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-proposal
   */
  getCurrentProposal({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_proposal`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Current expected quorum.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-quorum
   */
  getCurrentQuorum({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_quorum`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description List of delegates with their voting weight, in number of rolls.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-listings
   */
  getVotesListings({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/listings`),
        method: "GET"
      });
      response.map((item) => {
        if (item.voting_power) {
          item.voting_power = new bignumber_default(item.voting_power);
        }
        return item;
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description List of proposals with number of supporters.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-proposals
   */
  getProposals({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/proposals`),
        method: "GET"
      });
      response.map((item) => {
        return item[1] = new bignumber_default(item[1]);
      });
      return response;
    });
  }
  /**
   *
   * @param data operation contents to forge
   * @param options contains generic configuration for rpc calls
   *
   * @description Forge an operation returning the unsigned bytes
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-forge-operations
   */
  forgeOperations(data, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/forge/operations`),
        method: "POST"
      }, data);
    });
  }
  /**
   *
   * @param signedOpBytes signed bytes to inject
   *
   * @description Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-injection-operation
   */
  injectOperation(signedOpBytes) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/injection/operation`),
        method: "POST"
      }, signedOpBytes);
    });
  }
  /**
   *
   * @param ops Operations to apply
   * @param options contains generic configuration for rpc calls
   *
   * @description Simulate the validation of an operation
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-preapply-operations
   */
  preapplyOperations(ops, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/preapply/operations`),
        method: "POST"
      }, ops);
      return response;
    });
  }
  /**
   *
   * @param contract address of the contract we want to get the entrypoints of
   *
   * @description Return the list of entrypoints of the contract
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-entrypoints
   *
   * @version 005_PsBABY5H
   */
  getEntrypoints(contract, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      this.validateContract(contract);
      const contractResponse = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/entrypoints`),
        method: "GET"
      });
      return contractResponse;
    });
  }
  /**
   * @param op Operation to run
   * @param options contains generic configuration for rpc calls
   *
   * @description Run an operation without signature checks
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-operation
   */
  runOperation(op, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_operation`),
        method: "POST"
      }, op);
      return response;
    });
  }
  /**
   * @param op Operation to simulate
   * @param options contains generic configuration for rpc calls
   *
   * @description Simulate an operation on the blockchain
   *
   * @see https://gitlab.com/tezos/tezos/-/blob/master/docs/api/nairobi-openapi.json
   */
  simulateOperation(op, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/simulate_operation`),
        method: "POST"
      }, op);
      return response;
    });
  }
  /**
   * @param code Code to run
   * @param options contains generic configuration for rpc calls
   *
   * @description Run a piece of code in the current context
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-code
   */
  runCode(code2, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_code`),
        method: "POST"
      }, code2);
      return response;
    });
  }
  /**
   * @param viewScriptParams Parameters of the script view to run
   * @param options contains generic configuration for rpc calls
   *
   * @description Simulate a call to a michelson view
   *
   */
  runScriptView(_a3, { block } = defaultRPCOptions) {
    var { unparsing_mode = "Readable" } = _a3, rest = __rest(_a3, ["unparsing_mode"]);
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_script_view`),
        method: "POST"
      }, Object.assign({ unparsing_mode }, rest));
    });
  }
  /**
   * @param viewParams Parameters of the view to run
   * @param options contains generic configuration for rpc calls
   *
   * @description Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.
   *
   */
  runView(_a3, { block } = defaultRPCOptions) {
    var { unparsing_mode = "Readable" } = _a3, rest = __rest(_a3, ["unparsing_mode"]);
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_view`),
        method: "POST"
      }, Object.assign({ unparsing_mode }, rest));
    });
  }
  getChainId() {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/chain_id`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param data Data to pack
   * @param options contains generic configuration for rpc calls
   *
   * @description Computes the serialized version of a data expression using the same algorithm as script instruction PACK
   * Note: You should always verify the packed bytes before signing or requesting that they be signed when using the the RPC to pack.
   * This precaution helps protect you and your applications users from RPC nodes that have been compromised.
   * A node that is operated by a bad actor, or compromised by a bad actor could return a fully formed operation that does not correspond to the input provided to the RPC endpoint.
   * A safer solution to pack and sign data would be to use the `packDataBytes` function available in the `@taquito/michel-codec` package.
   *
   * @example packData({ data: { string: "test" }, type: { prim: "string" } })
   *
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-pack-data
   */
  packData(data, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const _a3 = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/pack_data`),
        method: "POST"
      }, data), { gas } = _a3, rest = __rest(_a3, ["gas"]);
      let formattedGas = gas;
      const tryBigNumber = new bignumber_default(gas || "");
      if (!tryBigNumber.isNaN()) {
        formattedGas = tryBigNumber;
      }
      return Object.assign({ gas: formattedGas }, rest);
    });
  }
  /**
   *
   * @description Return rpc root url
   */
  getRpcUrl() {
    return this.url;
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Voting period of current block.
   *
   * @example getCurrentPeriod() will default to current voting period for /main/chains/block/head.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-period
   */
  getCurrentPeriod({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_period`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param options contains generic configuration for rpc calls
   *
   * @description Voting period of next block.
   *
   * @example getSuccessorPeriod() will default to successor voting period for /main/chains/block/head.
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-successor-period
   */
  getSuccessorPeriod({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/successor_period`),
        method: "GET"
      });
      return response;
    });
  }
  /**
   *
   * @param id Sapling state ID
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the value associated with a sapling state ID.
   *
   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-sapling-sapling-state-id-get-diff
   */
  getSaplingDiffById(id, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/sapling/${id}/get_diff`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param contract address of the contract we want to get the sapling diff
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the value associated with a sapling state.
   *
   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-contracts-contract-id-single-sapling-get-diff
   */
  getSaplingDiffByContract(contract, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/single_sapling_get_diff`),
        method: "GET"
      });
    });
  }
  getProtocols({ block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/protocols`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param tx_rollup_id the transaction rollup ID
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the state of a rollup
   *
   * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-state
   */
  getTxRollupState(txRollupId, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/state`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param tx_rollup_id the transaction rollup ID
   * @param block_level the block level
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the inbox of a transaction rollup
   *
   * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-inbox-block-level
   */
  getTxRollupInbox(txRollupId, blockLevel, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/inbox/${blockLevel}`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param contract address of the contract we want to retrieve storage information of
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the amount of used space in a contract's storage
   *
   * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage
   */
  getStorageUsedSpace(contract, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/storage/used_space`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param contract address of the contract we want to retrieve storage information of
   * @param options contains generic configuration for rpc calls
   *
   * @description Access the amount of paid space in a contract's storage
   *
   * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage
   */
  getStoragePaidSpace(contract, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/storage/paid_space`),
        method: "GET"
      });
    });
  }
  /**
   *
   * @param contract implicit or originated address we want to retrieve ticket balance of
   * @param ticket object to specify a ticket by ticketer, content type and content
   * @param options contains generic configuration for rpc calls
   * @description Access the contract's balance of ticket with specified ticketer, content type, and content.
   * @example ticket { ticketer: 'address', content_type: { prim: "string" }, content: { string: 'ticket1' } }
   * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes
   */
  getTicketBalance(contract, ticket, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/ticket_balance`),
        method: "POST"
      }, ticket);
    });
  }
  /**
   *
   * @param contract originated address we want to retrieve ticket balances of
   * @param options contains generic configuration for rpc calls
   * @description Access the complete list of tickets owned by the given contract by scanning the contract's storage.
   * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes
   */
  getAllTicketBalances(contract, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/all_ticket_balances`),
        method: "GET"
      });
    });
  }
  /**
   * @description List the prevalidated operations in mempool (accessibility of mempool depends on each rpc endpoint)
   * @param args has 5 optional properties. We support version 1 with new encoding as version 0 will be deprecated soon. The rest of the properties is to filter pending operations response
   * @default args { version: '1', applied: true, refused: true, outdated, true, branchRefused: true, branchDelayed: true, validationPass: undefined }
   * @see https://tezos.gitlab.io/CHANGES.html?highlight=pending_operations#id4
   */
  getPendingOperations(args = {}) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/mempool/pending_operations`),
        method: "GET",
        query: args
      });
    });
  }
  /**
   *
   * @param params contains the PVM kind and kernel to generate the origination proof from
   * @description rpc call to generate the origination proof needed for a smart rollup originate operation
   * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes
   */
  getOriginationProof(params, { block } = defaultRPCOptions) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.httpBackend.createRequest({
        url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/smart_rollups/all/origination_proof`),
        method: "POST"
      }, params);
    });
  }
};

// node_modules/rxjs/node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle2(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle2(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle2(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle2(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle2(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a3, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a3 = _parentage_1.return))
                _a3.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a3;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a3 = this._finalizers) !== null && _a3 !== void 0 ? _a3 : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a3 = context, errorThrown = _a3.errorThrown, error = _a3.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a3 = _this, operator = _a3.operator, source = _a3.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a3;
    return (_a3 = this.source) === null || _a3 === void 0 ? void 0 : _a3.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a3;
  return (_a3 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a3 !== void 0 ? _a3 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a3;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a3 = this.onFinalize) === null || _a3 === void 0 ? void 0 : _a3.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var id = 0;
    var run = function() {
      if (!subscriber.closed) {
        id = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id) {
        animationFrameProvider.cancelAnimationFrame(id);
      }
    };
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a3;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a3 = _b.return))
              _a3.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a3;
      return ((_a3 = this.observers) === null || _a3 === void 0 ? void 0 : _a3.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a3 = this, hasError = _a3.hasError, isStopped = _a3.isStopped, observers = _a3.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a3 = this, hasError = _a3.hasError, thrownError = _a3.thrownError, isStopped = _a3.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a3, _b;
    (_b = (_a3 = this.destination) === null || _a3 === void 0 ? void 0 : _a3.next) === null || _b === void 0 ? void 0 : _b.call(_a3, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a3, _b;
    (_b = (_a3 = this.destination) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b === void 0 ? void 0 : _b.call(_a3, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a3, _b;
    (_b = (_a3 = this.destination) === null || _a3 === void 0 ? void 0 : _a3.complete) === null || _b === void 0 ? void 0 : _b.call(_a3);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a3, _b;
    return (_b = (_a3 = this.source) === null || _a3 === void 0 ? void 0 : _a3.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a3 = this, hasError = _a3.hasError, thrownError = _a3.thrownError, _value = _a3._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a3 = this, isStopped = _a3.isStopped, _buffer = _a3._buffer, _infiniteTimeWindow = _a3._infiniteTimeWindow, _timestampProvider = _a3._timestampProvider, _windowTime = _a3._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a3 = this, _infiniteTimeWindow = _a3._infiniteTimeWindow, _buffer = _a3._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a3 = this, _bufferSize = _a3._bufferSize, _timestampProvider = _a3._timestampProvider, _buffer = _a3._buffer, _infiniteTimeWindow = _a3._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a3 = this, hasError = _a3.hasError, _hasValue = _a3._hasValue, _value = _a3._value, thrownError = _a3.thrownError, isStopped = _a3.isStopped, _isComplete = _a3._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a3 = this, _hasValue = _a3._hasValue, _value = _a3._value, _isComplete = _a3._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    var _a3;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = (_a3 = this.id) !== null && _a3 !== void 0 ? _a3 : this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a3 = this, id = _a3.id, scheduler = _a3.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a3;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a3 = actions[actions.length - 1]) === null || _a3 === void 0 ? void 0 : _a3.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler._scheduled === id) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/async.js
var asyncScheduler = new AsyncScheduler(AsyncAction);
var async = asyncScheduler;

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.flush(this);
    return 0;
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a3;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a3 = actions[actions.length - 1]) === null || _a3 === void 0 ? void 0 : _a3.id) !== id) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a3 = this, actions = _a3.actions, maxFrames = _a3.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return 1;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a3, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a3 = _b.sent(), value = _a3.value, done = _a3.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a3;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a3 = iterable_1.return))
          _a3.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process2(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a3;
  return __awaiter3(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a3 = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a3.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a3;
        var value;
        var done;
        try {
          _a3 = iterator2.next(), value = _a3.value, done = _a3.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm5/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init, 0, subscriber);
  } : init);
}

// node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a3 = this, kind = _a3.kind, value = _a3.value, error = _a3.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a3;
    return isFunction((_a3 = nextOrObserver) === null || _a3 === void 0 ? void 0 : _a3.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a3 = this, kind = _a3.kind, value = _a3.value, error = _a3.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a3, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a3 = observer.next) === null || _a3 === void 0 ? void 0 : _a3.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/isDate.js
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});
function timeout(config2, schedulerArg) {
  var _a3 = isValidDate(config2) ? { first: config2 } : typeof config2 === "number" ? { each: config2 } : config2, first2 = _a3.first, each = _a3.each, _b = _a3.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a3.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c, _d = _a3.meta, meta = _d === void 0 ? null : _d;
  if (first2 == null && each == null) {
    throw new TypeError("No timeout provided.");
  }
  return operate(function(source, subscriber) {
    var originalSourceSubscription;
    var timerSubscription;
    var lastValue = null;
    var seen = 0;
    var startTimer = function(delay2) {
      timerSubscription = executeSchedule(subscriber, scheduler, function() {
        try {
          originalSourceSubscription.unsubscribe();
          innerFrom(_with({
            meta,
            lastValue,
            seen
          })).subscribe(subscriber);
        } catch (err) {
          subscriber.error(err);
        }
      }, delay2);
    };
    originalSourceSubscription = source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      seen++;
      subscriber.next(lastValue = value);
      each > 0 && startTimer(each);
    }, void 0, void 0, function() {
      if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      }
      lastValue = null;
    }));
    !seen && startTimer(first2 != null ? typeof first2 === "number" ? first2 : +first2 - scheduler.now() : each);
  });
}
function timeoutErrorFactory(info) {
  throw new TimeoutError(info);
}

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;
function callOrApply(fn, args) {
  return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map(function(args) {
    return callOrApply(fn, args);
  });
}

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray2 = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf;
var objectProto = Object.prototype;
var getKeys = Object.keys;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray2(first_1)) {
      return { args: first_1, keys: null };
    }
    if (isPOJO(first_1)) {
      var keys = getKeys(first_1);
      return {
        args: keys.map(function(key) {
          return first_1[key];
        }),
        keys
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce(function(result, key, i) {
    return result[key] = values[i], result;
  }, {});
}

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a3 = argsArgArrayOrObject(args), observables = _a3.args, keys = _a3.keys;
  if (observables.length === 0) {
    return from([], scheduler);
  }
  var result = new Observable(combineLatestInit(observables, scheduler, keys ? function(values) {
    return createObject(keys, values);
  } : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity;
  }
  return function(subscriber) {
    maybeSchedule(scheduler, function() {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;
      var _loop_1 = function(i2) {
        maybeSchedule(scheduler, function() {
          var source = from(observables[i2], scheduler);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function(value) {
            values[i2] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function() {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
  var buffer2 = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer2.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer2.push(value);
  };
  var doInnerSub = function(value) {
    expand2 && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand2) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer2.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer2.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction(resultSelector)) {
    return mergeMap(function(a, i) {
      return map(function(b, ii) {
        return resultSelector(a, b, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity, concurrent);
}

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
function concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm5/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable(function(subscriber) {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/timer.js
function timer(dueTime, intervalOrScheduler, scheduler) {
  if (dueTime === void 0) {
    dueTime = 0;
  }
  if (scheduler === void 0) {
    scheduler = async;
  }
  var intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if (isScheduler(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new Observable(function(subscriber) {
    var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    var n = 0;
    return scheduler.schedule(function() {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(void 0, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/never.js
var NEVER = new Observable(noop);

// node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var isArray3 = Array.isArray;

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/range.js
function range(start, count2, scheduler) {
  if (count2 == null) {
    count2 = start;
    start = 0;
  }
  if (count2 <= 0) {
    return EMPTY;
  }
  var end = count2 + start;
  return new Observable(scheduler ? function(subscriber) {
    var n = start;
    return scheduler.schedule(function() {
      if (n < end) {
        subscriber.next(n++);
        this.schedule();
      } else {
        subscriber.complete();
      }
    });
  } : function(subscriber) {
    var n = start;
    while (n < end && !subscriber.closed) {
      subscriber.next(n++);
    }
    subscriber.complete();
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/catchError.js
function catchError(selector) {
  return operate(function(source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}

// node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
function fromSubscribable(subscribable) {
  return new Observable(function(subscriber) {
    return subscribable.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
var DEFAULT_CONFIG = {
  connector: function() {
    return new Subject();
  }
};
function connect(selector, config2) {
  if (config2 === void 0) {
    config2 = DEFAULT_CONFIG;
  }
  var connector = config2.connector;
  return operate(function(source, subscriber) {
    var subject = connector();
    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/take.js
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function(source, subscriber) {
    var previousKey;
    var first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
function distinctUntilKeyChanged(key, compare) {
  return distinctUntilChanged(function(x, y) {
    return compare ? compare(x[key], y[key]) : x[key] === y[key];
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm5/internal/operators/endWith.js
function endWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  return function(source) {
    return concat(source, of.apply(void 0, __spreadArray([], __read(values))));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/first.js
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v, i) {
      return predicate(v, i, source);
    }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/multicast.js
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
    return subjectOrSubjectFactory;
  };
  if (isFunction(selector)) {
    return connect(selector, {
      connector: subjectFactory
    });
  }
  return function(source) {
    return new ConnectableObservable(source, subjectFactory);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/pluck.js
function pluck() {
  var properties = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    properties[_i] = arguments[_i];
  }
  var length = properties.length;
  if (length === 0) {
    throw new Error("list of properties cannot be empty.");
  }
  return map(function(x) {
    var currentProp = x;
    for (var i = 0; i < length; i++) {
      var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
      if (typeof p !== "undefined") {
        currentProp = p;
      } else {
        return void 0;
      }
    }
    return currentProp;
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/publish.js
function publish(selector) {
  return selector ? function(source) {
    return connect(selector)(source);
  } : function(source) {
    return multicast(new Subject())(source);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/retry.js
function retry(configOrCount) {
  if (configOrCount === void 0) {
    configOrCount = Infinity;
  }
  var config2;
  if (configOrCount && typeof configOrCount === "object") {
    config2 = configOrCount;
  } else {
    config2 = {
      count: configOrCount
    };
  }
  var _a3 = config2.count, count2 = _a3 === void 0 ? Infinity : _a3, delay2 = config2.delay, _b = config2.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
  return count2 <= 0 ? identity : operate(function(source, subscriber) {
    var soFar = 0;
    var innerSub;
    var subscribeForRetry = function() {
      var syncUnsub = false;
      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        if (resetOnSuccess) {
          soFar = 0;
        }
        subscriber.next(value);
      }, void 0, function(err) {
        if (soFar++ < count2) {
          var resub_1 = function() {
            if (innerSub) {
              innerSub.unsubscribe();
              innerSub = null;
              subscribeForRetry();
            } else {
              syncUnsub = true;
            }
          };
          if (delay2 != null) {
            var notifier = typeof delay2 === "number" ? timer(delay2) : innerFrom(delay2(err, soFar));
            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function() {
              notifierSubscriber_1.unsubscribe();
              resub_1();
            }, function() {
              subscriber.complete();
            });
            notifier.subscribe(notifierSubscriber_1);
          } else {
            resub_1();
          }
        } else {
          subscriber.error(err);
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        subscribeForRetry();
      }
    };
    subscribeForRetry();
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/share.js
function share(options) {
  if (options === void 0) {
    options = {};
  }
  var _a3 = options.connector, connector = _a3 === void 0 ? function() {
    return new Subject();
  } : _a3, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
  return function(wrapperSource) {
    var connection;
    var resetConnection;
    var subject;
    var refCount2 = 0;
    var hasCompleted = false;
    var hasErrored = false;
    var cancelReset = function() {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = void 0;
    };
    var reset = function() {
      cancelReset();
      connection = subject = void 0;
      hasCompleted = hasErrored = false;
    };
    var resetAndUnsubscribe = function() {
      var conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return operate(function(source, subscriber) {
      refCount2++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(function() {
        refCount2--;
        if (refCount2 === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount2 > 0) {
        connection = new SafeSubscriber({
          next: function(value) {
            return dest.next(value);
          },
          error: function(err) {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: function() {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        innerFrom(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  if (on === true) {
    reset();
    return;
  }
  if (on === false) {
    return;
  }
  var onSubscriber = new SafeSubscriber({
    next: function() {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
}

// node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
function shareReplay(configOrBufferSize, windowTime2, scheduler) {
  var _a3, _b, _c;
  var bufferSize;
  var refCount2 = false;
  if (configOrBufferSize && typeof configOrBufferSize === "object") {
    _a3 = configOrBufferSize.bufferSize, bufferSize = _a3 === void 0 ? Infinity : _a3, _b = configOrBufferSize.windowTime, windowTime2 = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount2 = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return share({
    connector: function() {
      return new ReplaySubject(bufferSize, windowTime2, scheduler);
    },
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount2
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/startWith.js
function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler = popScheduler(values);
  return operate(function(source, subscriber) {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate(function(source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function() {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function() {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate(function(source, subscriber) {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function() {
      return subscriber.complete();
    }, noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a3;
    (_a3 = tapObserver.subscribe) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a4;
      (_a4 = tapObserver.next) === null || _a4 === void 0 ? void 0 : _a4.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a4;
      isUnsub = false;
      (_a4 = tapObserver.complete) === null || _a4 === void 0 ? void 0 : _a4.call(tapObserver);
      subscriber.complete();
    }, function(err) {
      var _a4;
      isUnsub = false;
      (_a4 = tapObserver.error) === null || _a4 === void 0 ? void 0 : _a4.call(tapObserver, err);
      subscriber.error(err);
    }, function() {
      var _a4, _b;
      if (isUnsub) {
        (_a4 = tapObserver.unsubscribe) === null || _a4 === void 0 ? void 0 : _a4.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity;
}

// node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/@taquito/michelson-encoder/dist/taquito-michelson-encoder.es6.js
var import_fast_json_stable_stringify = __toESM(require_fast_json_stable_stringify());
var _a$1;
var InvalidMapTypeError = class extends TaquitoError {
  constructor(mapType, reason) {
    super();
    this.mapType = mapType;
    this.reason = reason;
    this.message = `The map type '${JSON.stringify(mapType)}' is invalid. Reason: ${reason}.`;
    this.name = "InvalidMapTypeError";
  }
};
var michelsonMapTypeSymbol = Symbol.for("taquito-michelson-map-type-symbol");
function validateMapType(value) {
  if (!("prim" in value)) {
    throw new InvalidMapTypeError(value, `Missing 'prim' field`);
  }
  if (!["map", "big_map"].includes(value.prim)) {
    throw new InvalidMapTypeError(value, `The prim field should be 'map' or 'big_map'`);
  }
  if (!("args" in value)) {
    throw new InvalidMapTypeError(value, `Missing 'args' field`);
  }
  if (!Array.isArray(value.args)) {
    throw new InvalidMapTypeError(value, `The 'args' field should be an array`);
  }
  if (value.args.length !== 2) {
    throw new InvalidMapTypeError(value, `The 'args' field should have 2 elements`);
  }
}
var MapTypecheckError = class extends TaquitoError {
  constructor(value, type, objectType, reason) {
    super();
    this.value = value;
    this.type = type;
    this.reason = reason;
    this.name = "MapTypecheckError";
    this.message = `The ${objectType} provided: ${JSON.stringify(value)} is not compatible with the expected michelson type: ${JSON.stringify(type)}. Reason: ${JSON.stringify(reason)}.`;
    this.name = "MapTypecheckError";
  }
};
var MichelsonMap = class _MichelsonMap {
  /**
   * @param mapType If specified key and value will be type-checked before being added to the map
   *
   * @example new MichelsonMap({ prim: "map", args: [{prim: "string"}, {prim: "int"}]})
   */
  constructor(mapType) {
    this.valueMap = /* @__PURE__ */ new Map();
    this.keyMap = /* @__PURE__ */ new Map();
    this[_a$1] = true;
    if (mapType) {
      this.setType(mapType);
    }
  }
  // Used to check if an object is a michelson map.
  // Using instanceof was not working for project that had multiple instance of taquito dependencies
  // as the class constructor is different
  static isMichelsonMap(obj) {
    return obj && obj[michelsonMapTypeSymbol] === true;
  }
  setType(mapType) {
    validateMapType(mapType);
    this.keySchema = new Schema(mapType.args[0]);
    this.valueSchema = new Schema(mapType.args[1]);
  }
  removeType() {
    this.keySchema = void 0;
    this.valueSchema = void 0;
  }
  static fromLiteral(obj, mapType) {
    const map2 = new _MichelsonMap(mapType);
    Object.keys(obj).forEach((key) => {
      map2.set(key, obj[key]);
    });
    return map2;
  }
  typecheckKey(key) {
    if (!this.keySchema) {
      return;
    }
    this.keySchema.Typecheck(key);
  }
  typecheckValue(value) {
    if (!this.valueSchema) {
      return;
    }
    this.valueSchema.Typecheck(value);
  }
  /**
   * @throws {@link MapTypecheckError} when the argument passed does not match the expected schema for value
   */
  assertTypecheckValue(value) {
    try {
      this.typecheckValue(value);
    } catch (e) {
      throw new MapTypecheckError(value, this.valueSchema, "value", e);
    }
  }
  /**
   * @throws {@link MapTypecheckError} when the argument passed does not match the expected schema for key
   */
  assertTypecheckKey(key) {
    try {
      this.typecheckKey(key);
    } catch (e) {
      throw new MapTypecheckError(key, this.keySchema, "key", e);
    }
  }
  serializeDeterministically(key) {
    return (0, import_fast_json_stable_stringify.default)(key);
  }
  *keys() {
    for (const [key] of this.entries()) {
      yield key;
    }
  }
  *values() {
    for (const [, value] of this.entries()) {
      yield value;
    }
  }
  *entries() {
    for (const key of this.valueMap.keys()) {
      yield [this.keyMap.get(key), this.valueMap.get(key)];
    }
  }
  get(key) {
    this.assertTypecheckKey(key);
    const strKey = this.serializeDeterministically(key);
    return this.valueMap.get(strKey);
  }
  /**
   *
   * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.
   *
   * @example map.set("myKey", "myValue") // Using a string as key
   *
   * @example map.set({0: "test", 1: "test1"}, "myValue") // Using a pair as key
   *
   * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.
   *
   * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, "myValue") and map.set(null, "myValue").
   *
   * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.
   */
  set(key, value) {
    this.assertTypecheckKey(key);
    this.assertTypecheckValue(value);
    const strKey = this.serializeDeterministically(key);
    this.keyMap.set(strKey, key);
    this.valueMap.set(strKey, value);
  }
  delete(key) {
    this.assertTypecheckKey(key);
    this.keyMap.delete(this.serializeDeterministically(key));
    this.valueMap.delete(this.serializeDeterministically(key));
  }
  has(key) {
    this.assertTypecheckKey(key);
    const strKey = this.serializeDeterministically(key);
    return this.keyMap.has(strKey) && this.valueMap.has(strKey);
  }
  clear() {
    this.keyMap.clear();
    this.valueMap.clear();
  }
  get size() {
    return this.keyMap.size;
  }
  forEach(cb) {
    for (const [key, value] of this.entries()) {
      cb(value, key, this);
    }
  }
};
_a$1 = michelsonMapTypeSymbol;
var TokenValidationError = class extends TaquitoError {
  constructor(value, token, baseMessage) {
    super();
    this.value = value;
    this.token = token;
    this.name = "TokenValidationError";
    const annot = this.token.annot();
    const annotText = annot ? `[${annot}] ` : "";
    this.message = `${annotText}${baseMessage}`;
  }
};
var Token = class {
  constructor(val, idx, fac) {
    this.val = val;
    this.idx = idx;
    this.fac = fac;
    this.createToken = this.fac;
  }
  typeWithoutAnnotations() {
    const handleMichelsonExpression = (val) => {
      if (typeof val === "object") {
        if (Array.isArray(val)) {
          const array = val;
          return array.map((item) => handleMichelsonExpression(item));
        }
        const extended = val;
        if (extended.args) {
          return {
            prim: extended.prim,
            args: extended.args.map((x) => handleMichelsonExpression(x))
          };
        } else {
          return {
            prim: extended.prim
          };
        }
      }
      return val;
    };
    const handleMichelsonExtended = (val) => {
      if (val.args) {
        return {
          prim: val.prim,
          args: val.args.map((x) => handleMichelsonExpression(x))
        };
      } else {
        return {
          prim: val.prim
        };
      }
    };
    return handleMichelsonExtended(this.val);
  }
  annot() {
    return (Array.isArray(this.val.annots) && this.val.annots.length > 0 ? this.val.annots[0] : String(this.idx)).replace(/(%|:)(_Liq_entry_)?/, "");
  }
  hasAnnotations() {
    return Array.isArray(this.val.annots) && this.val.annots.length;
  }
  get tokenVal() {
    return this.val;
  }
  ExtractSignature() {
    return [[this.ExtractSchema()]];
  }
};
var ComparableToken = class extends Token {
  compare(o1, o2) {
    if (o1 === o2) {
      return 0;
    }
    return o1 < o2 ? -1 : 1;
  }
};
var BigMapValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "BigMapValidationError";
  }
};
var BigMapToken = class _BigMapToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get ValueSchema() {
    return this.createToken(this.val.args[1], 0);
  }
  get KeySchema() {
    return this.createToken(this.val.args[0], 0);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      big_map: {
        key: this.KeySchema.ExtractSchema(),
        value: this.ValueSchema.ExtractSchema()
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _BigMapToken.prim,
      schema: {
        key: this.KeySchema.generateSchema(),
        value: this.ValueSchema.generateSchema()
      }
    };
  }
  /**
   * @throws {@link BigMapValidationError}
   */
  validate(value) {
    if (!MichelsonMap.isMichelsonMap(value)) {
      throw new BigMapValidationError(value, this, `Value ${JSON.stringify(value)} is not a MichelsonMap`);
    }
  }
  objLitToMichelsonMap(val) {
    if (val instanceof MichelsonMap)
      return val;
    if (typeof val === "object") {
      if (Object.keys(val).length === 0) {
        return new MichelsonMap();
      } else {
        return MichelsonMap.fromLiteral(val);
      }
    }
    return val;
  }
  /**
   * @throws {@link BigMapValidationError}
   */
  Encode(args) {
    const val = this.objLitToMichelsonMap(args.pop());
    this.validate(val);
    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map((key) => {
      return {
        prim: "Elt",
        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]
      };
    });
  }
  /**
   * @throws {@link BigMapValidationError}
   */
  EncodeObject(args, semantic) {
    const val = this.objLitToMichelsonMap(args);
    this.validate(val);
    if (semantic && semantic[_BigMapToken.prim]) {
      return semantic[_BigMapToken.prim](val, this.val);
    }
    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map((key) => {
      return {
        prim: "Elt",
        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]
      };
    });
  }
  /**
   * @throws {@link InvalidMapTypeError} when the argument passed to val is an array but not a valid map type
   * @throws {@link BigMapValidationError} when the value is invalid
   */
  Execute(val, semantic) {
    if (semantic && semantic[_BigMapToken.prim]) {
      return semantic[_BigMapToken.prim](val, this.val);
    }
    if (Array.isArray(val)) {
      const map2 = new MichelsonMap(this.val);
      val.forEach((current) => {
        map2.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));
      });
      return map2;
    } else if ("int" in val) {
      return val.int;
    } else {
      throw new BigMapValidationError(val, this, `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(val)}`);
    }
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_BigMapToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.KeySchema.findAndReturnTokens(tokenToFind, tokens2);
    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
BigMapToken.prim = "big_map";
var OrTokenDecodingError = class extends TaquitoError {
  constructor(message) {
    super(message);
    this.message = message;
    this.name = "OrTokenDecodingError";
  }
};
var OrToken = class _OrToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Encode(args) {
    const label = args[args.length - 1];
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof _OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof _OrToken)) {
      args.pop();
      return { prim: "Left", args: [leftToken.Encode(args)] };
    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof _OrToken)) {
      args.pop();
      return { prim: "Right", args: [rightToken.Encode(args)] };
    } else {
      if (leftToken instanceof _OrToken) {
        const val = leftToken.Encode(args);
        if (val) {
          return { prim: "Left", args: [val] };
        }
      }
      if (rightToken instanceof _OrToken) {
        const val = rightToken.Encode(args);
        if (val) {
          return { prim: "Right", args: [val] };
        }
      }
      return null;
    }
  }
  ExtractSignature() {
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof _OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    const newSig = [];
    if (leftToken instanceof _OrToken) {
      newSig.push(...leftToken.ExtractSignature());
    } else {
      for (const sig of leftToken.ExtractSignature()) {
        newSig.push([leftToken.annot(), ...sig]);
      }
    }
    if (rightToken instanceof _OrToken) {
      newSig.push(...rightToken.ExtractSignature());
    } else {
      for (const sig of rightToken.ExtractSignature()) {
        newSig.push([rightToken.annot(), ...sig]);
      }
    }
    return newSig;
  }
  EncodeObject(args, semantic) {
    const label = Object.keys(args)[0];
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof _OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof _OrToken)) {
      return { prim: "Left", args: [leftToken.EncodeObject(args[label], semantic)] };
    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof _OrToken)) {
      return { prim: "Right", args: [rightToken.EncodeObject(args[label], semantic)] };
    } else {
      if (leftToken instanceof _OrToken) {
        const val = leftToken.EncodeObject(args, semantic);
        if (val) {
          return { prim: "Left", args: [val] };
        }
      }
      if (rightToken instanceof _OrToken) {
        const val = rightToken.EncodeObject(args, semantic);
        if (val) {
          return { prim: "Right", args: [val] };
        }
      }
      return null;
    }
  }
  /**
   * @throws {@link OrTokenDecodingError}
   */
  Execute(val, semantics) {
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof _OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    if (val.prim === "Right") {
      if (rightToken instanceof _OrToken) {
        return rightToken.Execute(val.args[0], semantics);
      } else {
        return {
          [rightToken.annot()]: rightToken.Execute(val.args[0], semantics)
        };
      }
    } else if (val.prim === "Left") {
      if (leftToken instanceof _OrToken) {
        return leftToken.Execute(val.args[0], semantics);
      }
      return {
        [leftToken.annot()]: leftToken.Execute(val.args[0], semantics)
      };
    } else {
      throw new OrTokenDecodingError(`Was expecting Left or Right prim but got: ${JSON.stringify(val.prim)}`);
    }
  }
  traversal(getLeftValue, getRightValue, concat3) {
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    let leftValue;
    if (leftToken instanceof _OrToken && !leftToken.hasAnnotations()) {
      leftValue = getLeftValue(leftToken);
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    } else {
      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    let rightValue;
    if (rightToken instanceof _OrToken && !rightToken.hasAnnotations()) {
      rightValue = getRightValue(rightToken);
    } else {
      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };
    }
    const res = concat3(leftValue, rightValue);
    return res;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema(), (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue));
  }
  generateSchema() {
    return {
      __michelsonType: _OrToken.prim,
      schema: this.traversal((leftToken) => {
        if (leftToken instanceof _OrToken && !leftToken.hasAnnotations()) {
          return leftToken.generateSchema().schema;
        } else {
          return leftToken.generateSchema();
        }
      }, (rightToken) => {
        if (rightToken instanceof _OrToken && !rightToken.hasAnnotations()) {
          return rightToken.generateSchema().schema;
        } else {
          return rightToken.generateSchema();
        }
      }, (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue))
    };
  }
  findToken(label) {
    const leftToken = this.createToken(this.val.args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof _OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof _OrToken) && leftToken instanceof ComparableToken) {
      return leftToken;
    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof _OrToken) && rightToken instanceof ComparableToken) {
      return rightToken;
    } else {
      if (leftToken instanceof _OrToken) {
        const tok = leftToken.findToken(label);
        if (tok) {
          return tok;
        }
      }
      if (rightToken instanceof _OrToken) {
        const tok = rightToken.findToken(label);
        if (tok) {
          return tok;
        }
      }
      return null;
    }
  }
  compare(val1, val2) {
    const labelVal1 = Object.keys(val1)[0];
    const labelVal2 = Object.keys(val2)[0];
    if (labelVal1 === labelVal2) {
      const token = this.findToken(labelVal1);
      if (token instanceof ComparableToken) {
        return token.compare(val1[labelVal1], val2[labelVal1]);
      }
    } else {
      const encoded1 = JSON.stringify(this.EncodeObject(val1));
      const encoded2 = JSON.stringify(this.EncodeObject(val2));
      return encoded1 < encoded2 ? -1 : 1;
    }
  }
  ToKey(val) {
    return this.Execute(val);
  }
  ToBigMapKey(val) {
    return {
      key: this.EncodeObject(val),
      type: this.typeWithoutAnnotations()
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_OrToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.traversal((leftToken) => leftToken.findAndReturnTokens(tokenToFind, tokens2), (rightToken) => rightToken.findAndReturnTokens(tokenToFind, tokens2), (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue));
    return tokens2;
  }
};
OrToken.prim = "or";
var TokenArgumentValidationError = class extends TaquitoError {
  constructor(message) {
    super(message);
    this.message = message;
    this.name = "TokenArgumentValidationError";
  }
};
var TokenComparisonError = class extends TaquitoError {
  constructor(val1, val2) {
    super();
    this.val1 = val1;
    this.val2 = val2;
    this.name = "TokenComparisonError";
    this.message = `Tokens ${JSON.stringify(val1)} and ${JSON.stringify(val2)} are not comparable`;
  }
};
function collapse$1(val, prim = PairToken.prim) {
  if (Array.isArray(val)) {
    return collapse$1({
      prim,
      args: val
    }, prim);
  }
  if (val.args === void 0) {
    throw new TokenArgumentValidationError(`The value ${JSON.stringify(val)} is an invalid PairToken with no arguments, a pair must have two or more arguments.`);
  }
  if (val.args.length > 2) {
    return [
      val.args[0],
      {
        prim,
        args: val.args.slice(1)
      }
    ];
  }
  return [val.args[0], val.args[1]];
}
var PairToken = class _PairToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(Array.isArray(val) ? {
      prim: _PairToken.prim,
      args: val
    } : val.prim ? val : {
      prim: _PairToken.prim,
      args: val
    }, idx, fac);
  }
  args() {
    return collapse$1(this.val);
  }
  tokens() {
    let cnt = 0;
    return this.args().map((a) => {
      const tok = this.createToken(a, this.idx + cnt);
      if (tok instanceof _PairToken) {
        cnt += Object.keys(tok.ExtractSchema()).length;
      } else {
        cnt++;
      }
      return tok;
    });
  }
  Encode(args) {
    return {
      prim: "Pair",
      args: this.tokens().map((t) => t.Encode(args))
    };
  }
  ExtractSignature() {
    const args = this.args();
    const leftToken = this.createToken(args[0], this.idx);
    let keyCount = 1;
    if (leftToken instanceof OrToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    const rightToken = this.createToken(args[1], this.idx + keyCount);
    const newSig = [];
    for (const leftSig of leftToken.ExtractSignature()) {
      for (const rightSig of rightToken.ExtractSignature()) {
        newSig.push([...leftSig, ...rightSig]);
      }
    }
    return newSig;
  }
  ToBigMapKey(val) {
    return {
      key: this.EncodeObject(val),
      type: this.typeWithoutAnnotations()
    };
  }
  ToKey(val) {
    return this.Execute(val);
  }
  EncodeObject(args, semantic) {
    const [leftToken, rightToken] = this.tokens();
    let leftValue;
    if (leftToken instanceof _PairToken && !leftToken.hasAnnotations()) {
      leftValue = args;
    } else {
      leftValue = args[leftToken.annot()];
    }
    let rightValue;
    if (rightToken instanceof _PairToken && !rightToken.hasAnnotations()) {
      rightValue = args;
    } else {
      rightValue = args[rightToken.annot()];
    }
    return {
      prim: "Pair",
      args: [
        leftToken.EncodeObject(leftValue, semantic),
        rightToken.EncodeObject(rightValue, semantic)
      ]
    };
  }
  traversal(getLeftValue, getRightValue) {
    const args = this.args();
    const leftToken = this.createToken(args[0], this.idx);
    let keyCount = 1;
    let leftValue;
    if (leftToken instanceof _PairToken) {
      keyCount = Object.keys(leftToken.ExtractSchema()).length;
    }
    if (leftToken instanceof _PairToken && !leftToken.hasAnnotations()) {
      leftValue = getLeftValue(leftToken);
    } else {
      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };
    }
    const rightToken = this.createToken(args[1], this.idx + keyCount);
    let rightValue;
    if (rightToken instanceof _PairToken && !rightToken.hasAnnotations()) {
      rightValue = getRightValue(rightToken);
    } else {
      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };
    }
    const res = Object.assign(Object.assign({}, leftValue), rightValue);
    return res;
  }
  Execute(val, semantics) {
    const args = collapse$1(val, "Pair");
    return this.traversal((leftToken) => leftToken.Execute(args[0], semantics), (rightToken) => rightToken.Execute(args[1], semantics));
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema());
  }
  generateSchema() {
    return {
      __michelsonType: _PairToken.prim,
      schema: this.traversal((leftToken) => {
        if (leftToken instanceof _PairToken && !leftToken.hasAnnotations()) {
          return leftToken.generateSchema().schema;
        } else {
          return leftToken.generateSchema();
        }
      }, (rightToken) => {
        if (rightToken instanceof _PairToken && !rightToken.hasAnnotations()) {
          return rightToken.generateSchema().schema;
        } else {
          return rightToken.generateSchema();
        }
      })
    };
  }
  /**
   * @throws {@link TokenComparisonError}
   */
  compare(val1, val2) {
    const [leftToken, rightToken] = this.tokens();
    const getValue = (token, args) => {
      if (token instanceof _PairToken && !token.hasAnnotations()) {
        return args;
      } else {
        return args[token.annot()];
      }
    };
    if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {
      const result = leftToken.compare(getValue(leftToken, val1), getValue(leftToken, val2));
      if (result === 0) {
        return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));
      }
      return result;
    }
    throw new TokenComparisonError(val1, val2);
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_PairToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.tokens().map((t) => t.findAndReturnTokens(tokenToFind, tokens2));
    return tokens2;
  }
};
PairToken.prim = "pair";
var NatValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "NatValidationError";
  }
};
var NatToken = class _NatToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return new bignumber_default(val[Object.keys(val)[0]]);
  }
  /**
   * @throws {@link NatValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { int: new bignumber_default(val).toFixed() };
  }
  /**
   * @throws {@link NatValidationError}
   */
  validate(val) {
    const bigNumber = new bignumber_default(val);
    if (bigNumber.isNaN()) {
      throw new NatValidationError(val, this, `Value is not a number: ${JSON.stringify(val)}`);
    }
    if (bigNumber.isNegative()) {
      throw new NatValidationError(val, this, `Value cannot be negative: ${JSON.stringify(val)}`);
    }
  }
  /**
   * @throws {@link NatValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_NatToken.prim]) {
      return semantic[_NatToken.prim](val);
    }
    return { int: new bignumber_default(val).toFixed() };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _NatToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _NatToken.prim,
      schema: _NatToken.prim
    };
  }
  ToBigMapKey(val) {
    return {
      key: { int: String(val) },
      type: { prim: _NatToken.prim }
    };
  }
  ToKey({ int }) {
    return new bignumber_default(int);
  }
  compare(nat1, nat2) {
    const o1 = Number(nat1);
    const o2 = Number(nat2);
    if (o1 === o2) {
      return 0;
    }
    return o1 < o2 ? -1 : 1;
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_NatToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
NatToken.prim = "nat";
var StringToken = class _StringToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return val[Object.keys(val)[0]];
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _StringToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _StringToken.prim,
      schema: _StringToken.prim
    };
  }
  Encode(args) {
    const val = args.pop();
    return { string: val };
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_StringToken.prim]) {
      return semantic[_StringToken.prim](val);
    }
    return { string: val };
  }
  ToKey({ string }) {
    return string;
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _StringToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_StringToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
StringToken.prim = "string";
var AddressValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "AddressValidationError";
  }
};
var AddressToken = class _AddressToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  ToBigMapKey(val) {
    const decoded = b58decode(val);
    return {
      key: { bytes: decoded },
      type: { prim: "bytes" }
    };
  }
  /**
   * @throws {@link AddressValidationError}
   */
  validate(value) {
    if (validateAddress(value) !== ValidationResult.VALID) {
      throw new AddressValidationError(value, this, `Address is not valid: ${JSON.stringify(value)}`);
    }
  }
  /**
   * @throws {@link AddressValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link AddressValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_AddressToken.prim]) {
      return semantic[_AddressToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @throws {@link AddressValidationError}
   */
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    if (!val.bytes) {
      throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${JSON.stringify(val)}`);
    }
    return encodePubKey(val.bytes);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _AddressToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _AddressToken.prim,
      schema: _AddressToken.prim
    };
  }
  /**
   * @throws {@link AddressValidationError}
   */
  ToKey({ bytes, string }) {
    if (string) {
      return string;
    }
    if (!bytes) {
      throw new AddressValidationError({ bytes, string }, this, `cannot be missing both string and bytes ${JSON.stringify({ string, bytes })}`);
    }
    return encodePubKey(bytes);
  }
  compare(address1, address2) {
    const isImplicit = (address) => {
      return address.startsWith("tz");
    };
    const implicit1 = isImplicit(address1);
    const implicit2 = isImplicit(address2);
    if (implicit1 && !implicit2) {
      return -1;
    } else if (implicit2 && !implicit1) {
      return 1;
    }
    return super.compare(address1, address2);
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_AddressToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
AddressToken.prim = "address";
var MapValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "MapValidationError";
  }
};
var MapToken = class _MapToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get ValueSchema() {
    return this.createToken(this.val.args[1], 0);
  }
  get KeySchema() {
    return this.createToken(this.val.args[0], 0);
  }
  /**
   * @throws {@link MapValidationError}
   */
  validate(value) {
    if (!MichelsonMap.isMichelsonMap(value)) {
      throw new MapValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid MichelsonMap`);
    }
  }
  Execute(val, semantics) {
    const map2 = new MichelsonMap(this.val);
    val.forEach((current) => {
      map2.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1], semantics));
    });
    return map2;
  }
  objLitToMichelsonMap(val) {
    if (val instanceof MichelsonMap)
      return val;
    if (typeof val === "object") {
      if (Object.keys(val).length === 0) {
        return new MichelsonMap();
      } else {
        return MichelsonMap.fromLiteral(val);
      }
    }
    return val;
  }
  /**
   * @throws {@link MapValidationError}
   */
  Encode(args) {
    const val = this.objLitToMichelsonMap(args.pop());
    this.validate(val);
    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map((key) => {
      return {
        prim: "Elt",
        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]
      };
    });
  }
  /**
   * @throws {@link MapValidationError}
   */
  EncodeObject(args, semantic) {
    const val = this.objLitToMichelsonMap(args);
    this.validate(val);
    if (semantic && semantic[_MapToken.prim]) {
      return semantic[_MapToken.prim](val);
    }
    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map((key) => {
      return {
        prim: "Elt",
        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]
      };
    });
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      map: {
        key: this.KeySchema.ExtractSchema(),
        value: this.ValueSchema.ExtractSchema()
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _MapToken.prim,
      schema: {
        key: this.KeySchema.generateSchema(),
        value: this.ValueSchema.generateSchema()
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_MapToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.KeySchema.findAndReturnTokens(tokenToFind, tokens2);
    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
MapToken.prim = "map";
var BoolToken = class _BoolToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return String(val.prim).toLowerCase() === "true" ? true : false;
  }
  Encode(args) {
    const val = args.pop();
    return { prim: val ? "True" : "False" };
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_BoolToken.prim]) {
      return semantic[_BoolToken.prim](val);
    }
    return { prim: val ? "True" : "False" };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _BoolToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _BoolToken.prim,
      schema: _BoolToken.prim
    };
  }
  ToBigMapKey(val) {
    return {
      key: this.EncodeObject(val),
      type: { prim: _BoolToken.prim }
    };
  }
  ToKey(val) {
    return this.EncodeObject(val);
  }
  compare(val1, val2) {
    if (val1 && val2 || !val1 && !val2) {
      return 0;
    } else if (val1) {
      return 1;
    } else {
      return -1;
    }
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_BoolToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
BoolToken.prim = "bool";
var TxRollupL2AddressValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "TxRollupL2AddressValidationError";
  }
};
var TxRollupL2AddressToken = class _TxRollupL2AddressToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  ToBigMapKey(val) {
    const decoded = b58decodeL2Address(val);
    return {
      key: { bytes: decoded },
      type: { prim: "bytes" }
    };
  }
  /**
   * @throws {@link TxRollupL2AddressValidationError}
   */
  validate(value) {
    if (validateAddress(value) !== ValidationResult.VALID) {
      throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${JSON.stringify(value)}`);
    }
  }
  /**
   * @throws {@link TxRollupL2AddressValidationError}
   */
  Encode(args) {
    const val = args.pop();
    if (!val) {
      throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> "${JSON.stringify(val)}"`);
    }
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link TxRollupL2AddressValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_TxRollupL2AddressToken.prim]) {
      return semantic[_TxRollupL2AddressToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @throws {@link TxRollupL2AddressValidationError}
   */
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    if (!val.bytes) {
      throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`);
    }
    return encodeL2Address(val.bytes);
  }
  ExtractSchema() {
    return _TxRollupL2AddressToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _TxRollupL2AddressToken.prim,
      schema: _TxRollupL2AddressToken.prim
    };
  }
  /**
   * @throws {@link TxRollupL2AddressValidationError}
   */
  ToKey({ bytes, string }) {
    if (string) {
      return string;
    }
    if (!bytes) {
      throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${JSON.stringify(bytes)}`);
    }
    return encodeL2Address(bytes);
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_TxRollupL2AddressToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
TxRollupL2AddressToken.prim = "tx_rollup_l2_address";
var ContractValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "ContractValidationError";
  }
};
var ContractToken = class _ContractToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link ContractValidationError}
   */
  validate(value) {
    if (validateAddress(value) !== ValidationResult.VALID) {
      throw new ContractValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid contract address.`);
    }
    return null;
  }
  /**
   * @throws {@link ContractValidationError}
   */
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    if (!val.bytes) {
      throw new ContractValidationError(val, this, `Value ${JSON.stringify(val)} is not a valid contract address. must contain bytes or string.`);
    }
    return encodePubKey(val.bytes);
  }
  /**
   * @throws {@link ContractValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link ContractValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_ContractToken.prim]) {
      return semantic[_ContractToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _ContractToken.prim;
  }
  generateSchema() {
    const valueSchema = this.createToken(this.val.args[0], 0);
    return {
      __michelsonType: _ContractToken.prim,
      schema: {
        parameter: this.val.args[0] ? valueSchema.generateSchema() : {}
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_ContractToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
ContractToken.prim = "contract";
var ListValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "ListValidationError";
  }
};
var ListToken = class _ListToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get valueSchema() {
    return this.createToken(this.val.args[0], this.idx);
  }
  /**
   * @throws {@link ListValidationError}
   */
  validate(value) {
    if (!Array.isArray(value)) {
      throw new ListValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid array`);
    }
  }
  /**
   * @throws {@link ListValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    const schema = this.createToken(this.val.args[0], 0);
    return val.reduce((prev, current) => {
      return [...prev, schema.EncodeObject(current)];
    }, []);
  }
  /**
   * @throws {@link ListValidationError}
   */
  Execute(val, semantics) {
    const schema = this.createToken(this.val.args[0], 0);
    this.validate(val);
    return val.reduce((prev, current) => {
      return [...prev, schema.Execute(current, semantics)];
    }, []);
  }
  /**
   * @throws {@link ListValidationError}
   */
  EncodeObject(args, semantic) {
    const schema = this.createToken(this.val.args[0], 0);
    this.validate(args);
    if (semantic && semantic[_ListToken.prim]) {
      return semantic[_ListToken.prim](args);
    }
    return args.reduce((prev, current) => {
      return [...prev, schema.EncodeObject(current)];
    }, []);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      [_ListToken.prim]: this.valueSchema.ExtractSchema()
    };
  }
  generateSchema() {
    return {
      __michelsonType: _ListToken.prim,
      schema: this.valueSchema.generateSchema()
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_ListToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
ListToken.prim = "list";
var MutezValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "MutezValidationError";
  }
};
var MutezToken = class _MutezToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return new bignumber_default(val[Object.keys(val)[0]]);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _MutezToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _MutezToken.prim,
      schema: _MutezToken.prim
    };
  }
  /**
   * @throws {@link MutezValidationError}
   */
  validate(val) {
    const bigNumber = new bignumber_default(val);
    if (bigNumber.isNaN()) {
      throw new MutezValidationError(val, this, `Value is not a number: ${val}`);
    }
  }
  /**
   * @throws {@link MutezValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { int: String(val).toString() };
  }
  /**
   * @throws {@link MutezValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_MutezToken.prim]) {
      return semantic[_MutezToken.prim](val);
    }
    return { int: String(val).toString() };
  }
  ToBigMapKey(val) {
    return {
      key: { int: String(val) },
      type: { prim: _MutezToken.prim }
    };
  }
  ToKey({ int }) {
    return int;
  }
  compare(mutez1, mutez2) {
    const o1 = Number(mutez1);
    const o2 = Number(mutez2);
    if (o1 === o2) {
      return 0;
    }
    return o1 < o2 ? -1 : 1;
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_MutezToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
MutezToken.prim = "mutez";
var BytesValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "BytesValidationError";
  }
};
var BytesToken = class _BytesToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  ToBigMapKey(val) {
    return {
      key: { bytes: val },
      type: { prim: _BytesToken.prim }
    };
  }
  /**
   * @throws {@link BytesValidationError}
   */
  validate(val) {
    if (typeof val === "string" && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
      return;
    }
    throw new BytesValidationError(val, this, `Invalid bytes: ${val}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link BytesValidationError}
   */
  Encode(args) {
    let val = args.pop();
    val = stripHexPrefix(this.convertUint8ArrayToHexString(val));
    this.validate(val);
    return { bytes: String(val).toString() };
  }
  /**
   * @throws {@link BytesValidationError}
   */
  EncodeObject(val, semantic) {
    val = this.convertUint8ArrayToHexString(val);
    if (typeof val === "string") {
      val = stripHexPrefix(val);
    }
    this.validate(val);
    if (semantic && semantic[_BytesToken.prim]) {
      return semantic[_BytesToken.prim](val);
    }
    return { bytes: String(val).toString() };
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _BytesToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _BytesToken.prim,
      schema: _BytesToken.prim
    };
  }
  ToKey({ bytes, string }) {
    if (string) {
      return string;
    }
    return bytes;
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_BytesToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
BytesToken.prim = "bytes";
var OptionToken = class _OptionToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  subToken() {
    return this.createToken(this.val.args[0], this.idx);
  }
  schema() {
    return this.createToken(this.val.args[0], 0);
  }
  annot() {
    return Array.isArray(this.val.annots) ? super.annot() : this.createToken(this.val.args[0], this.idx).annot();
  }
  Encode(args) {
    const value = args;
    if (value === void 0 || value === null) {
      return { prim: "None" };
    } else if (Array.isArray(value) && (value[value.length - 1] === void 0 || value[value.length - 1] === null)) {
      value.pop();
      return { prim: "None" };
    }
    return { prim: "Some", args: [this.schema().Encode(args)] };
  }
  EncodeObject(args, semantic) {
    let value = args;
    if (value === void 0 || value === null) {
      return { prim: "None" };
    }
    value = typeof value === "object" && "Some" in value ? value["Some"] : value;
    return { prim: "Some", args: [this.schema().EncodeObject(value, semantic)] };
  }
  Execute(val, semantics) {
    if (val.prim === "None") {
      return null;
    }
    return { Some: this.schema().Execute(val.args[0], semantics) };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return { Some: this.schema().ExtractSchema() };
  }
  generateSchema() {
    return {
      __michelsonType: _OptionToken.prim,
      schema: this.schema().generateSchema()
    };
  }
  ExtractSignature() {
    return [...this.schema().ExtractSignature()];
  }
  get KeySchema() {
    return this.schema();
  }
  compare(val1, val2) {
    if (!val1) {
      return -1;
    } else if (!val2) {
      return 1;
    }
    return this.KeySchema.compare(val1, val2);
  }
  ToKey(val) {
    return this.Execute(val);
  }
  ToBigMapKey(val) {
    return {
      key: this.EncodeObject(val),
      type: this.typeWithoutAnnotations()
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_OptionToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.subToken().findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
OptionToken.prim = "option";
var TimestampToken = class _TimestampToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    if (val.string && /^\d+$/.test(val.string)) {
      return new Date(Number(val.string) * 1e3).toISOString();
    } else if (val.string) {
      return new Date(val.string).toISOString();
    } else if (val.int) {
      return new Date(Number(val.int) * 1e3).toISOString();
    }
  }
  Encode(args) {
    const val = args.pop();
    if (typeof val === "number") {
      return { int: String(val) };
    } else {
      return { string: val };
    }
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_TimestampToken.prim]) {
      return semantic[_TimestampToken.prim](val);
    }
    if (typeof val === "number") {
      return { int: String(val) };
    } else {
      return { string: val };
    }
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _TimestampToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _TimestampToken.prim,
      schema: _TimestampToken.prim
    };
  }
  ToKey({ string }) {
    return string;
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _TimestampToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_TimestampToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
TimestampToken.prim = "timestamp";
var IntValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "IntValidationError";
  }
};
var IntToken = class _IntToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return new bignumber_default(val[Object.keys(val)[0]]);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _IntToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _IntToken.prim,
      schema: _IntToken.prim
    };
  }
  /**
   * @throws {@link IntValidationError}
   */
  validate(val) {
    const bigNumber = new bignumber_default(val);
    if (bigNumber.isNaN()) {
      throw new IntValidationError(val, this, `Value is not a number: ${JSON.stringify(val)}`);
    }
  }
  /**
   * @throws {@link IntValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { int: new bignumber_default(val).toFixed() };
  }
  /**
   * @throws {@link IntValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_IntToken.prim]) {
      return semantic[_IntToken.prim](val);
    }
    return { int: new bignumber_default(val).toFixed() };
  }
  ToBigMapKey(val) {
    return {
      key: { int: String(val) },
      type: { prim: _IntToken.prim }
    };
  }
  ToKey({ int }) {
    return int;
  }
  compare(int1, int2) {
    const o1 = Number(int1);
    const o2 = Number(int2);
    if (o1 === o2) {
      return 0;
    }
    return o1 < o2 ? -1 : 1;
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_IntToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
IntToken.prim = "int";
var UnitToken = class _UnitToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Encode(args) {
    args.pop();
    return { prim: "Unit" };
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_UnitToken.prim]) {
      return semantic[_UnitToken.prim](val);
    }
    return { prim: "Unit" };
  }
  Execute(_val) {
    return UnitValue;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _UnitToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _UnitToken.prim,
      schema: _UnitToken.prim
    };
  }
  compare(_val1, _val2) {
    return 0;
  }
  ToKey(_val) {
    return UnitValue;
  }
  ToBigMapKey(_val) {
    return {
      key: { prim: "Unit" },
      type: { prim: _UnitToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_UnitToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
UnitToken.prim = "unit";
var publicKeyPrefixLength = 4;
var KeyValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "KeyValidationError";
  }
};
var KeyToken = class _KeyToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    return encodeKey(val.bytes);
  }
  /**
   * @throws {@link KeyValidationError}
   */
  validate(value) {
    if (validatePublicKey(value) !== ValidationResult.VALID) {
      throw new KeyValidationError(value, this, "Key is not valid");
    }
  }
  /**
   * @throws {@link KeyValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link KeyValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_KeyToken.prim]) {
      return semantic[_KeyToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _KeyToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _KeyToken.prim,
      schema: _KeyToken.prim
    };
  }
  ToKey(val) {
    return this.Execute(val);
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _KeyToken.prim }
    };
  }
  compare(key1, key2) {
    const keyPrefix1 = this.getPrefix(key1);
    const keyPrefix2 = this.getPrefix(key2);
    if (keyPrefix1 === Prefix.EDPK && keyPrefix2 !== Prefix.EDPK) {
      return -1;
    } else if (keyPrefix1 === Prefix.SPPK && keyPrefix2 !== Prefix.SPPK) {
      return keyPrefix2 === Prefix.EDPK ? 1 : -1;
    } else if (keyPrefix1 === Prefix.P2PK) {
      if (keyPrefix2 !== Prefix.P2PK) {
        return 1;
      }
      const keyBytes1 = this.getP256PublicKeyComparableBytes(key1);
      const keyBytes2 = this.getP256PublicKeyComparableBytes(key2);
      return Buffer.compare(keyBytes1, keyBytes2);
    }
    return super.compare(key1, key2);
  }
  getPrefix(val) {
    return val.substring(0, publicKeyPrefixLength);
  }
  getP256PublicKeyComparableBytes(p2pk) {
    return b58cdecode(p2pk, prefix[Prefix.P2PK]).slice(1);
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_KeyToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
KeyToken.prim = "key";
var KeyHashValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "KeyHashValidationError";
  }
};
var KeyHashToken = class _KeyHashToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    return encodeKeyHash(val.bytes);
  }
  /**
   * @throws {@link KeyHashValidationError}
   */
  validate(value) {
    if (validateKeyHash(value) !== ValidationResult.VALID) {
      throw new KeyHashValidationError(value, this, `KeyHash is not valid: ${JSON.stringify(value)}`);
    }
  }
  /**
   * @throws {@link KeyHashValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link KeyHashValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_KeyHashToken.prim]) {
      return semantic[_KeyHashToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _KeyHashToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _KeyHashToken.prim,
      schema: _KeyHashToken.prim
    };
  }
  ToKey({ string, bytes }) {
    if (string) {
      return string;
    }
    return encodeKeyHash(bytes);
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _KeyHashToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_KeyHashToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
KeyHashToken.prim = "key_hash";
var SignatureValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "SignatureValidationError";
  }
};
var SignatureToken = class _SignatureToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    if (val.string) {
      return val.string;
    }
    return val.bytes;
  }
  /**
   * @throws {@link SignatureValidationError}
   */
  validate(value) {
    if (validateSignature(value) !== ValidationResult.VALID) {
      throw new SignatureValidationError(value, this, "Signature is not valid");
    }
  }
  /**
   * @throws {@link SignatureValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link SignatureValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_SignatureToken.prim]) {
      return semantic[_SignatureToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _SignatureToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _SignatureToken.prim,
      schema: _SignatureToken.prim
    };
  }
  ToKey(val) {
    return this.Execute(val);
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _SignatureToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_SignatureToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
SignatureToken.prim = "signature";
var LambdaToken = class _LambdaToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get paramSchema() {
    return this.createToken(this.val.args[0], this.idx);
  }
  get returnSchema() {
    return this.createToken(this.val.args[1], this.idx + 1);
  }
  Execute(val) {
    if (val.string) {
      return val.string;
    } else {
      return val;
    }
  }
  Encode(args) {
    const val = args.pop();
    return val;
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_LambdaToken.prim]) {
      return semantic[_LambdaToken.prim](val);
    }
    return val;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      [_LambdaToken.prim]: {
        parameters: this.paramSchema.ExtractSchema(),
        returns: this.returnSchema.ExtractSchema()
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _LambdaToken.prim,
      schema: {
        parameters: this.paramSchema.generateSchema(),
        returns: this.returnSchema.generateSchema()
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_LambdaToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens2);
    this.createToken(this.val.args[1], this.idx).findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
LambdaToken.prim = "lambda";
var OperationToken = class _OperationToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  Execute(val) {
    return val.string;
  }
  Encode(...args) {
    const val = args.pop();
    return { string: val };
  }
  EncodeObject(val, semantic) {
    if (semantic && semantic[_OperationToken.prim]) {
      return semantic[_OperationToken.prim](val);
    }
    return { string: val };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _OperationToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _OperationToken.prim,
      schema: _OperationToken.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_OperationToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
OperationToken.prim = "operation";
var SetValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "SetValidationError";
  }
};
var SetToken = class _SetToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get KeySchema() {
    return this.createToken(this.val.args[0], 0);
  }
  /**
   * @throws {@link SetValidationError}
   */
  validate(value) {
    if (!Array.isArray(value)) {
      throw new SetValidationError(value, this, `Value ${JSON.stringify(value)} is not an array`);
    }
  }
  /**
   * @throws {@link SetValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return val.sort((a, b) => this.KeySchema.compare(a, b)).reduce((prev, current) => {
      return [...prev, this.KeySchema.EncodeObject(current)];
    }, []);
  }
  Execute(val, semantics) {
    return val.reduce((prev, current) => {
      return [...prev, this.KeySchema.Execute(current, semantics)];
    }, []);
  }
  /**
   * @throws {@link SetValidationError}
   */
  EncodeObject(args, semantic) {
    this.validate(args);
    if (semantic && semantic[_SetToken.prim]) {
      return semantic[_SetToken.prim](args);
    }
    return args.sort((a, b) => this.KeySchema.compare(a, b)).reduce((prev, current) => {
      return [...prev, this.KeySchema.EncodeObject(current)];
    }, []);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _SetToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _SetToken.prim,
      schema: this.KeySchema.generateSchema()
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_SetToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.KeySchema.findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
SetToken.prim = "set";
var ChainIDValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "ChainIDValidationError";
  }
};
var ChainIDToken = class _ChainIDToken extends ComparableToken {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link ChainIDValidationError}
   */
  validate(value) {
    if (validateChain(value) !== ValidationResult.VALID) {
      throw new ChainIDValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid ChainID`);
    }
  }
  Execute(val) {
    return val[Object.keys(val)[0]];
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _ChainIDToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _ChainIDToken.prim,
      schema: _ChainIDToken.prim
    };
  }
  /**
   * @throws {@link ChainIDValidationError}
   */
  Encode(args) {
    const val = args.pop();
    this.validate(val);
    return { string: val };
  }
  /**
   * @throws {@link ChainIDValidationError}
   */
  EncodeObject(val, semantic) {
    this.validate(val);
    if (semantic && semantic[_ChainIDToken.prim]) {
      return semantic[_ChainIDToken.prim](val);
    }
    return { string: val };
  }
  ToKey({ string }) {
    return string;
  }
  ToBigMapKey(val) {
    return {
      key: { string: val },
      type: { prim: _ChainIDToken.prim }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_ChainIDToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
ChainIDToken.prim = "chain_id";
var EncodeTicketError = class extends TaquitoError {
  constructor() {
    super();
    this.name = "TicketEncodeError";
    this.message = "Tickets cannot be sent to the blockchain; they are created on-chain";
  }
};
var ticketerType$1 = { prim: "contract" };
var amountType$1 = { prim: "int" };
var TicketToken = class _TicketToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get valueToken() {
    return this.createToken(this.val.args[0], this.idx);
  }
  /**
   * @throws {@link EncodeTicketError}
   */
  Encode(_args) {
    throw new EncodeTicketError();
  }
  /**
   * @throws {@link EncodeTicketError}
   */
  EncodeObject(args, semantic) {
    if (semantic && semantic[_TicketToken.prim]) {
      return semantic[_TicketToken.prim](args, this.val);
    }
    throw new EncodeTicketError();
  }
  Execute(val, semantics) {
    if (semantics && semantics[_TicketToken.prim]) {
      return semantics[_TicketToken.prim](val, this.val);
    }
    const ticketer = this.createToken(ticketerType$1, this.idx);
    const value = this.valueToken;
    const amount = this.createToken(amountType$1, this.idx);
    if (void 0 === val.args[2] && void 0 !== val.args[1].args) {
      return {
        ticketer: ticketer.Execute(val.args[0], semantics),
        value: value.Execute(val.args[1].args[0], semantics),
        amount: amount.Execute(val.args[1].args[1], semantics)
      };
    }
    return {
      ticketer: ticketer.Execute(val.args[0], semantics),
      value: value.Execute(val.args[1], semantics),
      amount: amount.Execute(val.args[2], semantics)
    };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      ticketer: ContractToken.prim,
      value: this.valueToken.ExtractSchema(),
      amount: IntToken.prim
    };
  }
  generateSchema() {
    return {
      __michelsonType: _TicketToken.prim,
      schema: {
        value: this.valueToken.generateSchema(),
        ticketer: {
          __michelsonType: ContractToken.prim,
          schema: ContractToken.prim
        },
        amount: {
          __michelsonType: IntToken.prim,
          schema: IntToken.prim
        }
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_TicketToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.valueToken.findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
TicketToken.prim = "ticket";
var EncodeTicketDeprecatedError = class extends TaquitoError {
  constructor() {
    super();
    this.name = "TicketDeprecatedEncodeError";
    this.message = "Ticket_deprecated cannot be sent to the blockchain; they are created on-chain";
  }
};
var ticketerType = { prim: "contract" };
var amountType = { prim: "int" };
var TicketDeprecatedToken = class _TicketDeprecatedToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  get valueToken() {
    return this.createToken(this.val.args[0], this.idx);
  }
  /**
   * @throws {@link EncodeTicketDeprecatedError}
   */
  Encode(_args) {
    throw new EncodeTicketDeprecatedError();
  }
  /**
   * @throws {@link EncodeTicketDeprecatedError}
   */
  EncodeObject(args, semantic) {
    if (semantic && semantic[_TicketDeprecatedToken.prim]) {
      return semantic[_TicketDeprecatedToken.prim](args, this.val);
    }
    throw new EncodeTicketDeprecatedError();
  }
  Execute(val, semantics) {
    if (semantics && semantics[_TicketDeprecatedToken.prim]) {
      return semantics[_TicketDeprecatedToken.prim](val, this.val);
    }
    const ticketer = this.createToken(ticketerType, this.idx);
    const value = this.valueToken;
    const amount = this.createToken(amountType, this.idx);
    if (void 0 === val.args[2] && void 0 !== val.args[1].args) {
      return {
        ticketer: ticketer.Execute(val.args[0], semantics),
        value: value.Execute(val.args[1].args[0], semantics),
        amount: amount.Execute(val.args[1].args[1], semantics)
      };
    }
    return {
      ticketer: ticketer.Execute(val.args[0], semantics),
      value: value.Execute(val.args[1], semantics),
      amount: amount.Execute(val.args[2], semantics)
    };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      ticketer: ContractToken.prim,
      value: this.valueToken.ExtractSchema(),
      amount: IntToken.prim
    };
  }
  generateSchema() {
    return {
      __michelsonType: _TicketDeprecatedToken.prim,
      schema: {
        value: this.valueToken.generateSchema(),
        ticketer: {
          __michelsonType: ContractToken.prim,
          schema: ContractToken.prim
        },
        amount: {
          __michelsonType: IntToken.prim,
          schema: IntToken.prim
        }
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_TicketDeprecatedToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    this.valueToken.findAndReturnTokens(tokenToFind, tokens2);
    return tokens2;
  }
};
TicketDeprecatedToken.prim = "ticket_deprecated";
var NeverTokenError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "NeverTokenError";
  }
};
var NeverToken = class _NeverToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link NeverTokenError}
   */
  Encode(args) {
    const val = args.pop();
    throw new NeverTokenError(val, this, `Assigning a value to the type never is forbidden. Trying to assign ${JSON.stringify(val)}.`);
  }
  /**
   * @throws {@link NeverTokenError}
   */
  EncodeObject(val, semantic) {
    if (semantic && semantic[_NeverToken.prim]) {
      return semantic[_NeverToken.prim](val);
    }
    throw new NeverTokenError(val, this, `Assigning a value to the type never is forbidden. Trying to assign ${JSON.stringify(val)}.`);
  }
  /**
   * @throws {@link NeverTokenError}
   */
  Execute(val) {
    throw new NeverTokenError(val, this, `There is no literal value for the type never. Trying to execute ${JSON.stringify(val)}.`);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _NeverToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _NeverToken.prim,
      schema: _NeverToken.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_NeverToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
NeverToken.prim = "never";
var SaplingStateValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "SaplingStateValidationError";
  }
};
var SaplingStateToken = class _SaplingStateToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  isValid(val) {
    return typeof val === "object" && Object.keys(val).length === 0;
  }
  /**
   * @throws {@link SaplingStateValidationError}
   */
  Execute(val, semantic) {
    if (semantic && semantic[_SaplingStateToken.prim]) {
      return semantic[_SaplingStateToken.prim](val, this.val);
    }
    if ("int" in val) {
      return val.int;
    } else {
      throw new SaplingStateValidationError(val, this, `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`);
    }
  }
  /**
   * @throws {@link SaplingStateValidationError}
   */
  Encode(args) {
    const val = args.pop();
    if (this.isValid(val)) {
      return [];
    } else {
      throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${JSON.stringify(val)} while expecting: {}`);
    }
  }
  /**
   * @throws {@link SaplingStateValidationError}
   */
  EncodeObject(val, semantic) {
    if (semantic && semantic[_SaplingStateToken.prim]) {
      return semantic[_SaplingStateToken.prim](val);
    }
    if (this.isValid(val)) {
      return [];
    } else {
      throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${JSON.stringify(val)} while expecting: {}`);
    }
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      [_SaplingStateToken.prim]: {
        "memo-size": Number(this.val.args[0]["int"])
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _SaplingStateToken.prim,
      schema: {
        memoSize: this.val.args[0]["int"]
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_SaplingStateToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
SaplingStateToken.prim = "sapling_state";
var SaplingTransactionValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "SaplingTransactionValidationError";
  }
};
var SaplingTransactionToken = class _SaplingTransactionToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link SaplingTransactionValidationError}
   */
  Execute(_val) {
    throw new SaplingTransactionValidationError(_val, this, `There is no literal value for the sapling_transaction type. Got: ${JSON.stringify(_val)}.`);
  }
  /**
   * @throws {@link SaplingTransactionValidationError}
   */
  validateBytes(val) {
    const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);
    if (bytes && bytes[2].length % 2 === 0) {
      return bytes[2];
    } else {
      throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
    }
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  Encode(args) {
    let val = args.pop();
    val = this.validateBytes(this.convertUint8ArrayToHexString(val));
    return { bytes: String(val).toString() };
  }
  EncodeObject(val, semantic) {
    val = this.validateBytes(this.convertUint8ArrayToHexString(val));
    if (semantic && semantic[_SaplingTransactionToken.prim]) {
      return semantic[_SaplingTransactionToken.prim](val);
    }
    return { bytes: String(val).toString() };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      [_SaplingTransactionToken.prim]: {
        "memo-size": Number(this.val.args[0]["int"])
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _SaplingTransactionToken.prim,
      schema: {
        memoSize: this.val.args[0]["int"]
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_SaplingTransactionToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
SaplingTransactionToken.prim = "sapling_transaction";
var SaplingTransactionDeprecatedValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "SaplingTransactionDeprecatedValidationError";
  }
};
var SaplingTransactionDeprecatedToken = class _SaplingTransactionDeprecatedToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link SaplingTransactionDeprecatedValidationError}
   */
  Execute(_val) {
    throw new SaplingTransactionDeprecatedValidationError(_val, this, `There is no literal value for the sapling_transaction_deprecated type. Got: ${JSON.stringify(_val)}.`);
  }
  /**
   * @throws {@link SaplingTransactionDeprecatedValidationError}
   */
  validateBytes(val) {
    const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);
    if (bytes && bytes[2].length % 2 === 0) {
      return bytes[2];
    } else {
      throw new SaplingTransactionDeprecatedValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
    }
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  Encode(args) {
    let val = args.pop();
    val = this.validateBytes(this.convertUint8ArrayToHexString(val));
    return { bytes: String(val).toString() };
  }
  EncodeObject(val, semantic) {
    val = this.validateBytes(this.convertUint8ArrayToHexString(val));
    if (semantic && semantic[_SaplingTransactionDeprecatedToken.prim]) {
      return semantic[_SaplingTransactionDeprecatedToken.prim](val);
    }
    return { bytes: String(val).toString() };
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return {
      [_SaplingTransactionDeprecatedToken.prim]: {
        "memo-size": Number(this.val.args[0]["int"])
      }
    };
  }
  generateSchema() {
    return {
      __michelsonType: _SaplingTransactionDeprecatedToken.prim,
      schema: {
        memoSize: this.val.args[0]["int"]
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_SaplingTransactionDeprecatedToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
SaplingTransactionDeprecatedToken.prim = "sapling_transaction_deprecated";
var Bls12381frValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "Bls12381frValidationError";
  }
};
var Bls12381frToken = class _Bls12381frToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link Bls12381frValidationError}
   */
  validate(val) {
    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
      return;
    }
    throw new Bls12381frValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link Bls12381frValidationError}
   */
  Encode(args) {
    let val = args.pop();
    if (typeof val === "number") {
      return { int: val.toString() };
    } else {
      val = this.convertUint8ArrayToHexString(val);
      this.validate(val);
      return { bytes: val };
    }
  }
  /**
   * @throws {@link Bls12381frValidationError}
   */
  EncodeObject(val, semantic) {
    if (semantic && semantic[_Bls12381frToken.prim]) {
      return semantic[_Bls12381frToken.prim](val);
    }
    if (typeof val === "number") {
      return { int: val.toString() };
    } else {
      val = this.convertUint8ArrayToHexString(val);
      this.validate(val);
      return { bytes: val };
    }
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _Bls12381frToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _Bls12381frToken.prim,
      schema: _Bls12381frToken.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_Bls12381frToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
Bls12381frToken.prim = "bls12_381_fr";
var Bls12381g1ValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "Bls12381g1ValidationError";
  }
};
var Bls12381g1Token = class _Bls12381g1Token extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link Bls12381g1ValidationError}
   */
  validate(val) {
    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
      return;
    }
    throw new Bls12381g1ValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link Bls12381g1ValidationError}
   */
  Encode(args) {
    let val = args.pop();
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    return { bytes: val };
  }
  /**
   * @throws {@link Bls12381g1ValidationError}
   */
  EncodeObject(val, semantic) {
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    if (semantic && semantic[_Bls12381g1Token.prim]) {
      return semantic[_Bls12381g1Token.prim](val);
    }
    return { bytes: val };
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _Bls12381g1Token.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _Bls12381g1Token.prim,
      schema: _Bls12381g1Token.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_Bls12381g1Token.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
Bls12381g1Token.prim = "bls12_381_g1";
var Bls12381g2ValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "Bls12381g2ValidationError";
  }
};
var Bls12381g2Token = class _Bls12381g2Token extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link Bls12381g2ValidationError}
   */
  validate(val) {
    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
      return;
    }
    throw new Bls12381g2ValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link Bls12381g2ValidationError}
   */
  Encode(args) {
    let val = args.pop();
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    return { bytes: val };
  }
  /**
   * @throws {@link Bls12381g2ValidationError}
   */
  EncodeObject(val, semantic) {
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    if (semantic && semantic[_Bls12381g2Token.prim]) {
      return semantic[_Bls12381g2Token.prim](val);
    }
    return { bytes: val };
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _Bls12381g2Token.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _Bls12381g2Token.prim,
      schema: _Bls12381g2Token.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_Bls12381g2Token.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
Bls12381g2Token.prim = "bls12_381_g2";
var ChestValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "ChestValidationError";
  }
};
var ChestToken = class _ChestToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  validate(val) {
    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 == 0) {
      return;
    }
    throw new ChestValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  Encode(args) {
    let val = args.pop();
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    return { bytes: val };
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  EncodeObject(val, semantic) {
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    if (semantic && semantic[_ChestToken.prim]) {
      return semantic[_ChestToken.prim](val);
    }
    return { bytes: val };
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _ChestToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _ChestToken.prim,
      schema: _ChestToken.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_ChestToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
ChestToken.prim = "chest";
var ChestKeyValidationError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "ChestKeyValidationError";
  }
};
var ChestKeyToken = class _ChestKeyToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  validate(val) {
    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
      return;
    }
    throw new ChestKeyValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);
  }
  convertUint8ArrayToHexString(val) {
    return val.constructor === Uint8Array ? Buffer.from(val).toString("hex") : val;
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  Encode(args) {
    let val = args.pop();
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    return { bytes: val };
  }
  /**
   * @throws {@link ChestKeyValidationError}
   */
  EncodeObject(val, semantic) {
    val = this.convertUint8ArrayToHexString(val);
    this.validate(val);
    if (semantic && semantic[_ChestKeyToken.prim]) {
      return semantic[_ChestKeyToken.prim](val);
    }
    return { bytes: val };
  }
  Execute(val) {
    return val.bytes;
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _ChestKeyToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _ChestKeyToken.prim,
      schema: _ChestKeyToken.prim
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_ChestKeyToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
ChestKeyToken.prim = "chest_key";
var GlobalConstantEncodingError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "GlobalConstantEncodingError";
  }
};
var GlobalConstantDecodingError = class extends TokenValidationError {
  constructor(value, token, message) {
    super(value, token, message);
    this.value = value;
    this.token = token;
    this.name = "GlobalConstantDecodingError";
  }
};
var GlobalConstantToken = class _GlobalConstantToken extends Token {
  constructor(val, idx, fac) {
    super(val, idx, fac);
    this.val = val;
    this.idx = idx;
    this.fac = fac;
  }
  /**
   * @throws {@link GlobalConstantDecodingError}
   */
  Execute(val, semantic) {
    if (semantic && semantic[_GlobalConstantToken.prim]) {
      return semantic[_GlobalConstantToken.prim](val, this.val);
    } else {
      throw new GlobalConstantDecodingError(val, this, `Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: ${this.val.args[0]["string"]}.`);
    }
  }
  /**
   * @throws {@link GlobalConstantEncodingError}
   */
  Encode(args) {
    throw new GlobalConstantEncodingError(args, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]["string"]}.`);
  }
  /**
   * @throws {@link GlobalConstantEncodingError}
   */
  EncodeObject(val, semantic) {
    if (semantic && semantic[_GlobalConstantToken.prim]) {
      return semantic[_GlobalConstantToken.prim](val);
    }
    throw new GlobalConstantEncodingError(val, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]["string"]}.`);
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return _GlobalConstantToken.prim;
  }
  generateSchema() {
    return {
      __michelsonType: _GlobalConstantToken.prim,
      schema: {
        hash: this.val.args[0]["string"]
      }
    };
  }
  findAndReturnTokens(tokenToFind, tokens2) {
    if (_GlobalConstantToken.prim === tokenToFind) {
      tokens2.push(this);
    }
    return tokens2;
  }
};
GlobalConstantToken.prim = "constant";
var tokens = [
  PairToken,
  NatToken,
  StringToken,
  BigMapToken,
  AddressToken,
  TxRollupL2AddressToken,
  MapToken,
  BoolToken,
  OrToken,
  ContractToken,
  ListToken,
  MutezToken,
  BytesToken,
  OptionToken,
  TimestampToken,
  IntToken,
  UnitToken,
  KeyToken,
  KeyHashToken,
  SignatureToken,
  LambdaToken,
  OperationToken,
  SetToken,
  ChainIDToken,
  TicketToken,
  TicketDeprecatedToken,
  NeverToken,
  SaplingStateToken,
  SaplingTransactionToken,
  SaplingTransactionDeprecatedToken,
  Bls12381frToken,
  Bls12381g1Token,
  Bls12381g2Token,
  ChestToken,
  ChestKeyToken,
  GlobalConstantToken
];
var InvalidTokenError = class extends TaquitoError {
  constructor(message, data) {
    super(message);
    this.message = message;
    this.data = data;
    this.name = "Invalid token error";
  }
};
function createToken(val, idx) {
  if (Array.isArray(val)) {
    return new PairToken(val, idx, createToken);
  }
  const t = tokens.find((x) => x.prim === val.prim);
  if (!t) {
    throw new InvalidTokenError(`Malformed data: ${JSON.stringify(val)}. Expected a value with a valid prim property`, val);
  }
  return new t(val, idx, createToken);
}
var ParameterEncodingError = class extends InvalidViewParameterError {
  constructor(viewName, sigs, args, cause) {
    super(viewName, sigs, args, cause);
    this.viewName = viewName;
    this.sigs = sigs;
    this.args = args;
    this.cause = cause;
    this.name = "ParameterEncodingError";
    this.message = `Could not encode parameter ${JSON.stringify(args)} received for name "${viewName}" expecting one of the following signatures ${JSON.stringify(sigs)}`;
  }
};
var InvalidScriptError = class extends TaquitoError {
  constructor(script, reason) {
    super();
    this.script = script;
    this.reason = reason;
    this.name = "InvalidScriptError";
    let message = `Invalid on-chain view found in the following script.`;
    if (reason) {
      message += ` Reason: ${reason}.`;
    }
    message += `Script: ${JSON.stringify(script)}`;
    this.message = message;
  }
};
var InvalidRpcResponseError = class extends TaquitoError {
  constructor(script, reason) {
    super();
    this.script = script;
    this.reason = reason;
    this.name = "InvalidRpcResponseError";
    let message = `Invalid RPC response passed as argument(s).`;
    if (reason) {
      message += ` Reason: ${reason}.`;
    }
    message += ` Received: ${JSON.stringify(script)}`;
    this.message = message;
  }
};
var InvalidBigMapSchemaError = class extends TaquitoError {
  constructor(message) {
    super(message);
    this.message = message;
    this.name = "InvalidBigMapSchemaError";
  }
};
var InvalidBigMapDiffError = class extends TaquitoError {
  constructor(message, value) {
    super(message);
    this.message = message;
    this.value = value;
    this.name = "InvalidBigMapDiffError";
  }
};
var BigMapEncodingError = class extends TaquitoError {
  constructor(obj, details, schema, value) {
    super();
    this.details = details;
    this.schema = schema;
    this.value = value;
    this.name = "BigMapEncodingError";
    this.message = `Unable to encode the big map ${obj}. Schema is: ${JSON.stringify(schema)}. The ${obj} is: ${JSON.stringify(value)}. Error details: ${details}`;
  }
};
var StorageEncodingError = class extends TaquitoError {
  constructor(obj, details, schema, value, semantics) {
    super();
    this.details = details;
    this.schema = schema;
    this.value = value;
    this.semantics = semantics;
    this.name = "StorageEncodingError";
    this.message = `Unable to encode ${obj}. The schema is: ${JSON.stringify(schema)}, the value is: ${JSON.stringify(value)}.${semantics ? `And the semantic is: ${JSON.stringify(semantics)}` : ""}. Error details: ${details}`;
  }
};
var MissingArgumentError = class extends TaquitoError {
  constructor(message) {
    super(message);
    this.message = message;
    this.name = "MissingArgumentError";
  }
};
var _a2;
var schemaTypeSymbol = Symbol.for("taquito-schema-type-symbol");
function collapse(val, prim = PairToken.prim) {
  var _b, _c;
  if (Array.isArray(val)) {
    return collapse({
      prim,
      args: val
    }, prim);
  }
  const extended = val;
  if (extended.prim === prim && extended.args && extended.args.length > 2) {
    return Object.assign(Object.assign({}, extended), { args: [
      (_b = extended.args) === null || _b === void 0 ? void 0 : _b[0],
      {
        prim,
        args: (_c = extended.args) === null || _c === void 0 ? void 0 : _c.slice(1)
      }
    ] });
  }
  return extended;
}
function deepEqual(a, b) {
  if (a === void 0 || b === void 0) {
    return a === b;
  }
  const ac = collapse(a);
  const bc = collapse(b);
  return ac.prim === bc.prim && (ac.args === void 0 && bc.args === void 0 || ac.args !== void 0 && bc.args !== void 0 && ac.args.length === bc.args.length && ac.args.every((v, i) => {
    var _b, _c;
    return deepEqual(v, (_c = (_b = bc.args) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {});
  })) && (ac.annots === void 0 && bc.annots === void 0 || ac.annots !== void 0 && bc.annots !== void 0 && ac.annots.length === bc.annots.length && ac.annots.every((v, i) => {
    var _b;
    return v === ((_b = bc.annots) === null || _b === void 0 ? void 0 : _b[i]);
  }));
}
var Schema = class _Schema {
  constructor(val) {
    this.val = val;
    this[_a2] = true;
    this.root = createToken(val, 0);
    if (this.root instanceof BigMapToken) {
      this.bigMap = this.root;
    } else if (this.isExpressionExtended(val) && val.prim === "pair") {
      const exp = val.args[0];
      if (this.isExpressionExtended(exp) && exp.prim === "big_map") {
        this.bigMap = new BigMapToken(exp, 0, createToken);
      }
    }
  }
  static isSchema(obj) {
    return obj && obj[schemaTypeSymbol] === true;
  }
  /**
   * @throws {@link InvalidRpcResponseError}
   */
  static fromRPCResponse(val) {
    if (!val) {
      throw new InvalidRpcResponseError(val, "the RPC response is empty");
    }
    if (!val.script) {
      throw new InvalidRpcResponseError(val, "the RPC response has no script");
    }
    if (!Array.isArray(val.script.code)) {
      throw new InvalidRpcResponseError(val, "The response.script.code should be an array");
    }
    let code2 = val.script.code;
    while (code2.length === 1 && Array.isArray(code2[0])) {
      code2 = code2[0];
    }
    const storage2 = code2.find((x) => "prim" in x && x.prim === "storage");
    if (!storage2 || !Array.isArray(storage2.args)) {
      throw new InvalidRpcResponseError(val, 'The response.script.code has an element of type {prim: "storage"}, but its args is not an array');
    }
    return new _Schema(storage2.args[0]);
  }
  isExpressionExtended(val) {
    return "prim" in val && Array.isArray(val.args);
  }
  removeTopLevelAnnotation(obj) {
    if (this.root instanceof PairToken || this.root instanceof OrToken) {
      if (this.root.hasAnnotations() && typeof obj === "object" && Object.keys(obj).length === 1) {
        return obj[Object.keys(obj)[0]];
      }
    }
    return obj;
  }
  Execute(val, semantics) {
    const storage2 = this.root.Execute(val, semantics);
    return this.removeTopLevelAnnotation(storage2);
  }
  Typecheck(val) {
    if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {
      return;
    }
    if (this.root instanceof TicketToken && val.ticketer && val.value && val.amount) {
      return;
    }
    if (this.root instanceof TicketDeprecatedToken && val.ticketer && val.value && val.amount) {
      return;
    }
    if (this.root instanceof MapToken && this.root.ValueSchema instanceof BigMapToken) {
      return;
    }
    this.root.EncodeObject(val);
  }
  /**
   * @throws {@link InvalidBigMapSchemaError}
   * @throws {@link InvalidBigMapDiffError}
   */
  ExecuteOnBigMapDiff(diff, semantics) {
    if (!this.bigMap) {
      throw new InvalidBigMapSchemaError("Big map schema is undefined");
    }
    if (!Array.isArray(diff)) {
      throw new InvalidBigMapDiffError(`Big map diff must be an array, got: ${JSON.stringify(diff)}`, diff);
    }
    const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));
    return this.bigMap.Execute(eltFormat, semantics);
  }
  /**
   * @throws {@link InvalidBigMapSchemaError}
   */
  ExecuteOnBigMapValue(key, semantics) {
    if (!this.bigMap) {
      throw new InvalidBigMapSchemaError("Big map schema is undefined");
    }
    return this.bigMap.ValueSchema.Execute(key, semantics);
  }
  /**
   * @throws {@link InvalidBigMapSchemaError}
   * @throws {@link BigMapEncodingError}
   */
  EncodeBigMapKey(key) {
    if (!this.bigMap) {
      throw new InvalidBigMapSchemaError("Big map schema is undefined");
    }
    try {
      return this.bigMap.KeySchema.ToBigMapKey(key);
    } catch (ex) {
      throw new BigMapEncodingError("key", ex, this.bigMap.KeySchema, key);
    }
  }
  /**
   * @throws {@link TokenValidationError}
   * @throws {@link StorageEncodingError}
   */
  Encode(value, semantics) {
    try {
      return this.root.EncodeObject(value, semantics);
    } catch (ex) {
      if (ex instanceof TokenValidationError) {
        throw ex;
      }
      throw new StorageEncodingError("storage object", ex, this.root, value, semantics);
    }
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return this.removeTopLevelAnnotation(this.root.ExtractSchema());
  }
  /**
   * @description Produce a representation of the storage schema.
   * Note: Provide guidance on how to write the storage object for the origination operation with Taquito.
   */
  generateSchema() {
    return this.removeTopLevelAnnotation(this.root.generateSchema());
  }
  /**
   * @deprecated
   * @throws {@link InvalidBigMapSchemaError}
   */
  ComputeState(tx, state) {
    if (!this.bigMap) {
      throw new InvalidBigMapSchemaError("Big map schema is undefined");
    }
    const bigMap = tx.reduce((prev, current) => {
      return Object.assign(Object.assign({}, prev), this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff));
    }, {});
    return Object.assign(Object.assign({}, this.Execute(state)), { [this.bigMap.annot()]: bigMap });
  }
  /**
   * @description Look up in top-level pairs of the storage to find a value matching the specified type
   *
   * @returns The first value found that match the type or `undefined` if no value is found
   *
   * @param storage storage to parse to find the value
   * @param valueType type of value to look for
   *
   */
  FindFirstInTopLevelPair(storage2, valueType) {
    return this.findValue(this.root["val"], storage2, valueType);
  }
  // TODO check these type casts
  /**
   * @throws {@link MissingArgumentError}
   */
  findValue(schema, storage2, valueToFind) {
    if (deepEqual(valueToFind, schema)) {
      return storage2;
    }
    if (Array.isArray(schema) || schema.prim === "pair") {
      const sch = collapse(schema);
      const strg = collapse(storage2, "Pair");
      if (sch.args === void 0 || strg.args === void 0) {
        throw new MissingArgumentError("Tokens have no arguments");
      }
      if (sch.args[0])
        return (
          // unsafe
          this.findValue(sch.args[0], strg.args[0], valueToFind) || this.findValue(sch.args[1], strg.args[1], valueToFind)
        );
    }
  }
  /**
   * @description Look up the schema to find any occurrence of a particular token.
   *
   * @returns an array of tokens of the specified kind or an empty array if no token was found
   *
   * @param tokenToFind string representing the prim property of the token to find
   *
   * @example
   * ```
   * Useful to find all global constants in a script, an array of GlobalConstantToken is returned:
   *
   * const schema = new Schema(script);
   * const allGlobalConstantTokens = schema.findToken('constant');
   * ```
   *
   */
  findToken(tokenToFind) {
    const tokens2 = [];
    return this.root.findAndReturnTokens(tokenToFind, tokens2);
  }
};
_a2 = schemaTypeSymbol;
var ParameterSchema = class _ParameterSchema {
  /**
   * @description Return the schema of the parameter of a specific entry point
   * @throws {@link InvalidTokenError}
   */
  constructor(val) {
    this.root = createToken(val, 0);
  }
  /**
   *
   * @description Create an instance of ParameterSchema from a contract script
   *
   * @param val contract script obtained from the RPC
   * @returns ParameterSchema
   * @throws {InvalidRpcResponseError} If the RPC response is invalid
   */
  static fromRPCResponse(val) {
    if (!val) {
      throw new InvalidRpcResponseError(val, "the RPC response is empty");
    }
    if (!val.script) {
      throw new InvalidRpcResponseError(val, "the RPC response has no script");
    }
    if (!Array.isArray(val.script.code)) {
      throw new InvalidRpcResponseError(val, "The response.script.code should be an array");
    }
    const parameter = val.script.code.find((x) => "prim" in x && x.prim === "parameter");
    if (!parameter) {
      throw new InvalidRpcResponseError(val, `The response.script.code should have an element of type {prim: "parameter"}`);
    }
    if (!Array.isArray(parameter.args)) {
      throw new InvalidRpcResponseError(val, `The response.script.code has an element of type {prim: "parameter"}, but its args is not an array`);
    }
    return new _ParameterSchema(parameter.args[0]);
  }
  /**
   * @description Check if the Contract parameter is multiple entry point or not
   */
  get isMultipleEntryPoint() {
    return this.root instanceof OrToken || this.root instanceof OptionToken && this.root.subToken() instanceof OrToken;
  }
  /**
   * @description Check if the Contract parameter has an annotation or not
   */
  get hasAnnotation() {
    if (this.isMultipleEntryPoint) {
      return Object.keys(this.ExtractSchema())[0] !== "0";
    } else {
      return true;
    }
  }
  /**
   * @description Returns the javascript object equivalent of the Micheline value provided
   */
  Execute(val, semantics) {
    return this.root.Execute(val, semantics);
  }
  /**
   * @description Returns a micheline formatted object for the values provided
   * @throws {@link TokenValidationError}
   * @throws {@link ParameterEncodingError}
   */
  Encode(...args) {
    try {
      return this.root.Encode(args.reverse());
    } catch (ex) {
      if (ex instanceof TokenValidationError) {
        throw ex;
      }
      throw new ParameterEncodingError("Unable to encode parameter", this.root, args, ex);
    }
  }
  /**
   * @description Returns a micheline formatted object for the javascript object provided
   * @throws {@link TokenValidationError}
   * @throws {@link ParameterEncodingError}
   */
  EncodeObject(value, semantics) {
    try {
      return this.root.EncodeObject(value, semantics);
    } catch (ex) {
      if (ex instanceof TokenValidationError) {
        throw ex;
      }
      throw new ParameterEncodingError("Unable to encode parameter object", this.root, value, ex);
    }
  }
  /**
   * @deprecated ExtractSchema has been deprecated in favor of generateSchema
   *
   */
  ExtractSchema() {
    return this.root.ExtractSchema();
  }
  /**
   * @description Produce a schema grouping together all the entry points of a contract.
   */
  generateSchema() {
    return this.root.generateSchema();
  }
  ExtractSignatures() {
    return this.root.ExtractSignature();
  }
};
var ViewSchema = class _ViewSchema {
  /**
   * @throws {@link InvalidScriptError}
   */
  constructor(viewArgs) {
    if (!viewArgs) {
      throw new InvalidScriptError(viewArgs, "the args are not defined");
    }
    if (viewArgs.length !== 4) {
      throw new InvalidScriptError(viewArgs, `there should be exactly 4 arguments`);
    }
    if (!("string" in viewArgs[0]) || !viewArgs[0]["string"]) {
      throw new InvalidScriptError(viewArgs, `The first argument should be a string, representing the view name. It should be in the form: { string: 'viewName' }`);
    }
    this.viewName = viewArgs[0]["string"];
    this.viewArgsType = viewArgs[1];
    this.viewReturnType = viewArgs[2];
    this.instructions = viewArgs[3];
    this.rootArgsType = createToken(this.viewArgsType, 0);
    this.rootReturnType = createToken(this.viewReturnType, 0);
  }
  /**
   *
   * @description Create an instance of ViewSchema for each view in a script
   *
   * @param val contract script obtained from the RPC
   * @returns array of ViewSchema or empty array if there is no view in the contract
   * @throws {@link InvalidScriptError}
   */
  static fromRPCResponse(val) {
    const allViewSchema = [];
    const views = val && val.script && Array.isArray(val.script.code) && val.script.code.filter((x) => x.prim === "view");
    if (views) {
      views.forEach((view) => {
        allViewSchema.push(new _ViewSchema(view.args));
      });
    }
    return allViewSchema;
  }
  /**
   *
   * @description Transform the view parameter into Michelson
   *
   * @param args parameter of the view in js format
   * @returns parameter of the view in Michelson
   * @throws {@link ParameterEncodingError}
   */
  encodeViewArgs(args) {
    try {
      return this.rootArgsType.EncodeObject(args);
    } catch (ex) {
      throw new ParameterEncodingError(this.viewName, void 0, args, ex);
    }
  }
  /**
   *
   * @description Transform the view result from Michelson to readable data
   *
   * @param val result of the view in JSON Michelson
   * @param semantics optional semantics to override the default decoding behavior
   * @returns result of the view in a readable format
   */
  decodeViewResult(val, semantics) {
    return this.rootReturnType.Execute(val, semantics);
  }
  /**
   *
   * @description Return the signature of the view parameter
   */
  extractArgsSchema() {
    return this.rootArgsType.ExtractSchema();
  }
  /**
   *
   * @description Return the format of the view result
   */
  extractResultSchema() {
    return this.rootReturnType.ExtractSchema();
  }
};
var EventSchema = class _EventSchema {
  constructor(tag, type) {
    this.tag = tag;
    this.type = type;
  }
  static fromMichelineValue(val) {
    var _a3, _b;
    return new _EventSchema((_a3 = val.annots) === null || _a3 === void 0 ? void 0 : _a3[0], (_b = val.args) === null || _b === void 0 ? void 0 : _b[0]);
  }
  static fromRPCResponse(val) {
    const allEventSchema = [];
    val.script.code.forEach((code2) => {
      if (!("prim" in code2) || code2.prim !== "code" || !("args" in code2) || !code2.args) {
        return;
      }
      allEventSchema.push(..._EventSchema.extractEventsRecursively(code2.args));
    });
    return _EventSchema.removeDuplicates(allEventSchema);
  }
  static removeDuplicates(events) {
    const uniqueEvents = [];
    events.forEach((event) => {
      const idx = uniqueEvents.findIndex((e) => e.tag === event.tag && deepEqual(e.type, event.type));
      if (idx === -1) {
        uniqueEvents.push(event);
      }
    });
    return uniqueEvents;
  }
  static extractEventsRecursively(code2) {
    if (Array.isArray(code2)) {
      return code2.flatMap((c) => _EventSchema.extractEventsRecursively(c));
    }
    if (!("prim" in code2)) {
      return [];
    }
    if (code2.prim === "EMIT") {
      return [_EventSchema.fromMichelineValue(code2)];
    }
    if (!("args" in code2) || !code2.args) {
      return [];
    }
    return code2.args.flatMap((c) => _EventSchema.extractEventsRecursively(c));
  }
};
var UnitValue = Symbol();

// node_modules/@taquito/local-forging/dist/taquito-local-forging.es6.js
var toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
var pad = (num, paddingLen = 8) => {
  return num.toString(16).padStart(paddingLen, "0");
};
var ENTRYPOINT_MAX_LENGTH = 31;
var CODEC;
(function(CODEC2) {
  CODEC2["SECRET"] = "secret";
  CODEC2["RAW"] = "raw";
  CODEC2["TZ1"] = "tz1";
  CODEC2["BRANCH"] = "branch";
  CODEC2["ZARITH"] = "zarith";
  CODEC2["PUBLIC_KEY"] = "public_key";
  CODEC2["PKH"] = "pkh";
  CODEC2["DELEGATE"] = "delegate";
  CODEC2["SCRIPT"] = "script";
  CODEC2["BALLOT_STATEMENT"] = "ballotStmt";
  CODEC2["PROPOSAL"] = "proposal";
  CODEC2["PROPOSAL_ARR"] = "proposalArr";
  CODEC2["INT32"] = "int32";
  CODEC2["INT16"] = "int16";
  CODEC2["PARAMETERS"] = "parameters";
  CODEC2["ADDRESS"] = "address";
  CODEC2["SMART_CONTRACT_ADDRESS"] = "smart_contract_address";
  CODEC2["SMART_ROLLUP_ADDRESS"] = "smart_rollup_address";
  CODEC2["SMART_ROLLUP_COMMITMENT_HASH"] = "smart_rollup_commitment_hash";
  CODEC2["VALUE"] = "value";
  CODEC2["PADDED_BYTES"] = "padded_bytes";
  CODEC2["SMART_ROLLUP_MESSAGE"] = "smart_rollup_message";
  CODEC2["MANAGER"] = "manager";
  CODEC2["BLOCK_PAYLOAD_HASH"] = "blockPayloadHash";
  CODEC2["ENTRYPOINT"] = "entrypoint";
  CODEC2["OPERATION"] = "operation";
  CODEC2["OP_ACTIVATE_ACCOUNT"] = "activate_account";
  CODEC2["OP_DELEGATION"] = "delegation";
  CODEC2["OP_TRANSACTION"] = "transaction";
  CODEC2["OP_ORIGINATION"] = "origination";
  CODEC2["OP_BALLOT"] = "ballot";
  CODEC2["OP_FAILING_NOOP"] = "failing_noop";
  CODEC2["OP_ENDORSEMENT"] = "endorsement";
  CODEC2["OP_SEED_NONCE_REVELATION"] = "seed_nonce_revelation";
  CODEC2["OP_REVEAL"] = "reveal";
  CODEC2["OP_PROPOSALS"] = "proposals";
  CODEC2["OP_REGISTER_GLOBAL_CONSTANT"] = "register_global_constant";
  CODEC2["OP_TRANSFER_TICKET"] = "transfer_ticket";
  CODEC2["OP_TX_ROLLUP_ORIGINATION"] = "tx_rollup_origination";
  CODEC2["OP_TX_ROLLUP_SUBMIT_BATCH"] = "tx_rollup_submit_batch";
  CODEC2["BURN_LIMIT"] = "burn_limit";
  CODEC2["TX_ROLLUP_ORIGINATION_PARAM"] = "tx_rollup_origination_param";
  CODEC2["TX_ROLLUP_ID"] = "tx_rollup_id";
  CODEC2["TX_ROLLUP_BATCH_CONTENT"] = "tx_rollup_batch_content";
  CODEC2["OP_INCREASE_PAID_STORAGE"] = "increase_paid_storage";
  CODEC2["OP_UPDATE_CONSENSUS_KEY"] = "update_consensus_key";
  CODEC2["OP_DRAIN_DELEGATE"] = "drain_delegate";
  CODEC2["DEPOSITS_LIMIT"] = "deposits_limit";
  CODEC2["OP_SET_DEPOSITS_LIMIT"] = "set_deposits_limit";
  CODEC2["OP_SMART_ROLLUP_ORIGINATE"] = "smart_rollup_originate";
  CODEC2["PVM_KIND"] = "pvm_kind";
  CODEC2["OP_SMART_ROLLUP_ADD_MESSAGES"] = "smart_rollup_add_messages";
  CODEC2["OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE"] = "smart_rollup_execute_outbox_message";
})(CODEC || (CODEC = {}));
var opMapping = {
  "00": "parameter",
  "01": "storage",
  "02": "code",
  "03": "False",
  "04": "Elt",
  "05": "Left",
  "06": "None",
  "07": "Pair",
  "08": "Right",
  "09": "Some",
  "0a": "True",
  "0b": "Unit",
  "0c": "PACK",
  "0d": "UNPACK",
  "0e": "BLAKE2B",
  "0f": "SHA256",
  "10": "SHA512",
  "11": "ABS",
  "12": "ADD",
  "13": "AMOUNT",
  "14": "AND",
  "15": "BALANCE",
  "16": "CAR",
  "17": "CDR",
  "18": "CHECK_SIGNATURE",
  "19": "COMPARE",
  "1a": "CONCAT",
  "1b": "CONS",
  "1c": "CREATE_ACCOUNT",
  "1d": "CREATE_CONTRACT",
  "1e": "IMPLICIT_ACCOUNT",
  "1f": "DIP",
  "20": "DROP",
  "21": "DUP",
  "22": "EDIV",
  "23": "EMPTY_MAP",
  "24": "EMPTY_SET",
  "25": "EQ",
  "26": "EXEC",
  "27": "FAILWITH",
  "28": "GE",
  "29": "GET",
  "2a": "GT",
  "2b": "HASH_KEY",
  "2c": "IF",
  "2d": "IF_CONS",
  "2e": "IF_LEFT",
  "2f": "IF_NONE",
  "30": "INT",
  "31": "LAMBDA",
  "32": "LE",
  "33": "LEFT",
  "34": "LOOP",
  "35": "LSL",
  "36": "LSR",
  "37": "LT",
  "38": "MAP",
  "39": "MEM",
  "3a": "MUL",
  "3b": "NEG",
  "3c": "NEQ",
  "3d": "NIL",
  "3e": "NONE",
  "3f": "NOT",
  "40": "NOW",
  "41": "OR",
  "42": "PAIR",
  "43": "PUSH",
  "44": "RIGHT",
  "45": "SIZE",
  "46": "SOME",
  "47": "SOURCE",
  "48": "SENDER",
  "49": "SELF",
  "4a": "STEPS_TO_QUOTA",
  "4b": "SUB",
  "4c": "SWAP",
  "4d": "TRANSFER_TOKENS",
  "4e": "SET_DELEGATE",
  "4f": "UNIT",
  "50": "UPDATE",
  "51": "XOR",
  "52": "ITER",
  "53": "LOOP_LEFT",
  "54": "ADDRESS",
  "55": "CONTRACT",
  "56": "ISNAT",
  "57": "CAST",
  "58": "RENAME",
  "59": "bool",
  "5a": "contract",
  "5b": "int",
  "5c": "key",
  "5d": "key_hash",
  "5e": "lambda",
  "5f": "list",
  "60": "map",
  "61": "big_map",
  "62": "nat",
  "63": "option",
  "64": "or",
  "65": "pair",
  "66": "set",
  "67": "signature",
  "68": "string",
  "69": "bytes",
  "6a": "mutez",
  "6b": "timestamp",
  "6c": "unit",
  "6d": "operation",
  "6e": "address",
  "6f": "SLICE",
  "70": "DIG",
  "71": "DUG",
  "72": "EMPTY_BIG_MAP",
  "73": "APPLY",
  "74": "chain_id",
  "75": "CHAIN_ID",
  "76": "LEVEL",
  "77": "SELF_ADDRESS",
  "78": "never",
  "79": "NEVER",
  "7a": "UNPAIR",
  "7b": "VOTING_POWER",
  "7c": "TOTAL_VOTING_POWER",
  "7d": "KECCAK",
  "7e": "SHA3",
  "7f": "PAIRING_CHECK",
  "80": "bls12_381_g1",
  "81": "bls12_381_g2",
  "82": "bls12_381_fr",
  "83": "sapling_state",
  "84": "sapling_transaction_deprecated",
  "85": "SAPLING_EMPTY_STATE",
  "86": "SAPLING_VERIFY_UPDATE",
  "87": "ticket",
  "88": "TICKET_DEPRECATED",
  "89": "READ_TICKET",
  "8a": "SPLIT_TICKET",
  "8b": "JOIN_TICKETS",
  "8c": "GET_AND_UPDATE",
  "8d": "chest",
  "8e": "chest_key",
  "8f": "OPEN_CHEST",
  "90": "VIEW",
  "91": "view",
  "92": "constant",
  "93": "SUB_MUTEZ",
  "94": "tx_rollup_l2_address",
  "95": "MIN_BLOCK_TIME",
  "96": "sapling_transaction",
  "97": "EMIT",
  "98": "Lambda_rec",
  "99": "LAMBDA_REC",
  "9a": "TICKET",
  "9b": "BYTES",
  "9c": "NAT"
};
var opMappingReverse = (() => {
  const result = {};
  Object.keys(opMapping).forEach((key) => {
    result[opMapping[key]] = key;
  });
  return result;
})();
var kindMapping = {
  4: "activate_account",
  107: "reveal",
  110: "delegation",
  108: "transaction",
  109: "origination",
  6: "ballot",
  21: "endorsement",
  1: "seed_nonce_revelation",
  5: "proposals",
  111: "register_global_constant",
  150: "tx_rollup_origination",
  151: "tx_rollup_submit_batch",
  158: "transfer_ticket",
  112: "set_deposits_limit",
  113: "increase_paid_storage",
  114: "update_consensus_key",
  9: "drain_delegate",
  200: "smart_rollup_originate",
  201: "smart_rollup_add_messages",
  206: "smart_rollup_execute_outbox_message",
  17: "failing_noop"
};
var kindMappingReverse = (() => {
  const result = {};
  Object.keys(kindMapping).forEach((key) => {
    const keyNum = typeof key === "string" ? parseInt(key, 10) : key;
    result[kindMapping[keyNum]] = pad(keyNum, 2);
  });
  return result;
})();
var entrypointMapping = {
  "00": "default",
  "01": "root",
  "02": "do",
  "03": "set_delegate",
  "04": "remove_delegate",
  "05": "deposit"
};
var entrypointMappingReverse = (() => {
  const result = {};
  Object.keys(entrypointMapping).forEach((key) => {
    result[entrypointMapping[key]] = key;
  });
  return result;
})();
var InvalidOperationSchemaError = class extends ParameterValidationError {
  constructor(operation, errorDetail) {
    super();
    this.operation = operation;
    this.errorDetail = errorDetail;
    this.name = "InvalidOperationSchemaError";
    this.message = `Invalid operation content recevied`;
    errorDetail ? this.message += ` ${errorDetail}.` : "";
  }
};
var OversizedEntryPointError = class extends ParameterValidationError {
  constructor(entrypoint) {
    super();
    this.entrypoint = entrypoint;
    this.name = "OversizedEntryPointError";
    this.message = `Invalid entrypoint length "${entrypoint.length}", maximum length is "${ENTRYPOINT_MAX_LENGTH}".`;
  }
};
var InvalidBallotValueError = class extends ParameterValidationError {
  constructor(ballotValue) {
    super();
    this.ballotValue = ballotValue;
    this.name = "InvalidBallotValueError";
    this.message = `Invalid ballot value "${ballotValue}" expecting one of the following: "yay", "nay", "pass".`;
  }
};
var DecodeBallotValueError = class extends ParameterValidationError {
  constructor(ballotValue) {
    super();
    this.ballotValue = ballotValue;
    this.name = "DecodeBallotValueError";
    this.message = `Invalid ballot value "${ballotValue}", cannot be decoded.`;
  }
};
var UnexpectedMichelsonValueError = class extends ParameterValidationError {
  constructor(value) {
    super();
    this.value = value;
    this.name = "UnexpectedMichelsonValueError";
    this.message = `Invalid Michelson value "${value}", unalbe to encode.`;
  }
};
var OperationDecodingError = class extends ParameterValidationError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "OperationDecodingError";
  }
};
var OperationEncodingError = class extends ParameterValidationError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "OperationEncodingError";
  }
};
var UnsupportedOperationError = class extends ParameterValidationError {
  constructor(op) {
    super();
    this.op = op;
    this.name = "UnsupportedOperationError";
    this.message = `Unsupported operation "${op}", can submit an issue on our github for feature request.`;
  }
};
var UnsupportedPvmKindError = class extends ParameterValidationError {
  constructor(pvm) {
    super();
    this.pvm = pvm;
    this.name = "UnsupportedPvmKindError";
    this.message = `Invalid Pvm kind "${pvm}" expecting either "arith" or "wasm_2_0_0".`;
  }
};
var DecodePvmKindError = class extends ParameterValidationError {
  constructor(pvm) {
    super();
    this.pvm = pvm;
    this.name = "DecodePvmKindError";
    this.message = `Invalid Pvm kind "${pvm}", cannot be decoded.`;
  }
};
var InvalidSmartRollupAddressError = class extends ParameterValidationError {
  constructor(address, errorDetail) {
    super();
    this.address = address;
    this.errorDetail = errorDetail;
    this.name = "InvalidSmartRollupAddress";
    this.message = `Invalid smart rollup address "${address}"`;
    errorDetail ? this.message += ` ${errorDetail}.` : "";
  }
};
var InvalidSmartRollupCommitmentHashError = class extends ParameterValidationError {
  constructor(hash2, errorDetail) {
    super();
    this.hash = hash2;
    this.errorDetail = errorDetail;
    this.name = "InvalidSmartRollupCommitmentHashError";
    this.message = `Invalid smart rollup commitment hash "${hash2}"`;
    errorDetail ? this.message += ` ${errorDetail}.` : "";
  }
};
var Uint8ArrayConsumer = class _Uint8ArrayConsumer {
  constructor(arr, offset = 0) {
    this.arr = arr;
    this.offset = offset;
  }
  static fromHexString(hex) {
    const lowHex = hex.toLowerCase();
    if (/^(([a-f]|\d){2})*$/.test(lowHex)) {
      const arr = new Uint8Array((lowHex.match(/([a-z]|\d){2}/g) || []).map((byte) => parseInt(byte, 16)));
      return new _Uint8ArrayConsumer(arr);
    } else {
      throw new InvalidHexStringError(lowHex);
    }
  }
  consume(count2) {
    const subArr = this.arr.subarray(this.offset, this.offset + count2);
    this.offset += count2;
    return subArr;
  }
  get(idx) {
    return this.arr[this.offset + idx];
  }
  length() {
    return this.arr.length - this.offset;
  }
  slice(start, end) {
    return new _Uint8ArrayConsumer(this.arr.slice(start, end));
  }
};
var isPrim = (value) => {
  return "prim" in value;
};
var isBytes = (value) => {
  return "bytes" in value && typeof value.bytes === "string";
};
var isString = (value) => {
  return "string" in value && typeof value.string === "string";
};
var isInt = (value) => {
  return "int" in value && typeof value.int === "string";
};
var scriptEncoder = (script) => {
  const code2 = valueEncoder(script.code);
  const storage2 = valueEncoder(script.storage);
  return `${pad(code2.length / 2, 8)}${code2}${pad(storage2.length / 2, 8)}${storage2}`;
};
var scriptDecoder = (value) => {
  const code2 = extractRequiredLen(value);
  const storage2 = extractRequiredLen(value);
  return {
    code: valueDecoder(new Uint8ArrayConsumer(code2)),
    storage: valueDecoder(new Uint8ArrayConsumer(storage2))
  };
};
var valueEncoder = (value) => {
  if (Array.isArray(value)) {
    const encoded = value.map((x) => valueEncoder(x)).join("");
    const len = encoded.length / 2;
    return `02${pad(len)}${encoded}`;
  } else if (isPrim(value)) {
    return primEncoder(value);
  } else if (isBytes(value)) {
    return bytesEncoder(value);
  } else if (isString(value)) {
    return stringEncoder(value);
  } else if (isInt(value)) {
    return intEncoder(value);
  }
  throw new UnexpectedMichelsonValueError(JSON.stringify(value));
};
var valueDecoder = (value) => {
  const preamble = value.consume(1);
  switch (preamble[0]) {
    case 10:
      return bytesDecoder(value);
    case 1:
      return stringDecoder(value);
    case 0:
      return intDecoder(value);
    case 2: {
      const val = new Uint8ArrayConsumer(extractRequiredLen(value));
      const results = [];
      while (val.length() > 0) {
        results.push(valueDecoder(val));
      }
      return results;
    }
    default:
      return primDecoder(value, preamble);
  }
};
var extractRequiredLen = (value, bytesLength = 4) => {
  const len = value.consume(bytesLength);
  const valueLen = parseInt(Buffer.from(len).toString("hex"), 16);
  return value.consume(valueLen);
};
var stripLengthPrefixFromBytes = (value, bytesLength = 4) => {
  const ret = [];
  let values = value;
  while (values.length()) {
    const len = values.consume(bytesLength);
    const valueLen = parseInt(Buffer.from(len).toString("hex"), 16);
    ret.push(values.consume(valueLen));
    values = values.slice(valueLen + bytesLength);
  }
  return ret;
};
var bytesEncoder = (value) => {
  if (!/^([A-Fa-f0-9]{2})*$/.test(value.bytes)) {
    throw new InvalidHexStringError(value.bytes);
  }
  const len = value.bytes.length / 2;
  return `0a${pad(len)}${value.bytes}`;
};
var bytesDecoder = (value) => {
  const bytes = extractRequiredLen(value);
  return {
    bytes: Buffer.from(bytes).toString("hex")
  };
};
var stringEncoder = (value) => {
  const str = Buffer.from(value.string, "utf8").toString("hex");
  const hexLength = str.length / 2;
  return `01${pad(hexLength)}${str}`;
};
var stringDecoder = (value) => {
  const str = extractRequiredLen(value);
  return {
    string: Buffer.from(str).toString("utf8")
  };
};
var intEncoder = ({ int }) => {
  const num = new BigNumber(int, 10);
  const positiveMark = num.toString(2)[0] === "-" ? "1" : "0";
  const binary = num.toString(2).replace(/-/g, "");
  const pad2 = binary.length <= 6 ? 6 : (binary.length - 6) % 7 ? binary.length + 7 - (binary.length - 6) % 7 : binary.length;
  const splitted = binary.padStart(pad2, "0").match(/\d{6,7}/g);
  const reversed = splitted.reverse();
  reversed[0] = positiveMark + reversed[0];
  const numHex = reversed.map((x, i) => (
    // Add one to the last chunk
    parseInt((i === reversed.length - 1 ? "0" : "1") + x, 2).toString(16).padStart(2, "0")
  ));
  return `00${numHex.join("")}`;
};
var intDecoder = (value) => {
  let c = value.consume(1)[0];
  const hexNumber = [];
  const isNotLastChunkMask = 1 << 7;
  while (c & isNotLastChunkMask) {
    hexNumber.push(c);
    c = value.consume(1)[0];
  }
  hexNumber.push(c);
  const isNegative = !!(1 << 6 & hexNumber[0]);
  hexNumber[0] = hexNumber[0] & 127;
  const numBin = hexNumber.map((x, i) => x.toString(2).slice(i === 0 ? -6 : -7).padStart(i === 0 ? 6 : 7, "0")).reverse();
  let num = new BigNumber(numBin.join(""), 2);
  if (isNegative) {
    num = num.times(-1);
  }
  return {
    int: num.toFixed()
  };
};
var primEncoder = (value) => {
  const hasAnnot = +Array.isArray(value.annots);
  const argsCount = Array.isArray(value.args) ? value.args.length : 0;
  const preamble = pad(Math.min(2 * argsCount + hasAnnot + 3, 9), 2);
  const op = opMappingReverse[value.prim];
  let encodedArgs = (value.args || []).map((arg) => valueEncoder(arg)).join("");
  const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : "";
  if ((value.prim === "LAMBDA" || value.prim === "LAMBDA_REC") && argsCount) {
    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);
  }
  if ((value.prim === "pair" || value.prim === "Pair") && argsCount > 2) {
    encodedArgs = encodedAnnots === "" ? pad(encodedArgs.length / 2) + encodedArgs + pad(0) : pad(encodedArgs.length / 2) + encodedArgs;
  }
  if (value.prim === "view" && value.args) {
    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);
  }
  return `${preamble}${op}${encodedArgs}${encodedAnnots}`;
};
var primDecoder = (value, preamble) => {
  const hasAnnot = (preamble[0] - 3) % 2 === 1;
  let argsCount = Math.floor((preamble[0] - 3) / 2);
  const op = value.consume(1)[0].toString(16).padStart(2, "0");
  const result = {
    prim: opMapping[op]
  };
  if (opMapping[op] === "LAMBDA" || opMapping[op] === "LAMBDA_REC") {
    value.consume(4);
  }
  if (opMapping[op] === "view") {
    if (argsCount != 0) {
      return primViewDecoder(value, result);
    } else {
      return result;
    }
  }
  let combPairArgs;
  let combPairAnnots;
  if ((opMapping[op] === "pair" || opMapping[op] === "Pair") && argsCount > 2) {
    combPairArgs = decodeCombPair(value);
    argsCount = 0;
    combPairAnnots = decodeAnnots(value);
  }
  const args = new Array(argsCount).fill(0).map(() => valueDecoder(value));
  if (opMapping[op] === "LAMBDA" || opMapping[op] === "LAMBDA_REC") {
    value.consume(4);
  }
  if (combPairArgs) {
    result["args"] = combPairArgs;
  } else if (args.length) {
    result["args"] = args;
  }
  if (combPairAnnots && combPairAnnots[0] !== "") {
    result["annots"] = combPairAnnots;
  } else if (hasAnnot) {
    result["annots"] = decodeAnnots(value);
  }
  return result;
};
var primViewDecoder = (value, result) => {
  value.consume(4);
  result["args"] = new Array(4).fill(0).map(() => valueDecoder(value));
  value.consume(4);
  return result;
};
var decodeCombPair = (val) => {
  const array = new Uint8ArrayConsumer(extractRequiredLen(val));
  const args = [];
  while (array.length() > 0) {
    args.push(valueDecoder(array));
  }
  return args;
};
var encodeAnnots = (value) => {
  const mergedAnnot = value.map((x) => {
    return Buffer.from(x, "utf8").toString("hex");
  }).join("20");
  const len = mergedAnnot.length / 2;
  return `${pad(len)}${mergedAnnot}`;
};
var decodeAnnots = (val) => {
  const len = val.consume(4);
  const annotLen = parseInt(Buffer.from(len).toString("hex"), 16);
  const restOfAnnot = val.consume(annotLen);
  const restOfAnnotHex = Buffer.from(restOfAnnot).toString("hex");
  return restOfAnnotHex.split("20").map((x) => Buffer.from(x, "hex").toString("utf8"));
};
var prefixEncoder = (prefix$1) => (str) => {
  return buf2hex(Buffer.from(b58cdecode(str, prefix[prefix$1])));
};
var prefixDecoder = (pre) => (str) => {
  const val = str.consume(prefixLength[pre]);
  return b58cencode(val, prefix[pre]);
};
var tz1Decoder = prefixDecoder(Prefix.TZ1);
var branchDecoder = prefixDecoder(Prefix.B);
var pkhDecoder = (val) => {
  const prefix2 = val.consume(1);
  if (prefix2[0] === 0) {
    return prefixDecoder(Prefix.TZ1)(val);
  } else if (prefix2[0] === 1) {
    return prefixDecoder(Prefix.TZ2)(val);
  } else if (prefix2[0] === 2) {
    return prefixDecoder(Prefix.TZ3)(val);
  }
};
var branchEncoder = prefixEncoder(Prefix.B);
var tz1Encoder = prefixEncoder(Prefix.TZ1);
var boolEncoder = (bool) => bool ? "ff" : "00";
var proposalEncoder = (proposal) => {
  return prefixEncoder(Prefix.P)(proposal);
};
var proposalDecoder = (proposal) => {
  return prefixDecoder(Prefix.P)(proposal);
};
var proposalsDecoder = (proposal) => {
  const proposals = [];
  proposal.consume(4);
  while (proposal.length() > 0) {
    proposals.push(proposalDecoder(proposal));
  }
  return proposals;
};
var proposalsEncoder = (proposals) => {
  return pad(32 * proposals.length) + proposals.map((x) => proposalEncoder(x)).join("");
};
var ballotEncoder = (ballot) => {
  switch (ballot) {
    case "yay":
      return "00";
    case "nay":
      return "01";
    case "pass":
      return "02";
    default:
      throw new InvalidBallotValueError(ballot);
  }
};
var ballotDecoder = (ballot) => {
  const value = ballot.consume(1);
  switch (value[0]) {
    case 0:
      return "yay";
    case 1:
      return "nay";
    case 2:
      return "pass";
    default:
      throw new DecodeBallotValueError(value[0].toString());
  }
};
var pvmKindEncoder = (pvm) => {
  switch (pvm) {
    case "arith":
      return "00";
    case "wasm_2_0_0":
      return "01";
    default:
      throw new UnsupportedPvmKindError(pvm);
  }
};
var pvmKindDecoder = (pvm) => {
  const value = pvm.consume(1);
  switch (value[0]) {
    case 0:
      return "arith";
    case 1:
      return "wasm_2_0_0";
    default:
      throw new DecodePvmKindError(value[0].toString());
  }
};
var delegateEncoder = (val) => {
  if (val) {
    return boolEncoder(true) + pkhEncoder(val);
  } else {
    return boolEncoder(false);
  }
};
var int32Encoder = (val) => {
  const num = parseInt(String(val), 10);
  const byte = [];
  for (let i = 0; i < 4; i++) {
    const shiftBy = (4 - (i + 1)) * 8;
    byte.push((num & 255 << shiftBy) >> shiftBy);
  }
  return Buffer.from(byte).toString("hex");
};
var int32Decoder = (val) => {
  const num = val.consume(4);
  let finalNum = 0;
  for (let i = 0; i < num.length; i++) {
    finalNum = finalNum | num[i] << (num.length - (i + 1)) * 8;
  }
  return finalNum;
};
var int16Encoder = (val) => {
  const num = parseInt(String(val), 10);
  const byte = [];
  for (let i = 0; i < 2; i++) {
    const shiftBy = (2 - (i + 1)) * 8;
    byte.push((num & 255 << shiftBy) >> shiftBy);
  }
  return Buffer.from(byte).toString("hex");
};
var int16Decoder = (val) => {
  const num = val.consume(2);
  let finalNum = 0;
  for (let i = 0; i < num.length; i++) {
    finalNum = finalNum | num[i] << (num.length - (i + 1)) * 8;
  }
  return finalNum;
};
var boolDecoder = (val) => {
  const bool = val.consume(1);
  return bool[0] === 255;
};
var delegateDecoder = (val) => {
  const hasDelegate = boolDecoder(val);
  if (hasDelegate) {
    return pkhDecoder(val);
  }
};
var pkhEncoder = (val) => {
  const pubkeyPrefix = val.substring(0, 3);
  switch (pubkeyPrefix) {
    case Prefix.TZ1:
      return "00" + prefixEncoder(Prefix.TZ1)(val);
    case Prefix.TZ2:
      return "01" + prefixEncoder(Prefix.TZ2)(val);
    case Prefix.TZ3:
      return "02" + prefixEncoder(Prefix.TZ3)(val);
    case Prefix.TZ4:
      return "03" + prefixEncoder(Prefix.TZ4)(val);
    default:
      throw new InvalidKeyHashError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting one for the following "${Prefix.TZ1}", "${Prefix.TZ2}", "${Prefix.TZ3}" or "${Prefix.TZ4}".`);
  }
};
var publicKeyEncoder = (val) => {
  const pubkeyPrefix = val.substring(0, 4);
  switch (pubkeyPrefix) {
    case Prefix.EDPK:
      return "00" + prefixEncoder(Prefix.EDPK)(val);
    case Prefix.SPPK:
      return "01" + prefixEncoder(Prefix.SPPK)(val);
    case Prefix.P2PK:
      return "02" + prefixEncoder(Prefix.P2PK)(val);
    default:
      throw new InvalidPublicKeyError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting one of the following '${Prefix.EDPK}', '${Prefix.SPPK}', '${Prefix.P2PK}' or '${Prefix.BLPK}'.`);
  }
};
var addressEncoder = (val) => {
  const pubkeyPrefix = val.substring(0, 3);
  switch (pubkeyPrefix) {
    case Prefix.TZ1:
    case Prefix.TZ2:
    case Prefix.TZ3:
    case Prefix.TZ4:
      return "00" + pkhEncoder(val);
    case Prefix.KT1:
      return "01" + prefixEncoder(Prefix.KT1)(val) + "00";
    default:
      throw new InvalidAddressError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting one of the following prefix '${Prefix.TZ1}', ${Prefix.TZ2}', '${Prefix.TZ3}', '${Prefix.TZ4}' or '${Prefix.KT1}'.`);
  }
};
var smartRollupAddressEncoder = (val) => {
  if (val.substring(0, 3) !== Prefix.SR1) {
    throw new InvalidSmartRollupAddressError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${Prefix.SR1}'.`);
  }
  return prefixEncoder(Prefix.SR1)(val);
};
var smartContractAddressEncoder = (val) => {
  const prefix2 = val.substring(0, 3);
  if (prefix2 === Prefix.KT1) {
    return "01" + prefixEncoder(Prefix.KT1)(val) + "00";
  }
  throw new InvalidContractAddressError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${Prefix.KT1}'.`);
};
var publicKeyDecoder = (val) => {
  const preamble = val.consume(1);
  switch (preamble[0]) {
    case 0:
      return prefixDecoder(Prefix.EDPK)(val);
    case 1:
      return prefixDecoder(Prefix.SPPK)(val);
    case 2:
      return prefixDecoder(Prefix.P2PK)(val);
    default:
      throw new InvalidPublicKeyError(val.toString(), invalidDetail(ValidationResult.NO_PREFIX_MATCHED));
  }
};
var smartRollupCommitmentHashEncoder = (val) => {
  const prefix2 = val.substring(0, 4);
  if (prefix2 === Prefix.SRC1) {
    return prefixEncoder(Prefix.SRC1)(val);
  }
  throw new InvalidSmartRollupCommitmentHashError(val, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${Prefix.SRC1}'`);
};
var addressDecoder = (val) => {
  const preamble = val.consume(1);
  switch (preamble[0]) {
    case 0:
      return pkhDecoder(val);
    case 1: {
      const address = prefixDecoder(Prefix.KT1)(val);
      val.consume(1);
      return address;
    }
    default:
      throw new InvalidAddressError(val.toString(), ": Unable to decode.");
  }
};
var smartRollupAddressDecoder = (val) => {
  const address = prefixDecoder(Prefix.SR1)(val);
  if (address.substring(0, 3) !== Prefix.SR1) {
    throw new InvalidSmartRollupAddressError(address, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${Prefix.SR1}'.`);
  }
  return address;
};
var smartContractAddressDecoder = (val) => {
  const preamble = val.consume(1);
  if (preamble[0] === 1) {
    const scAddress = prefixDecoder(Prefix.KT1)(val);
    val.consume(1);
    return scAddress;
  }
  throw new InvalidContractAddressError(val.toString(), invalidDetail(ValidationResult.NO_PREFIX_MATCHED));
};
var smartRollupCommitmentHashDecoder = (val) => {
  const address = prefixDecoder(Prefix.SRC1)(val);
  if (address.substring(0, 4) !== Prefix.SRC1) {
    throw new InvalidSmartRollupCommitmentHashError(address, invalidDetail(ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${Prefix.SRC1}'`);
  }
  return address;
};
var zarithEncoder = (n) => {
  const fn = [];
  let nn = new bignumber_default(n, 10);
  if (nn.isNaN()) {
    throw new TypeError(`Invalid zarith number ${n}`);
  }
  while (true) {
    if (nn.lt(128)) {
      if (nn.lt(16))
        fn.push("0");
      fn.push(nn.toString(16));
      break;
    } else {
      let b = nn.mod(128);
      nn = nn.minus(b);
      nn = nn.dividedBy(128);
      b = b.plus(128);
      fn.push(b.toString(16));
    }
  }
  return fn.join("");
};
var zarithDecoder = (n) => {
  let mostSignificantByte = 0;
  while (mostSignificantByte < n.length() && (n.get(mostSignificantByte) & 128) !== 0) {
    mostSignificantByte += 1;
  }
  let num = new bignumber_default(0);
  for (let i = mostSignificantByte; i >= 0; i -= 1) {
    const tmp = n.get(i) & 127;
    num = num.multipliedBy(128);
    num = num.plus(tmp);
  }
  n.consume(mostSignificantByte + 1);
  return new bignumber_default(num).toString();
};
var entrypointDecoder = (value) => {
  const preamble = pad(value.consume(1)[0], 2);
  if (preamble in entrypointMapping) {
    return entrypointMapping[preamble];
  } else {
    const entry = extractRequiredLen(value, 1);
    const entrypoint = Buffer.from(entry).toString("utf8");
    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {
      throw new OversizedEntryPointError(entrypoint);
    }
    return entrypoint;
  }
};
var parametersDecoder = (val) => {
  const preamble = val.consume(1);
  if (preamble[0] === 0) {
    return;
  } else {
    const encodedEntrypoint = entrypointDecoder(val);
    const params = extractRequiredLen(val);
    const parameters = valueDecoder(new Uint8ArrayConsumer(params));
    return {
      entrypoint: encodedEntrypoint,
      value: parameters
    };
  }
};
var entrypointEncoder = (entrypoint) => {
  if (entrypoint in entrypointMappingReverse) {
    return `${entrypointMappingReverse[entrypoint]}`;
  } else {
    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {
      throw new OversizedEntryPointError(entrypoint);
    }
    const value = { string: entrypoint };
    return `ff${valueEncoder(value).slice(8)}`;
  }
};
var parametersEncoder = (val) => {
  if (!val || val.entrypoint === "default" && "prim" in val.value && val.value.prim === "Unit") {
    return "00";
  }
  const encodedEntrypoint = entrypointEncoder(val.entrypoint);
  const parameters = valueEncoder(val.value);
  const length = (parameters.length / 2).toString(16).padStart(8, "0");
  return `ff${encodedEntrypoint}${length}${parameters}`;
};
var valueParameterEncoder = (value) => {
  const valueEncoded = valueEncoder(value);
  return `${pad(valueEncoded.length / 2)}${valueEncoded}`;
};
var valueParameterDecoder = (val) => {
  const value = extractRequiredLen(val);
  return valueDecoder(new Uint8ArrayConsumer(value));
};
var blockPayloadHashEncoder = prefixEncoder(Prefix.VH);
var blockPayloadHashDecoder = prefixDecoder(Prefix.VH);
var entrypointNameEncoder = (entrypoint) => {
  const value = { string: entrypoint };
  return `${valueEncoder(value).slice(2)}`;
};
var entrypointNameDecoder = (val) => {
  const entry = extractRequiredLen(val);
  return Buffer.from(entry).toString("utf8");
};
var txRollupOriginationParamEncoder = (_value) => {
  return "";
};
var txRollupOriginationParamDecoder = (_val) => {
  return {};
};
var txRollupIdEncoder = prefixEncoder(Prefix.TXR1);
var txRollupIdDecoder = prefixDecoder(Prefix.TXR1);
var txRollupBatchContentEncoder = (value) => {
  return `${pad(value.length / 2)}${value}`;
};
var txRollupBatchContentDecoder = (val) => {
  const value = extractRequiredLen(val);
  return Buffer.from(value).toString("hex");
};
var burnLimitEncoder = (val) => {
  return !val ? "00" : `ff${zarithEncoder(val)}`;
};
var burnLimitDecoder = (value) => {
  const prefix2 = value.consume(1);
  if (Buffer.from(prefix2).toString("hex") !== "00") {
    return zarithDecoder(value);
  }
};
var depositsLimitEncoder = (val) => {
  return !val ? "00" : `ff${zarithEncoder(val)}`;
};
var depositsLimitDecoder = (value) => {
  const prefix2 = value.consume(1);
  if (Buffer.from(prefix2).toString("hex") !== "00") {
    return zarithDecoder(value);
  }
};
var paddedBytesEncoder = (val, paddingLength = 8) => {
  return `${pad(val.length / 2, paddingLength)}${val}`;
};
var paddedBytesDecoder = (val) => {
  const value = extractRequiredLen(val);
  return Buffer.from(value).toString("hex");
};
var smartRollupMessageEncoder = (val) => {
  const message = val.reduce((prev, curr) => {
    return prev + `${pad(curr.length / 2)}${curr}`;
  }, "");
  return `${pad(message.length / 2)}${message}`;
};
var smartRollupMessageDecoder = (val) => {
  const valueArray = extractRequiredLen(val);
  const ret = stripLengthPrefixFromBytes(new Uint8ArrayConsumer(valueArray));
  return ret.map((value) => Buffer.from(value).toString("hex"));
};
var ManagerOperationSchema = {
  branch: CODEC.BRANCH,
  contents: [CODEC.OPERATION]
};
var ActivationSchema = {
  pkh: CODEC.TZ1,
  secret: CODEC.SECRET
};
var RevealSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  public_key: CODEC.PUBLIC_KEY
};
var DelegationSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  delegate: CODEC.DELEGATE
};
var TransactionSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  amount: CODEC.ZARITH,
  destination: CODEC.ADDRESS,
  parameters: CODEC.PARAMETERS
};
var OriginationSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  balance: CODEC.ZARITH,
  delegate: CODEC.DELEGATE,
  script: CODEC.SCRIPT
};
var BallotSchema = {
  source: CODEC.PKH,
  period: CODEC.INT32,
  proposal: CODEC.PROPOSAL,
  ballot: CODEC.BALLOT_STATEMENT
};
var EndorsementSchema = {
  slot: CODEC.INT16,
  level: CODEC.INT32,
  round: CODEC.INT32,
  block_payload_hash: CODEC.BLOCK_PAYLOAD_HASH
};
var SeedNonceRevelationSchema = {
  level: CODEC.INT32,
  nonce: CODEC.RAW
};
var ProposalsSchema = {
  source: CODEC.PKH,
  period: CODEC.INT32,
  proposals: CODEC.PROPOSAL_ARR
};
var RegisterGlobalConstantSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  value: CODEC.VALUE
};
var TransferTicketSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  ticket_contents: CODEC.VALUE,
  ticket_ty: CODEC.VALUE,
  ticket_ticketer: CODEC.ADDRESS,
  ticket_amount: CODEC.ZARITH,
  destination: CODEC.ADDRESS,
  entrypoint: CODEC.ENTRYPOINT
};
var TxRollupOriginationSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  tx_rollup_origination: CODEC.TX_ROLLUP_ORIGINATION_PARAM
};
var TxRollupSubmitBatchSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  rollup: CODEC.TX_ROLLUP_ID,
  content: CODEC.TX_ROLLUP_BATCH_CONTENT,
  burn_limit: CODEC.BURN_LIMIT
};
var IncreasePaidStorageSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  amount: CODEC.ZARITH,
  destination: CODEC.SMART_CONTRACT_ADDRESS
};
var UpdateConsensusKeySchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  pk: CODEC.PUBLIC_KEY
};
var DrainDelegateSchema = {
  consensus_key: CODEC.PKH,
  delegate: CODEC.PKH,
  destination: CODEC.PKH
};
var SetDepositsLimitSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  limit: CODEC.DEPOSITS_LIMIT
};
var SmartRollupOriginateSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  pvm_kind: CODEC.PVM_KIND,
  kernel: CODEC.PADDED_BYTES,
  origination_proof: CODEC.PADDED_BYTES,
  parameters_ty: CODEC.VALUE
};
var SmartRollupAddMessagesSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  message: CODEC.SMART_ROLLUP_MESSAGE
};
var SmartRollupExecuteOutboxMessageSchema = {
  source: CODEC.PKH,
  fee: CODEC.ZARITH,
  counter: CODEC.ZARITH,
  gas_limit: CODEC.ZARITH,
  storage_limit: CODEC.ZARITH,
  rollup: CODEC.SMART_ROLLUP_ADDRESS,
  cemented_commitment: CODEC.SMART_ROLLUP_COMMITMENT_HASH,
  output_proof: CODEC.PADDED_BYTES
};
var FailingNoopSchema = {
  arbitrary: CODEC.PADDED_BYTES
};
var operationEncoder = (encoders2) => (operation) => {
  if (!(operation.kind in encoders2) || !(operation.kind in kindMappingReverse)) {
    throw new InvalidOperationKindError(operation.kind);
  }
  return kindMappingReverse[operation.kind] + encoders2[operation.kind](operation);
};
var operationDecoder = (decoders2) => (value) => {
  const op = value.consume(1);
  const operationName = kindMapping[op[0]];
  if (operationName === void 0) {
    throw new UnsupportedOperationError(op[0].toString());
  }
  const decodedObj = decoders2[operationName](value);
  if (typeof decodedObj !== "object") {
    throw new OperationDecodingError("Invalid operation, cannot be decoded.");
  }
  return Object.assign({ kind: operationName }, decodedObj);
};
var schemaEncoder = (encoders2) => (schema) => (value) => {
  const keys = Object.keys(schema);
  return keys.reduce((prev, key) => {
    const valueToEncode = schema[key];
    if (value && Array.isArray(valueToEncode)) {
      const encoder = encoders2[valueToEncode[0]];
      const values = value[key];
      if (!Array.isArray(values)) {
        throw new OperationEncodingError(`Invalid operation value "${JSON.stringify(values)}" of key "${key}, expected value to be Array.`);
      }
      return prev + values.reduce((prevBytes, current) => prevBytes + encoder(current), "");
    } else {
      const encoder = encoders2[valueToEncode];
      return prev + encoder(value[key]);
    }
  }, "");
};
var schemaDecoder = (decoders2) => (schema) => (value) => {
  const keys = Object.keys(schema);
  return keys.reduce((prev, key) => {
    const valueToEncode = schema[key];
    if (Array.isArray(valueToEncode)) {
      const decoder = decoders2[valueToEncode[0]];
      const decoded = [];
      const lastLength = value.length();
      while (value.length() > 0) {
        decoded.push(decoder(value));
        if (lastLength === value.length()) {
          throw new OperationDecodingError("Unable to decode value");
        }
      }
      return Object.assign(Object.assign({}, prev), { [key]: decoded });
    } else {
      const decoder = decoders2[valueToEncode];
      const result = decoder(value);
      if (typeof result !== "undefined") {
        return Object.assign(Object.assign({}, prev), { [key]: result });
      } else {
        return Object.assign({}, prev);
      }
    }
  }, {});
};
var decoders = {
  [CODEC.SECRET]: (val) => toHexString(val.consume(20)),
  [CODEC.RAW]: (val) => toHexString(val.consume(32)),
  [CODEC.TZ1]: tz1Decoder,
  [CODEC.BRANCH]: branchDecoder,
  [CODEC.ZARITH]: zarithDecoder,
  [CODEC.PUBLIC_KEY]: publicKeyDecoder,
  [CODEC.PKH]: pkhDecoder,
  [CODEC.DELEGATE]: delegateDecoder,
  [CODEC.INT32]: int32Decoder,
  [CODEC.SCRIPT]: scriptDecoder,
  [CODEC.BALLOT_STATEMENT]: ballotDecoder,
  [CODEC.PROPOSAL]: proposalDecoder,
  [CODEC.PROPOSAL_ARR]: proposalsDecoder,
  [CODEC.PARAMETERS]: parametersDecoder,
  [CODEC.ADDRESS]: addressDecoder,
  [CODEC.SMART_ROLLUP_ADDRESS]: smartRollupAddressDecoder,
  [CODEC.SMART_CONTRACT_ADDRESS]: smartContractAddressDecoder,
  [CODEC.SMART_ROLLUP_COMMITMENT_HASH]: smartRollupCommitmentHashDecoder,
  [CODEC.VALUE]: valueParameterDecoder,
  [CODEC.INT16]: int16Decoder,
  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashDecoder,
  [CODEC.ENTRYPOINT]: entrypointNameDecoder,
  [CODEC.TX_ROLLUP_ORIGINATION_PARAM]: txRollupOriginationParamDecoder,
  [CODEC.TX_ROLLUP_ID]: txRollupIdDecoder,
  [CODEC.TX_ROLLUP_BATCH_CONTENT]: txRollupBatchContentDecoder,
  [CODEC.BURN_LIMIT]: burnLimitDecoder,
  [CODEC.DEPOSITS_LIMIT]: depositsLimitDecoder,
  [CODEC.PVM_KIND]: pvmKindDecoder,
  [CODEC.PADDED_BYTES]: paddedBytesDecoder,
  [CODEC.SMART_ROLLUP_MESSAGE]: smartRollupMessageDecoder
};
decoders[CODEC.OPERATION] = operationDecoder(decoders);
decoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val) => schemaDecoder(decoders)(ActivationSchema)(val);
decoders[CODEC.OP_FAILING_NOOP] = (val) => schemaDecoder(decoders)(FailingNoopSchema)(val);
decoders[CODEC.OP_DELEGATION] = (val) => schemaDecoder(decoders)(DelegationSchema)(val);
decoders[CODEC.OP_TRANSACTION] = (val) => schemaDecoder(decoders)(TransactionSchema)(val);
decoders[CODEC.OP_ORIGINATION] = (val) => schemaDecoder(decoders)(OriginationSchema)(val);
decoders[CODEC.OP_BALLOT] = (val) => schemaDecoder(decoders)(BallotSchema)(val);
decoders[CODEC.OP_ENDORSEMENT] = (val) => schemaDecoder(decoders)(EndorsementSchema)(val);
decoders[CODEC.OP_SEED_NONCE_REVELATION] = (val) => schemaDecoder(decoders)(SeedNonceRevelationSchema)(val);
decoders[CODEC.OP_PROPOSALS] = (val) => schemaDecoder(decoders)(ProposalsSchema)(val);
decoders[CODEC.OP_REVEAL] = (val) => schemaDecoder(decoders)(RevealSchema)(val);
decoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => schemaDecoder(decoders)(RegisterGlobalConstantSchema)(val);
decoders[CODEC.OP_TRANSFER_TICKET] = (val) => schemaDecoder(decoders)(TransferTicketSchema)(val);
decoders[CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => schemaDecoder(decoders)(TxRollupOriginationSchema)(val);
decoders[CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => schemaDecoder(decoders)(TxRollupSubmitBatchSchema)(val);
decoders[CODEC.OP_INCREASE_PAID_STORAGE] = (val) => schemaDecoder(decoders)(IncreasePaidStorageSchema)(val);
decoders[CODEC.OP_UPDATE_CONSENSUS_KEY] = (val) => schemaDecoder(decoders)(UpdateConsensusKeySchema)(val);
decoders[CODEC.OP_DRAIN_DELEGATE] = (val) => schemaDecoder(decoders)(DrainDelegateSchema)(val);
decoders[CODEC.OP_SMART_ROLLUP_ORIGINATE] = (val) => schemaDecoder(decoders)(SmartRollupOriginateSchema)(val);
decoders[CODEC.OP_SMART_ROLLUP_ADD_MESSAGES] = (val) => schemaDecoder(decoders)(SmartRollupAddMessagesSchema)(val);
decoders[CODEC.OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE] = (val) => schemaDecoder(decoders)(SmartRollupExecuteOutboxMessageSchema)(val);
decoders[CODEC.MANAGER] = schemaDecoder(decoders)(ManagerOperationSchema);
decoders[CODEC.OP_SET_DEPOSITS_LIMIT] = (val) => schemaDecoder(decoders)(SetDepositsLimitSchema)(val);
var encoders = {
  [CODEC.SECRET]: (val) => val,
  [CODEC.RAW]: (val) => val,
  [CODEC.TZ1]: tz1Encoder,
  [CODEC.BRANCH]: branchEncoder,
  [CODEC.ZARITH]: zarithEncoder,
  [CODEC.PUBLIC_KEY]: publicKeyEncoder,
  [CODEC.PKH]: pkhEncoder,
  [CODEC.DELEGATE]: delegateEncoder,
  [CODEC.SCRIPT]: scriptEncoder,
  [CODEC.BALLOT_STATEMENT]: ballotEncoder,
  [CODEC.PROPOSAL]: proposalEncoder,
  [CODEC.PROPOSAL_ARR]: proposalsEncoder,
  [CODEC.INT32]: int32Encoder,
  [CODEC.PARAMETERS]: parametersEncoder,
  [CODEC.ADDRESS]: addressEncoder,
  [CODEC.SMART_ROLLUP_ADDRESS]: smartRollupAddressEncoder,
  [CODEC.SMART_CONTRACT_ADDRESS]: smartContractAddressEncoder,
  [CODEC.SMART_ROLLUP_COMMITMENT_HASH]: smartRollupCommitmentHashEncoder,
  [CODEC.VALUE]: valueParameterEncoder,
  [CODEC.INT16]: int16Encoder,
  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashEncoder,
  [CODEC.ENTRYPOINT]: entrypointNameEncoder,
  [CODEC.TX_ROLLUP_ORIGINATION_PARAM]: txRollupOriginationParamEncoder,
  [CODEC.TX_ROLLUP_ID]: txRollupIdEncoder,
  [CODEC.TX_ROLLUP_BATCH_CONTENT]: txRollupBatchContentEncoder,
  [CODEC.BURN_LIMIT]: burnLimitEncoder,
  [CODEC.DEPOSITS_LIMIT]: depositsLimitEncoder,
  [CODEC.PVM_KIND]: pvmKindEncoder,
  [CODEC.PADDED_BYTES]: paddedBytesEncoder,
  [CODEC.SMART_ROLLUP_MESSAGE]: smartRollupMessageEncoder
};
encoders[CODEC.OPERATION] = operationEncoder(encoders);
encoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val) => schemaEncoder(encoders)(ActivationSchema)(val);
encoders[CODEC.OP_DELEGATION] = (val) => schemaEncoder(encoders)(DelegationSchema)(val);
encoders[CODEC.OP_TRANSACTION] = (val) => schemaEncoder(encoders)(TransactionSchema)(val);
encoders[CODEC.OP_ORIGINATION] = (val) => schemaEncoder(encoders)(OriginationSchema)(val);
encoders[CODEC.OP_BALLOT] = (val) => schemaEncoder(encoders)(BallotSchema)(val);
encoders[CODEC.OP_ENDORSEMENT] = (val) => schemaEncoder(encoders)(EndorsementSchema)(val);
encoders[CODEC.OP_SEED_NONCE_REVELATION] = (val) => schemaEncoder(encoders)(SeedNonceRevelationSchema)(val);
encoders[CODEC.OP_PROPOSALS] = (val) => schemaEncoder(encoders)(ProposalsSchema)(val);
encoders[CODEC.OP_REVEAL] = (val) => schemaEncoder(encoders)(RevealSchema)(val);
encoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => schemaEncoder(encoders)(RegisterGlobalConstantSchema)(val);
encoders[CODEC.OP_TRANSFER_TICKET] = (val) => schemaEncoder(encoders)(TransferTicketSchema)(val);
encoders[CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => schemaEncoder(encoders)(TxRollupOriginationSchema)(val);
encoders[CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => schemaEncoder(encoders)(TxRollupSubmitBatchSchema)(val);
encoders[CODEC.OP_INCREASE_PAID_STORAGE] = (val) => schemaEncoder(encoders)(IncreasePaidStorageSchema)(val);
encoders[CODEC.OP_UPDATE_CONSENSUS_KEY] = (val) => schemaEncoder(encoders)(UpdateConsensusKeySchema)(val);
encoders[CODEC.OP_DRAIN_DELEGATE] = (val) => schemaEncoder(encoders)(DrainDelegateSchema)(val);
encoders[CODEC.OP_SMART_ROLLUP_ORIGINATE] = (val) => schemaEncoder(encoders)(SmartRollupOriginateSchema)(val);
encoders[CODEC.OP_SMART_ROLLUP_ADD_MESSAGES] = (val) => schemaEncoder(encoders)(SmartRollupAddMessagesSchema)(val);
encoders[CODEC.OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE] = (val) => schemaEncoder(encoders)(SmartRollupExecuteOutboxMessageSchema)(val);
encoders[CODEC.MANAGER] = schemaEncoder(encoders)(ManagerOperationSchema);
encoders[CODEC.OP_SET_DEPOSITS_LIMIT] = (val) => schemaEncoder(encoders)(SetDepositsLimitSchema)(val);
encoders[CODEC.OP_FAILING_NOOP] = (val) => schemaEncoder(encoders)(FailingNoopSchema)(val);
var OperationKindMapping = {
  activate_account: ActivationSchema,
  reveal: RevealSchema,
  delegation: DelegationSchema,
  transaction: TransactionSchema,
  origination: OriginationSchema,
  ballot: BallotSchema,
  endorsement: EndorsementSchema,
  seed_nonce_revelation: SeedNonceRevelationSchema,
  proposals: ProposalsSchema,
  register_global_constant: RegisterGlobalConstantSchema,
  transfer_ticket: TransferTicketSchema,
  tx_rollup_origination: TxRollupOriginationSchema,
  tx_rollup_submit_batch: TxRollupSubmitBatchSchema,
  increase_paid_storage: IncreasePaidStorageSchema,
  update_consensus_key: UpdateConsensusKeySchema,
  drain_delegate: DrainDelegateSchema,
  set_deposits_limit: SetDepositsLimitSchema,
  smart_rollup_originate: SmartRollupOriginateSchema,
  smart_rollup_add_messages: SmartRollupAddMessagesSchema,
  smart_rollup_execute_outbox_message: SmartRollupExecuteOutboxMessageSchema,
  failing_noop: FailingNoopSchema
};
var getArrayDifference = (arr1, arr2) => {
  return arr2.filter((x) => !arr1.includes(x));
};
var deleteArrayElementByValue = (array, item) => {
  return array.filter((e) => e !== item);
};
var validateOperationKind = (opKind) => {
  const opKindList = Object.keys(OperationKindMapping);
  return opKindList.includes(opKind);
};
var validateMissingProperty = (operationContent) => {
  const kind = operationContent.kind;
  const keys = Object.keys(operationContent);
  const cleanKeys = deleteArrayElementByValue(keys, "kind");
  const schemaKeys = Object.keys(OperationKindMapping[kind]);
  return getArrayDifference(cleanKeys, schemaKeys);
};
var ProtocolsHash;
(function(ProtocolsHash2) {
  ProtocolsHash2["Pt24m4xi"] = "Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd";
  ProtocolsHash2["PsBABY5H"] = "PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU";
  ProtocolsHash2["PsBabyM1"] = "PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS";
  ProtocolsHash2["PsCARTHA"] = "PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb";
  ProtocolsHash2["PsDELPH1"] = "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo";
  ProtocolsHash2["PtEdo2Zk"] = "PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA";
  ProtocolsHash2["PsFLorena"] = "PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i";
  ProtocolsHash2["PtGRANADs"] = "PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV";
  ProtocolsHash2["PtHangz2"] = "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
  ProtocolsHash2["Psithaca2"] = "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
  ProtocolsHash2["PtJakart2"] = "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
  ProtocolsHash2["PtKathman"] = "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
  ProtocolsHash2["PtLimaPtL"] = "PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW";
  ProtocolsHash2["PtMumbaii"] = "PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc";
  ProtocolsHash2["PtMumbai2"] = "PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1";
  ProtocolsHash2["PtNairobi"] = "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
  ProtocolsHash2["ProtoALpha"] = "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK";
})(ProtocolsHash || (ProtocolsHash = {}));
var PROTOCOL_CURRENT = ProtocolsHash.PtMumbai2;
function getCodec(codec, _proto) {
  return {
    encoder: encoders[codec],
    decoder: (hex) => {
      const consumer = Uint8ArrayConsumer.fromHexString(hex);
      return decoders[codec](consumer);
    }
  };
}
var LocalForger = class {
  constructor(protocolHash = PROTOCOL_CURRENT) {
    this.protocolHash = protocolHash;
    this.codec = getCodec(CODEC.MANAGER, this.protocolHash);
  }
  forge(params) {
    const branchValidation = validateBlock(params.branch);
    if (branchValidation !== ValidationResult.VALID) {
      throw new InvalidBlockHashError(params.branch, invalidDetail(branchValidation));
    }
    for (const content of params.contents) {
      if (!validateOperationKind(content.kind)) {
        throw new InvalidOperationKindError(content.kind);
      }
      const diff = validateMissingProperty(content);
      if (diff.length === 1) {
        if (content.kind === "delegation" && diff[0] === "delegate") {
          continue;
        } else if (content.kind === "origination" && diff[0] === "delegate") {
          continue;
        } else if (content.kind === "transaction" && diff[0] === "parameters") {
          continue;
        } else if (content.kind === "set_deposits_limit" && diff[0] === "limit") {
          continue;
        } else if (content.kind === "tx_rollup_submit_batch" && diff[0] === "burn_limit") {
          continue;
        } else {
          throw new InvalidOperationSchemaError(content, `missing properties "${diff.join(", ")}"`);
        }
      } else if (diff.length > 1) {
        throw new InvalidOperationSchemaError(content, `missing properties "${diff.join(", ")}"`);
      }
    }
    const forged = this.codec.encoder(params).toLowerCase();
    return Promise.resolve(forged);
  }
  parse(hex) {
    return Promise.resolve(this.codec.decoder(hex));
  }
};
var localForger = new LocalForger();

// node_modules/@taquito/taquito/dist/taquito.es6.js
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter4(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function formatErrorMessage(error, stringToReplace) {
  const body = JSON.parse(error.body);
  if (body[0] && body[0].kind && body[0].msg) {
    const newBody = JSON.stringify({
      kind: body[0].kind,
      id: body[0].id,
      msg: body[0].msg.replace(stringToReplace, "")
    });
    return new HttpResponseError(`Http error response: (${error.status}) ${newBody}`, error.status, error.statusText, newBody, error.url);
  } else {
    return error;
  }
}
var RpcInjector = class {
  constructor(context2) {
    this.context = context2;
  }
  inject(signedOperationBytes) {
    return __awaiter4(this, void 0, void 0, function* () {
      let hash2;
      try {
        hash2 = yield this.context.rpc.injectOperation(signedOperationBytes);
      } catch (error) {
        const stringToStrip = ". You may want to use --replace to provide adequate fee and replace it";
        if (error instanceof HttpResponseError && error.message.includes(stringToStrip)) {
          throw formatErrorMessage(error, stringToStrip);
        } else {
          throw error;
        }
      }
      return hash2;
    });
  }
};
var UnconfiguredSignerError = class extends TezosToolkitConfigError {
  constructor() {
    super();
    this.name = "UnconfiguredSignerError";
    this.message = "No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.";
  }
};
var NoopSigner = class {
  publicKey() {
    return __awaiter4(this, void 0, void 0, function* () {
      throw new UnconfiguredSignerError();
    });
  }
  publicKeyHash() {
    return __awaiter4(this, void 0, void 0, function* () {
      throw new UnconfiguredSignerError();
    });
  }
  secretKey() {
    return __awaiter4(this, void 0, void 0, function* () {
      throw new UnconfiguredSignerError();
    });
  }
  sign(_bytes, _watermark) {
    return __awaiter4(this, void 0, void 0, function* () {
      throw new UnconfiguredSignerError();
    });
  }
};
function createObservableFromSubscription(sub) {
  return new Observable((subscriber) => {
    sub.on("data", (data) => {
      subscriber.next(data);
    });
    sub.on("error", (error) => {
      subscriber.error(error);
    });
    sub.on("close", () => {
      subscriber.complete();
    });
    return () => {
      sub.close();
    };
  });
}
var DEFAULT_GAS_LIMIT;
(function(DEFAULT_GAS_LIMIT2) {
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["DELEGATION"] = 10600] = "DELEGATION";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["ORIGINATION"] = 10600] = "ORIGINATION";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["TRANSFER"] = 10600] = "TRANSFER";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["REVEAL_TZ1"] = 1e3] = "REVEAL_TZ1";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["REVEAL_TZ2"] = 1e3] = "REVEAL_TZ2";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["REVEAL_TZ3"] = 2e3] = "REVEAL_TZ3";
  DEFAULT_GAS_LIMIT2[DEFAULT_GAS_LIMIT2["REVEAL_TZ4"] = 2e3] = "REVEAL_TZ4";
})(DEFAULT_GAS_LIMIT || (DEFAULT_GAS_LIMIT = {}));
var DEFAULT_FEE;
(function(DEFAULT_FEE2) {
  DEFAULT_FEE2[DEFAULT_FEE2["DELEGATION"] = 1257] = "DELEGATION";
  DEFAULT_FEE2[DEFAULT_FEE2["ORIGINATION"] = 1e4] = "ORIGINATION";
  DEFAULT_FEE2[DEFAULT_FEE2["TRANSFER"] = 1e4] = "TRANSFER";
  DEFAULT_FEE2[DEFAULT_FEE2["REVEAL"] = 374] = "REVEAL";
})(DEFAULT_FEE || (DEFAULT_FEE = {}));
var DEFAULT_STORAGE_LIMIT;
(function(DEFAULT_STORAGE_LIMIT2) {
  DEFAULT_STORAGE_LIMIT2[DEFAULT_STORAGE_LIMIT2["DELEGATION"] = 0] = "DELEGATION";
  DEFAULT_STORAGE_LIMIT2[DEFAULT_STORAGE_LIMIT2["ORIGINATION"] = 257] = "ORIGINATION";
  DEFAULT_STORAGE_LIMIT2[DEFAULT_STORAGE_LIMIT2["TRANSFER"] = 257] = "TRANSFER";
  DEFAULT_STORAGE_LIMIT2[DEFAULT_STORAGE_LIMIT2["REVEAL"] = 0] = "REVEAL";
})(DEFAULT_STORAGE_LIMIT || (DEFAULT_STORAGE_LIMIT = {}));
var COST_PER_BYTE = 250;
var Protocols;
(function(Protocols2) {
  Protocols2["Pt24m4xi"] = "Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd";
  Protocols2["PsBABY5H"] = "PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU";
  Protocols2["PsBabyM1"] = "PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS";
  Protocols2["PsCARTHA"] = "PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb";
  Protocols2["PsDELPH1"] = "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo";
  Protocols2["PtEdo2Zk"] = "PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA";
  Protocols2["PsFLorena"] = "PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i";
  Protocols2["PtGRANADs"] = "PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV";
  Protocols2["PtHangz2"] = "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
  Protocols2["PsiThaCa"] = "PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP";
  Protocols2["Psithaca2"] = "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
  Protocols2["PtJakart2"] = "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
  Protocols2["PtKathman"] = "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
  Protocols2["PtLimaPtL"] = "PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW";
  Protocols2["PtMumbaii"] = "PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc";
  Protocols2["PtMumbai2"] = "PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1";
  Protocols2["PtNairobi"] = "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
  Protocols2["ProtoALpha"] = "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK";
})(Protocols || (Protocols = {}));
var protocols = {
  "004": [Protocols.Pt24m4xi],
  "005": [Protocols.PsBABY5H, Protocols.PsBabyM1],
  "006": [Protocols.PsCARTHA],
  "007": [Protocols.PsDELPH1],
  "008": [Protocols.PtEdo2Zk],
  "009": [Protocols.PsFLorena],
  "010": [Protocols.PtGRANADs],
  "011": [Protocols.PtHangz2],
  "012": [Protocols.PsiThaCa, Protocols.Psithaca2],
  "013": [Protocols.PtJakart2],
  "014": [Protocols.PtKathman],
  "015": [Protocols.PtLimaPtL],
  "016": [Protocols.PtMumbai2],
  "017": [Protocols.PtNairobi],
  "018": [Protocols.ProtoALpha]
};
var ChainIds;
(function(ChainIds2) {
  ChainIds2["MAINNET"] = "NetXdQprcVkpaWU";
  ChainIds2["CARTHAGENET"] = "NetXjD3HPJJjmcd";
  ChainIds2["DELPHINET"] = "NetXm8tYqnMWky1";
  ChainIds2["EDONET"] = "NetXSgo1ZT2DRUG";
  ChainIds2["FLORENCENET"] = "NetXxkAx4woPLyu";
  ChainIds2["GRANADANET"] = "NetXz969SFaFn8k";
  ChainIds2["HANGZHOUNET"] = "NetXZSsxBpMQeAT";
  ChainIds2["ITHACANET"] = "NetXbhmtAbMukLc";
  ChainIds2["ITHACANET2"] = "NetXnHfVqm9iesp";
  ChainIds2["JAKARTANET2"] = "NetXLH1uAxK7CCh";
  ChainIds2["KATHMANDUNET"] = "NetXazhm4yetmff";
  ChainIds2["LIMANET"] = "NetXizpkH94bocH";
  ChainIds2["MUMBAINET"] = "NetXQw6nWSnrJ5t";
  ChainIds2["MUMBAINET2"] = "NetXgbcrNtXD2yA";
  ChainIds2["NAIROBINET"] = "NetXyuzvDo2Ugzb";
})(ChainIds || (ChainIds = {}));
var getRevealGasLimit = (address) => Math.round(getRevealGasLimitInternal(address) * 11 / 10);
var getRevealGasLimitInternal = (address) => {
  switch (address.substring(0, 3)) {
    case "tz1":
      return DEFAULT_GAS_LIMIT.REVEAL_TZ1;
    case "tz2":
      return DEFAULT_GAS_LIMIT.REVEAL_TZ2;
    case "tz3":
      return DEFAULT_GAS_LIMIT.REVEAL_TZ3;
    case "tz4":
      return DEFAULT_GAS_LIMIT.REVEAL_TZ4;
    default:
      throw new Error(`Cannot estimate reveal gas limit for ${address}`);
  }
};
var InvalidParameterError = class extends ParameterValidationError {
  constructor(smartContractMethodName, sigs, invalidParams) {
    super();
    this.smartContractMethodName = smartContractMethodName;
    this.sigs = sigs;
    this.invalidParams = invalidParams;
    this.name = "InvalidParameterError";
    this.message = `${smartContractMethodName} Received ${invalidParams.length} arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`;
  }
};
var InvalidDelegationSource = class extends ParameterValidationError {
  constructor(source) {
    super();
    this.source = source;
    this.name = `InvalidDelegationSource`;
    this.message = `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`;
  }
};
var InvalidCodeParameter = class extends ParameterValidationError {
  constructor(message, data) {
    super();
    this.message = message;
    this.data = data;
    this.name = "InvalidCodeParameter";
  }
};
var InvalidInitParameter = class extends ParameterValidationError {
  constructor(message, data) {
    super();
    this.message = message;
    this.data = data;
    this.name = "InvalidInitParameter";
  }
};
var ViewSimulationError = class extends RpcError {
  constructor(message, viewName, failWith, cause) {
    super();
    this.message = message;
    this.viewName = viewName;
    this.failWith = failWith;
    this.cause = cause;
    this.name = "ViewSimulationError";
  }
};
var validateAndExtractFailwith = (error) => {
  if (isJsonString(error.body)) {
    const parsedError = JSON.parse(error.body);
    if (Array.isArray(parsedError) && "with" in parsedError[parsedError.length - 1]) {
      return parsedError[parsedError.length - 1].with;
    }
  }
};
var isJsonString = (str) => {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }
  return true;
};
var InvalidViewSimulationContext = class extends ParameterValidationError {
  constructor(info) {
    super();
    this.info = info;
    this.name = "InvalidViewSimulationContext";
    this.message = `${info} Please configure the context of the view execution in the executeView method.`;
  }
};
var RevealOperationError = class extends RpcError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "RevealOperationError";
  }
};
var OriginationParameterError = class extends ParameterValidationError {
  constructor(message) {
    super();
    this.message = message;
    this.name;
  }
};
var InvalidBalanceError = class extends ParameterValidationError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "InvalidBalanceError";
  }
};
var createActivationOperation = ({ pkh, secret }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.ACTIVATION,
    pkh,
    secret
  };
});
var createOriginationOperation = ({ code: code2, init, balance = "0", delegate, storage: storage2, fee = DEFAULT_FEE.ORIGINATION, gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION, storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION, mutez = false }) => __awaiter4(void 0, void 0, void 0, function* () {
  if (storage2 !== void 0 && init !== void 0) {
    throw new OriginationParameterError("Storage and Init cannot be set a the same time. Please either use storage or init but not both.");
  }
  if (!Array.isArray(code2)) {
    throw new InvalidCodeParameter("Wrong code parameter type, expected an array", code2);
  }
  let contractStorage;
  if (storage2 !== void 0) {
    const storageType = code2.find((p) => "prim" in p && p.prim === "storage");
    if ((storageType === null || storageType === void 0 ? void 0 : storageType.args) === void 0) {
      throw new InvalidCodeParameter("The storage section is missing from the script", code2);
    }
    const schema = new Schema(storageType.args[0]);
    contractStorage = schema.Encode(storage2);
  } else if (init !== void 0 && typeof init === "object") {
    contractStorage = init;
  } else {
    throw new InvalidInitParameter("Wrong init parameter type, expected JSON Michelson", init);
  }
  const script = {
    code: code2,
    storage: contractStorage
  };
  if (isNaN(Number(balance))) {
    throw new InvalidBalanceError(`Invalid Balance "${balance}", cannot be converted to a number`);
  }
  const operation = {
    kind: OpKind.ORIGINATION,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    balance: mutez ? balance.toString() : format("tz", "mutez", balance).toString(),
    script
  };
  if (delegate) {
    operation.delegate = delegate;
  }
  return operation;
});
var createTransferOperation = ({ to, amount, parameter, fee = DEFAULT_FEE.TRANSFER, gasLimit = DEFAULT_GAS_LIMIT.TRANSFER, storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER, mutez = false }) => __awaiter4(void 0, void 0, void 0, function* () {
  const operation = {
    kind: OpKind.TRANSACTION,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    amount: mutez ? amount.toString() : format("tz", "mutez", amount).toString(),
    destination: to,
    parameters: parameter
  };
  return operation;
});
var createSetDelegateOperation = ({ delegate, source, fee = DEFAULT_FEE.DELEGATION, gasLimit = DEFAULT_GAS_LIMIT.DELEGATION, storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION }) => __awaiter4(void 0, void 0, void 0, function* () {
  const operation = {
    kind: OpKind.DELEGATION,
    source,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    delegate
  };
  return operation;
});
var createRegisterDelegateOperation = ({ fee = DEFAULT_FEE.DELEGATION, gasLimit = DEFAULT_GAS_LIMIT.DELEGATION, storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION }, source) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.DELEGATION,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    delegate: source
  };
});
var createRevealOperation = ({ fee = DEFAULT_FEE.REVEAL, gasLimit = void 0, storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL }, source, publicKey) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.REVEAL,
    fee,
    public_key: publicKey,
    source,
    gas_limit: gasLimit !== null && gasLimit !== void 0 ? gasLimit : getRevealGasLimit(source),
    storage_limit: storageLimit
  };
});
var createRegisterGlobalConstantOperation = ({ value, source, fee, gasLimit, storageLimit }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.REGISTER_GLOBAL_CONSTANT,
    value,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    source
  };
});
var createTransferTicketOperation = ({ ticketContents, ticketTy, ticketTicketer, ticketAmount, destination, entrypoint, source, fee, gasLimit, storageLimit }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.TRANSFER_TICKET,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    source,
    ticket_contents: ticketContents,
    ticket_ty: ticketTy,
    ticket_ticketer: ticketTicketer,
    ticket_amount: ticketAmount,
    destination,
    entrypoint
  };
});
var createIncreasePaidStorageOperation = ({ source, fee, gasLimit, storageLimit, amount, destination }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.INCREASE_PAID_STORAGE,
    source,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    amount,
    destination
  };
});
var createDrainDelegateOperation = ({ consensus_key, delegate, destination }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.DRAIN_DELEGATE,
    consensus_key,
    delegate,
    destination
  };
});
var createBallotOperation = ({ source, proposal, ballot }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.BALLOT,
    source,
    proposal,
    ballot
  };
});
var createProposalsOperation = ({ source, proposals }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.PROPOSALS,
    source,
    proposals
  };
});
var createUpdateConsensusKeyOperation = ({ source, fee, gasLimit, storageLimit, pk }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.UPDATE_CONSENSUS_KEY,
    source,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    pk
  };
});
var createSmartRollupAddMessagesOperation = ({ source, fee, gasLimit, storageLimit, message }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.SMART_ROLLUP_ADD_MESSAGES,
    source,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    message
  };
});
var createSmartRollupOriginateOperation = ({ source, fee, gasLimit, storageLimit, pvmKind, kernel, originationProof, parametersType }) => __awaiter4(void 0, void 0, void 0, function* () {
  return {
    kind: OpKind.SMART_ROLLUP_ORIGINATE,
    source,
    fee,
    gas_limit: gasLimit,
    storage_limit: storageLimit,
    pvm_kind: pvmKind,
    kernel,
    origination_proof: originationProof,
    parameters_ty: parametersType
  };
});
var attachKind = (op, kind) => {
  return Object.assign(Object.assign({}, op), { kind });
};
var findWithKind = (arr, kind) => {
  if (Array.isArray(arr)) {
    const found = arr.find((op) => op.kind === kind);
    if (found && isKind(found, kind)) {
      return found;
    }
  }
};
var isKind = (op, kind) => {
  return op.kind === kind;
};
var isOpWithFee = (op) => {
  return [
    "transaction",
    "delegation",
    "origination",
    "reveal",
    "register_global_constant",
    "increase_paid_storage",
    "tx_rollup_origination",
    "tx_rollup_submit_batch",
    "transfer_ticket",
    "update_consensus_key",
    "smart_rollup_add_messages",
    "smart_rollup_originate"
  ].indexOf(op.kind) !== -1;
};
var isOpRequireReveal = (op) => {
  return [
    "transaction",
    "delegation",
    "origination",
    "register_global_constant",
    "increase_paid_storage",
    "tx_rollup_origination",
    "tx_rollup_submit_batch",
    "transfer_ticket",
    "update_consensus_key",
    "smart_rollup_add_messages",
    "smart_rollup_originate"
  ].indexOf(op.kind) !== -1;
};
var hasMetadata = (op) => {
  return "metadata" in op;
};
var hasMetadataWithResult = (op) => {
  return hasMetadata(op) && "operation_result" in op.metadata;
};
var hasMetadataWithInternalOperationResult = (op) => {
  return hasMetadata(op) && "internal_operation_results" in op.metadata;
};
var isErrorWithMessage = (error) => {
  return "with" in error;
};
var TezosOperationError = class extends RpcError {
  constructor(errors, errorDetails) {
    super();
    this.errors = errors;
    this.errorDetails = errorDetails;
    this.name = "TezosOperationError";
    const lastError = errors[errors.length - 1];
    this.id = lastError.id;
    this.kind = lastError.kind;
    this.message = `(${this.kind}) ${this.id}`;
    if (isErrorWithMessage(lastError)) {
      if (lastError.with.string) {
        this.message = lastError.with.string;
      } else if (lastError.with.int) {
        this.message = lastError.with.int;
      } else {
        this.message = JSON.stringify(lastError.with);
      }
    }
  }
};
var TezosPreapplyFailureError = class extends Error {
  constructor(result) {
    super();
    this.result = result;
    this.name = "TezosPreapplyFailureError";
    this.message = "Preapply returned an unexpected result";
  }
};
var flattenOperationResult = (response) => {
  const results = Array.isArray(response) ? response : [response];
  const returnedResults = [];
  for (let i = 0; i < results.length; i++) {
    for (let j = 0; j < results[i].contents.length; j++) {
      const content = results[i].contents[j];
      if (hasMetadataWithResult(content) && "fee" in content) {
        returnedResults.push(Object.assign({ fee: content.fee }, content.metadata.operation_result));
        if (Array.isArray(content.metadata.internal_operation_results)) {
          content.metadata.internal_operation_results.forEach((x) => returnedResults.push(x.result));
        }
      }
    }
  }
  return returnedResults;
};
var flattenErrors = (response, status = "failed") => {
  const results = Array.isArray(response) ? response : [response];
  let errors = [];
  for (let i = 0; i < results.length; i++) {
    for (let j = 0; j < results[i].contents.length; j++) {
      const content = results[i].contents[j];
      if (hasMetadata(content)) {
        if (hasMetadataWithResult(content) && content.metadata.operation_result.status === status) {
          errors = errors.concat(content.metadata.operation_result.errors || []);
        }
        if (hasMetadataWithInternalOperationResult(content) && Array.isArray(content.metadata.internal_operation_results)) {
          for (const internalResult of content.metadata.internal_operation_results) {
            if ("result" in internalResult && internalResult.result.status === status) {
              errors = errors.concat(internalResult.result.errors || []);
            }
          }
        }
      }
    }
  }
  return errors;
};
var OriginationOperationError = class extends TaquitoError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "OriginationOperationError";
  }
};
var InvalidEstimateValueError = class extends ParameterValidationError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "InvalidEstimateValueError";
  }
};
var InvalidConfirmationCountError = class extends ParameterValidationError {
  constructor(invalidConfirmations) {
    super();
    this.invalidConfirmations = invalidConfirmations;
    this.name = "InvalidConfirmationCountError";
    this.message = `Invalid confirmation count ${invalidConfirmations} expecting at least 1`;
  }
};
var ConfirmationTimeoutError = class extends NetworkError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "ConfirmationTimeoutError";
  }
};
var RPCResponseError = class extends RpcError {
  constructor(message, cause) {
    super();
    this.message = message;
    this.cause = cause;
    this.name = "RPCResponseError";
  }
};
var Operation = class {
  /**
   *
   * @param hash Operation hash
   * @param raw Raw operation that was injected
   * @param context Taquito context allowing access to rpc and signer
   * @throws {@link InvalidOperationHashError}
   */
  constructor(hash2, raw, results, context2) {
    this.hash = hash2;
    this.raw = raw;
    this.results = results;
    this.context = context2;
    this._pollingConfig$ = new ReplaySubject(1);
    this.currentHead$ = this._pollingConfig$.pipe(switchMap((config2) => {
      return new BehaviorSubject(config2).pipe(timeout({
        each: config2.timeout * 1e3,
        with: () => throwError(() => new ConfirmationTimeoutError(`Confirmation polling timed out`))
      }));
    }), switchMap(() => {
      return defer(() => createObservableFromSubscription(this.context.stream.subscribeBlock("head"))).pipe(switchMap((newHead) => {
        var _a3, _b;
        const prevHead = (_b = (_a3 = this.lastHead) === null || _a3 === void 0 ? void 0 : _a3.header.level) !== null && _b !== void 0 ? _b : newHead.header.level - 1;
        return range(prevHead + 1, newHead.header.level - prevHead - 1).pipe(concatMap((level) => this.context.readProvider.getBlock(level)), endWith(newHead));
      }), tap((newHead) => this.lastHead = newHead));
    }), shareReplay({ refCount: true }));
    this.confirmed$ = this.currentHead$.pipe(map((head) => {
      for (let i = 3; i >= 0; i--) {
        head.operations[i].forEach((op) => {
          if (op.hash === this.hash) {
            this._foundAt = head.header.level;
          }
        });
      }
      if (head.header.level - this._foundAt >= 0) {
        return this._foundAt;
      }
    }), filter((x) => x !== void 0), first(), shareReplay());
    this._foundAt = Number.POSITIVE_INFINITY;
    if (validateOperation(this.hash) !== ValidationResult.VALID) {
      throw new InvalidOperationHashError(this.hash);
    }
    this.confirmed$.pipe(first(), catchError(() => {
      return of(EMPTY);
    })).subscribe();
  }
  get includedInBlock() {
    return this._foundAt;
  }
  get revealOperation() {
    return Array.isArray(this.results) && this.results.find((op) => op.kind === "reveal");
  }
  get revealStatus() {
    if (this.revealOperation) {
      return this.revealOperation.metadata.operation_result.status;
    } else {
      return "unknown";
    }
  }
  get status() {
    return this.results.map((result) => {
      if (hasMetadataWithResult(result)) {
        return result.metadata.operation_result.status;
      } else {
        return "unknown";
      }
    })[0] || "unknown";
  }
  /**
   *
   * @param confirmations [0] Number of confirmation to wait for
   * @param timeout [180] Timeout
   */
  confirmation(confirmations, timeout2) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (typeof confirmations !== "undefined" && confirmations < 1) {
        throw new InvalidConfirmationCountError(confirmations);
      }
      const { defaultConfirmationCount, confirmationPollingTimeoutSecond } = this.context.config;
      this._pollingConfig$.next({
        timeout: timeout2 || confirmationPollingTimeoutSecond
      });
      const conf = confirmations !== void 0 ? confirmations : defaultConfirmationCount;
      return new Promise((resolve, reject) => {
        this.confirmed$.pipe(switchMap(() => this.currentHead$), filter((head) => head.header.level - this._foundAt >= conf - 1), first()).subscribe((_) => {
          resolve(this._foundAt + (conf - 1));
        }, reject);
      });
    });
  }
};
var BatchOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  sumProp(arr, prop) {
    return arr.reduce((prev, current) => {
      return prop in current ? Number(current[prop]) + prev : prev;
    }, 0);
  }
  getOriginatedContractAddresses() {
    const originationOpResults = this.results.filter((x) => x.kind === "origination");
    let addresses = [];
    for (const res of originationOpResults) {
      if (res.metadata.operation_result.originated_contracts) {
        addresses = [...addresses, ...res.metadata.operation_result.originated_contracts];
      }
    }
    return addresses;
  }
  get status() {
    return this.results.filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1).map((result) => {
      if (hasMetadataWithResult(result)) {
        const opResult = result.metadata.operation_result;
        return opResult.status;
      } else {
        return "unknown";
      }
    })[0] || "unknown";
  }
  get fee() {
    return this.sumProp(this.params, "fee");
  }
  get gasLimit() {
    return this.sumProp(this.params, "gas_limit");
  }
  get storageLimit() {
    return this.sumProp(this.params, "storage_limit");
  }
  get consumedGas() {
    bignumber_default.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_default.ROUND_UP });
    return new bignumber_default(this.consumedMilliGas).dividedBy(1e3).toString();
  }
  get consumedMilliGas() {
    return String(this.sumProp(flattenOperationResult({ contents: this.results }), "consumed_milligas"));
  }
  get storageDiff() {
    return String(this.sumProp(flattenOperationResult({ contents: this.results }), "paid_storage_size_diff"));
  }
  get errors() {
    return flattenErrors({ contents: this.results });
  }
};
var Provider = class {
  constructor(context2) {
    this.context = context2;
  }
  get rpc() {
    return this.context.rpc;
  }
  get signer() {
    return this.context.signer;
  }
  forge({ opOb: { branch, contents, protocol }, counter }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const forgedBytes = yield this.context.forger.forge({ branch, contents });
      return {
        opbytes: forgedBytes,
        opOb: {
          branch,
          contents,
          protocol
        },
        counter
      };
    });
  }
  estimate(_a3, estimator) {
    var { fee, gasLimit, storageLimit } = _a3, rest = __rest2(_a3, ["fee", "gasLimit", "storageLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      let calculatedFee = fee;
      let calculatedGas = gasLimit;
      let calculatedStorage = storageLimit;
      if (calculatedFee && calculatedFee % 1 !== 0) {
        throw new InvalidEstimateValueError(`Fee value must not be a decimal: ${calculatedFee}`);
      }
      if (calculatedGas && calculatedGas % 1 !== 0) {
        throw new InvalidEstimateValueError(`Gas Limit value must not be a decimal: ${calculatedGas}`);
      }
      if (calculatedStorage && calculatedStorage % 1 !== 0) {
        throw new InvalidEstimateValueError(`Storage Limit value must not be a decimal: ${calculatedStorage}`);
      }
      if (fee === void 0 || gasLimit === void 0 || storageLimit === void 0) {
        const estimation = yield estimator(Object.assign({ fee, gasLimit, storageLimit }, rest));
        calculatedFee !== null && calculatedFee !== void 0 ? calculatedFee : calculatedFee = estimation.suggestedFeeMutez;
        calculatedGas !== null && calculatedGas !== void 0 ? calculatedGas : calculatedGas = estimation.gasLimit;
        calculatedStorage !== null && calculatedStorage !== void 0 ? calculatedStorage : calculatedStorage = estimation.storageLimit;
      }
      return {
        fee: calculatedFee,
        gasLimit: calculatedGas,
        storageLimit: calculatedStorage
      };
    });
  }
  getRPCOp(param) {
    return __awaiter4(this, void 0, void 0, function* () {
      switch (param.kind) {
        case OpKind.TRANSACTION:
          return createTransferOperation(Object.assign({}, param));
        case OpKind.ORIGINATION:
          return createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign({}, param)));
        case OpKind.DELEGATION:
          return createSetDelegateOperation(Object.assign({}, param));
        case OpKind.REGISTER_GLOBAL_CONSTANT:
          return createRegisterGlobalConstantOperation(Object.assign({}, param));
        case OpKind.INCREASE_PAID_STORAGE:
          return createIncreasePaidStorageOperation(Object.assign({}, param));
        case OpKind.TRANSFER_TICKET:
          return createTransferTicketOperation(Object.assign({}, param));
        case OpKind.SMART_ROLLUP_ADD_MESSAGES:
          return createSmartRollupAddMessagesOperation(Object.assign({}, param));
        case OpKind.SMART_ROLLUP_ORIGINATE:
          return createSmartRollupOriginateOperation(Object.assign({}, param));
        default:
          throw new InvalidOperationKindError(param.kind);
      }
    });
  }
  runOperation(op) {
    return __awaiter4(this, void 0, void 0, function* () {
      return {
        opResponse: yield this.rpc.runOperation(op),
        op,
        context: this.context.clone()
      };
    });
  }
  simulate(op) {
    return __awaiter4(this, void 0, void 0, function* () {
      return {
        opResponse: yield this.rpc.simulateOperation(op),
        op,
        context: this.context.clone()
      };
    });
  }
  isRevealOpNeeded(op, pkh) {
    return __awaiter4(this, void 0, void 0, function* () {
      return !(yield this.isAccountRevealRequired(pkh)) || !this.isRevealRequiredForOpType(op) ? false : true;
    });
  }
  isAccountRevealRequired(publicKeyHash) {
    return __awaiter4(this, void 0, void 0, function* () {
      return !(yield this.context.readProvider.isAccountRevealed(publicKeyHash, "head"));
    });
  }
  isRevealRequiredForOpType(op) {
    let opRequireReveal = false;
    for (const operation of op) {
      if (isOpRequireReveal(operation)) {
        opRequireReveal = true;
      }
    }
    return opRequireReveal;
  }
  signAndInject(forgedBytes) {
    return __awaiter4(this, void 0, void 0, function* () {
      const signed = yield this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));
      forgedBytes.opbytes = signed.sbytes;
      forgedBytes.opOb.signature = signed.prefixSig;
      const opResponse = [];
      const results = yield this.rpc.preapplyOperations([forgedBytes.opOb]);
      if (!Array.isArray(results)) {
        throw new TezosPreapplyFailureError(results);
      }
      for (let i = 0; i < results.length; i++) {
        for (let j = 0; j < results[i].contents.length; j++) {
          opResponse.push(results[i].contents[j]);
        }
      }
      const errors = flattenErrors(results);
      if (errors.length) {
        throw new TezosOperationError(errors, "Error occurred during validation simulation of operation");
      }
      return {
        hash: yield this.context.injector.inject(forgedBytes.opbytes),
        forgedBytes,
        opResponse,
        context: this.context.clone()
      };
    });
  }
};
var WalletOperationBatch = class {
  constructor(walletProvider, context2) {
    this.walletProvider = walletProvider;
    this.context = context2;
    this.operations = [];
  }
  /**
   *
   * @description Add a transaction operation to the batch
   *
   * @param params Transfer operation parameter
   */
  withTransfer(params) {
    const toValidation = validateAddress(params.to);
    if (toValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.to, invalidDetail(toValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.TRANSACTION }, params));
    return this;
  }
  /**
   *
   * @description Add a contract call to the batch
   *
   * @param params Call a contract method
   * @param options Generic operation parameters
   */
  withContractCall(params, options = {}) {
    return this.withTransfer(params.toTransferParams(options));
  }
  /**
   *
   * @description Add a delegation operation to the batch
   *
   * @param params Delegation operation parameter
   */
  withDelegation(params) {
    var _a3;
    const delegateValidation = validateAddress((_a3 = params.delegate) !== null && _a3 !== void 0 ? _a3 : "");
    if (params.delegate && delegateValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.delegate, invalidDetail(delegateValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.DELEGATION }, params));
    return this;
  }
  /**
   *
   * @description Add an origination operation to the batch
   *
   * @param params Origination operation parameter
   */
  withOrigination(params) {
    this.operations.push(Object.assign({ kind: OpKind.ORIGINATION }, params));
    return this;
  }
  /**
   *
   * @description Add an IncreasePaidStorage operation to the batch
   *
   * @param param IncreasePaidStorage operation parameter
   */
  withIncreasePaidStorage(params) {
    const destinationValidation = validateAddress(params.destination);
    if (destinationValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.destination, invalidDetail(destinationValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.INCREASE_PAID_STORAGE }, params));
    return this;
  }
  mapOperation(param) {
    return __awaiter4(this, void 0, void 0, function* () {
      switch (param.kind) {
        case OpKind.TRANSACTION:
          return this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
            return param;
          }));
        case OpKind.ORIGINATION:
          return this.walletProvider.mapOriginateParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
            return this.context.parser.prepareCodeOrigination(Object.assign({}, param));
          }));
        case OpKind.DELEGATION:
          return this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
            return param;
          }));
        case OpKind.INCREASE_PAID_STORAGE:
          return this.walletProvider.mapIncreasePaidStorageWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
            return param;
          }));
        default:
          throw new InvalidOperationKindError(JSON.stringify(param.kind));
      }
    });
  }
  /**
   *
   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array
   *
   * @param params Operations parameter
   * @throws {@link InvalidOperationKindError}
   */
  with(params) {
    for (const param of params) {
      switch (param.kind) {
        case OpKind.TRANSACTION:
          this.withTransfer(param);
          break;
        case OpKind.ORIGINATION:
          this.withOrigination(param);
          break;
        case OpKind.DELEGATION:
          this.withDelegation(param);
          break;
        case OpKind.INCREASE_PAID_STORAGE:
          this.withIncreasePaidStorage(param);
          break;
        default:
          throw new InvalidOperationKindError(JSON.stringify(param.kind));
      }
    }
    return this;
  }
  /**
   *
   * @description Submit batch operation to wallet
   *
   */
  send() {
    return __awaiter4(this, void 0, void 0, function* () {
      const ops = [];
      for (const op of this.operations) {
        ops.push(yield this.mapOperation(op));
      }
      const opHash = yield this.walletProvider.sendOperations(ops);
      return this.context.operationFactory.createBatchOperation(opHash);
    });
  }
};
var Wallet = class {
  constructor(context2) {
    this.context = context2;
    this.walletCommand = (send) => {
      return {
        send
      };
    };
  }
  get walletProvider() {
    return this.context.walletProvider;
  }
  /**
   * @description Retrieve the PKH of the account that is currently in use by the wallet
   *
   * @param option Option to use while fetching the PKH.
   * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet
   */
  pkh({ forceRefetch } = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._pkh || forceRefetch) {
        this._pkh = yield this.walletProvider.getPKH();
      }
      return this._pkh;
    });
  }
  /**
   *
   * @description Originate a new contract according to the script in parameters.
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param originateParams Originate operation parameter
   */
  originate(params) {
    return this.walletCommand(() => __awaiter4(this, void 0, void 0, function* () {
      const mappedParams = yield this.walletProvider.mapOriginateParamsToWalletParams(() => this.context.parser.prepareCodeOrigination(Object.assign({}, params)));
      const opHash = yield this.walletProvider.sendOperations([mappedParams]);
      return this.context.operationFactory.createOriginationOperation(opHash);
    }));
  }
  /**
   *
   * @description Set the delegate for a contract.
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param delegateParams operation parameter
   */
  setDelegate(params) {
    var _a3;
    const delegateValidation = validateAddress((_a3 = params.delegate) !== null && _a3 !== void 0 ? _a3 : "");
    if (params.delegate && delegateValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.delegate, invalidDetail(delegateValidation));
    }
    return this.walletCommand(() => __awaiter4(this, void 0, void 0, function* () {
      const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
        return params;
      }));
      const opHash = yield this.walletProvider.sendOperations([mappedParams]);
      return this.context.operationFactory.createDelegationOperation(opHash);
    }));
  }
  /**
   *
   * @description failing_noop operation that is guaranteed to fail. DISCLAIMER: Not all wallets support signing failing_noop operations.
   *
   * @returns Signature for a failing_noop
   *
   * @param params operation parameter
   */
  signFailingNoop(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const op = {
        kind: OpKind.FAILING_NOOP,
        arbitrary: params.arbitrary
      };
      const hash2 = yield this.context.readProvider.getBlockHash(params.basedOnBlock);
      const forgedBytes = yield this.context.forger.forge({
        branch: hash2,
        contents: [op]
      });
      const signature = yield this.walletProvider.sign(forgedBytes, Uint8Array.from([3]));
      return {
        signature,
        bytes: forgedBytes,
        signedContent: {
          branch: hash2,
          contents: [
            {
              kind: OpKind.FAILING_NOOP,
              arbitrary: params.arbitrary
            }
          ]
        }
      };
    });
  }
  /**
   *
   * @description Register the current address as delegate.
   *
   * @returns An operation handle with the result from the rpc node
   *
   */
  registerDelegate() {
    return this.walletCommand(() => __awaiter4(this, void 0, void 0, function* () {
      const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
        const delegate = yield this.pkh();
        return { delegate };
      }));
      const opHash = yield this.walletProvider.sendOperations([mappedParams]);
      return this.context.operationFactory.createDelegationOperation(opHash);
    }));
  }
  /**
   *
   * @description Transfer tezos tokens from current address to a specific address or call a smart contract.
   *
   * @returns A wallet command from which we can send the operation to the wallet
   *
   * @param params operation parameter
   */
  transfer(params) {
    const toValidation = validateAddress(params.to);
    if (toValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.to, invalidDetail(toValidation));
    }
    return this.walletCommand(() => __awaiter4(this, void 0, void 0, function* () {
      const mappedParams = yield this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
        return params;
      }));
      const opHash = yield this.walletProvider.sendOperations([mappedParams]);
      return this.context.operationFactory.createTransactionOperation(opHash);
    }));
  }
  /**
   *
   * @description
   *
   * @returns
   *
   * @param params
   */
  increasePaidStorage(params) {
    const destinationValidation = validateAddress(params.destination);
    if (destinationValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.destination, invalidDetail(destinationValidation));
    }
    return this.walletCommand(() => __awaiter4(this, void 0, void 0, function* () {
      const mappedParams = yield this.walletProvider.mapIncreasePaidStorageWalletParams(() => __awaiter4(this, void 0, void 0, function* () {
        return params;
      }));
      const opHash = yield this.walletProvider.sendOperations([mappedParams]);
      return this.context.operationFactory.createIncreasePaidStorageOperation(opHash);
    }));
  }
  /**
   *
   * @description Create a batch of operation
   *
   * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch
   *
   * @param params List of operation to initialize the batch with
   */
  batch(params) {
    const batch = new WalletOperationBatch(this.walletProvider, this.context);
    if (Array.isArray(params)) {
      batch.with(params);
    }
    return batch;
  }
  /**
   *
   * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned
   * smart contract abstraction will leverage the wallet provider to make smart contract calls
   *
   * @param address Smart contract address
   * @throws {@link InvalidContractAddressError} If the contract address is not valid
   */
  at(address, contractAbstractionComposer = (x) => x) {
    return __awaiter4(this, void 0, void 0, function* () {
      const addressValidation = validateContractAddress(address);
      if (addressValidation !== ValidationResult.VALID) {
        throw new InvalidContractAddressError(address, invalidDetail(addressValidation));
      }
      const rpc = this.context.withExtensions().rpc;
      const readProvider = this.context.withExtensions().readProvider;
      const script = yield readProvider.getScript(address, "head");
      const entrypoints = yield readProvider.getEntrypoints(address);
      const abs = new ContractAbstraction(address, script, this, this.context.contract, entrypoints, rpc, readProvider);
      return contractAbstractionComposer(abs, this.context);
    });
  }
  getPK() {
    return this.walletProvider.getPK();
  }
};
var receiptFromOperation = (op, { ALLOCATION_BURN, ORIGINATION_BURN } = {
  ALLOCATION_BURN: 257,
  ORIGINATION_BURN: 257
}) => {
  bignumber_default.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_default.ROUND_UP });
  const operationResults = flattenOperationResult({ contents: op });
  let totalMilliGas = new bignumber_default(0);
  let totalStorage = new bignumber_default(0);
  let totalFee = new bignumber_default(0);
  let totalOriginationBurn = new bignumber_default(0);
  let totalAllocationBurn = new bignumber_default(0);
  let totalPaidStorageDiff = new bignumber_default(0);
  operationResults.forEach((result) => {
    totalFee = totalFee.plus(result.fee || 0);
    totalOriginationBurn = totalOriginationBurn.plus(Array.isArray(result.originated_contracts) ? result.originated_contracts.length * ORIGINATION_BURN : 0);
    totalAllocationBurn = totalAllocationBurn.plus("allocated_destination_contract" in result ? ALLOCATION_BURN : 0);
    totalMilliGas = totalMilliGas.plus(result.consumed_milligas || 0);
    totalPaidStorageDiff = totalPaidStorageDiff.plus("paid_storage_size_diff" in result ? Number(result.paid_storage_size_diff) || 0 : 0);
  });
  totalStorage = totalStorage.plus(totalAllocationBurn).plus(totalOriginationBurn).plus(totalPaidStorageDiff);
  return {
    totalFee,
    totalMilliGas,
    totalGas: totalMilliGas.dividedBy(1e3),
    totalStorage,
    totalAllocationBurn,
    totalOriginationBurn,
    totalPaidStorageDiff,
    totalStorageBurn: new bignumber_default(totalStorage.multipliedBy(COST_PER_BYTE))
  };
};
var ConfirmationUndefinedError = class extends TezosToolkitConfigError {
  constructor() {
    super();
    this.name = "ConfirmationUndefinedError";
    this.message = "Default confirmation count can not be undefined";
  }
};
var ObservableError = class extends NetworkError {
  constructor(message) {
    super();
    this.message = message;
    this.name = "ObservableError";
  }
};
var MAX_BRANCH_ANCESTORS = 60;
var WalletOperation = class {
  /**
   *
   * @param opHash Operation hash
   * @param raw Raw operation that was injected
   * @param context Taquito context allowing access to rpc and signer
   * @throws {InvalidOperationHashError}
   */
  constructor(opHash, context2, _newHead$) {
    this.opHash = opHash;
    this.context = context2;
    this._newHead$ = _newHead$;
    this._operationResult = new ReplaySubject(1);
    this._includedInBlock = new ReplaySubject(1);
    this._included = false;
    this.newHead$ = this._newHead$.pipe(switchMap((newHead) => {
      var _a3, _b;
      const prevHead = (_b = (_a3 = this.lastHead) === null || _a3 === void 0 ? void 0 : _a3.header.level) !== null && _b !== void 0 ? _b : newHead.header.level - 1;
      return range(prevHead + 1, newHead.header.level - prevHead - 1).pipe(concatMap((level) => this.context.readProvider.getBlock(level)), endWith(newHead));
    }), tap((newHead) => this.lastHead = newHead), share({
      connector: () => new ReplaySubject(1),
      resetOnError: false,
      resetOnComplete: false,
      resetOnRefCountZero: false
    }));
    this.confirmed$ = this.newHead$.pipe(map((head) => {
      for (const opGroup of head.operations) {
        for (const op of opGroup) {
          if (op.hash === this.opHash) {
            this._included = true;
            this._includedInBlock.next(head);
            this._operationResult.next(op.contents);
            return head;
          }
        }
      }
    }), filter((x) => {
      return typeof x !== "undefined";
    }), first(), share({
      connector: () => new ReplaySubject(1),
      resetOnError: false,
      resetOnComplete: false,
      resetOnRefCountZero: false
    }));
    if (validateOperation(this.opHash) !== ValidationResult.VALID) {
      throw new InvalidOperationHashError(this.opHash);
    }
    this.confirmed$.pipe(first(), catchError(() => of(void 0))).subscribe();
  }
  operationResults() {
    return __awaiter4(this, void 0, void 0, function* () {
      return this._operationResult.pipe(first()).toPromise();
    });
  }
  /**
   * @description Receipt expose the total amount of tezos token burn and spent on fees
   * The promise returned by receipt will resolve only once the transaction is included
   */
  receipt() {
    return __awaiter4(this, void 0, void 0, function* () {
      const results = yield this.operationResults();
      if (!results) {
        throw new ObservableError("Unable to get operation results");
      }
      return receiptFromOperation(results);
    });
  }
  getCurrentConfirmation() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return 0;
      }
      return combineLatest([this._includedInBlock, from(this.context.readProvider.getBlock("head"))]).pipe(map(([foundAtBlock, head]) => {
        return head.header.level - foundAtBlock.header.level + 1;
      }), first()).toPromise();
    });
  }
  isInCurrentBranch(tipBlockIdentifier = "head") {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return true;
      }
      const tipBlockHeaderLevel = yield this.context.readProvider.getBlockLevel(tipBlockIdentifier);
      const inclusionBlock = yield this._includedInBlock.pipe(first()).toPromise();
      if (!inclusionBlock) {
        throw new ObservableError("Inclusion block is undefined");
      }
      const levelDiff = tipBlockHeaderLevel - inclusionBlock.header.level;
      if (levelDiff <= 0) {
        return true;
      }
      const tipBlockLevel = Math.min(inclusionBlock.header.level + levelDiff, inclusionBlock.header.level + MAX_BRANCH_ANCESTORS);
      const blocks = new Set(yield this.context.readProvider.getLiveBlocks(tipBlockLevel));
      return blocks.has(inclusionBlock.hash);
    });
  }
  confirmationObservable(confirmations) {
    if (typeof confirmations !== "undefined" && confirmations < 1) {
      throw new InvalidConfirmationCountError(confirmations);
    }
    const { defaultConfirmationCount } = this.context.config;
    const conf = confirmations !== void 0 ? confirmations : defaultConfirmationCount;
    if (conf === void 0) {
      throw new ConfirmationUndefinedError();
    }
    return combineLatest([this._includedInBlock, this.newHead$]).pipe(distinctUntilChanged(([, previousHead], [, newHead]) => {
      return previousHead.hash === newHead.hash;
    }), map(([foundAtBlock, head]) => {
      return {
        block: head,
        expectedConfirmation: conf,
        currentConfirmation: head.header.level - foundAtBlock.header.level + 1,
        completed: head.header.level - foundAtBlock.header.level >= conf - 1,
        isInCurrentBranch: () => this.isInCurrentBranch(head.hash)
      };
    }), takeWhile(({ completed }) => !completed, true));
  }
  /**
   *
   * @param confirmations [0] Number of confirmation to wait for
   */
  confirmation(confirmations) {
    return this.confirmationObservable(confirmations).toPromise();
  }
};
var TransactionWalletOperation = class extends WalletOperation {
  constructor(opHash, context2, newHead$) {
    super(opHash, context2, newHead$);
    this.opHash = opHash;
    this.context = context2;
  }
  revealOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (!operationResult) {
        throw new ObservableError("operationResult returned undefined");
      }
      return operationResult.find((x) => x.kind === OpKind.REVEAL);
    });
  }
  transactionOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (!operationResult) {
        throw new ObservableError("operationResult returned undefined");
      }
      return operationResult.find((x) => x.kind === OpKind.TRANSACTION);
    });
  }
  status() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return "pending";
      }
      const op = yield this.transactionOperation();
      if (!op) {
        return "unknown";
      }
      return op.metadata.operation_result.status;
    });
  }
};
var OriginationWalletOperation = class extends WalletOperation {
  constructor(opHash, context2, newHead$) {
    super(opHash, context2, newHead$);
    this.opHash = opHash;
    this.context = context2;
  }
  originationOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (operationResult) {
        return findWithKind(operationResult, OpKind.ORIGINATION);
      } else {
        throw new ObservableError("Unable to fetch operation result");
      }
    });
  }
  revealOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (operationResult) {
        return findWithKind(operationResult, OpKind.REVEAL);
      } else {
        throw new ObservableError("Unable to fetch operation result");
      }
    });
  }
  status() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return "pending";
      }
      const op = yield this.originationOperation();
      if (!op) {
        return "unknown";
      }
      return op.metadata.operation_result.status;
    });
  }
  contract() {
    return __awaiter4(this, void 0, void 0, function* () {
      const op = yield this.originationOperation();
      const address = ((op === null || op === void 0 ? void 0 : op.metadata.operation_result.originated_contracts) || [])[0];
      return this.context.wallet.at(address);
    });
  }
};
var DelegationWalletOperation = class extends WalletOperation {
  constructor(opHash, context2, newHead$) {
    super(opHash, context2, newHead$);
    this.opHash = opHash;
    this.context = context2;
  }
  revealOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (operationResult) {
        return operationResult.find((x) => x.kind === OpKind.REVEAL);
      } else {
        throw new ObservableError("Unable to fetch operation result");
      }
    });
  }
  delegationOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (operationResult) {
        return operationResult.find((x) => x.kind === OpKind.DELEGATION);
      } else {
        throw new ObservableError("Unable to fetch operation result");
      }
    });
  }
  status() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return "pending";
      }
      const op = yield this.delegationOperation();
      if (!op) {
        return "unknown";
      }
      return op.metadata.operation_result.status;
    });
  }
};
var LegacyWalletProvider = class {
  constructor(context2) {
    this.context = context2;
  }
  getPKH() {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.context.signer.publicKeyHash();
    });
  }
  mapTransferParamsToWalletParams(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      return attachKind(yield params(), OpKind.TRANSACTION);
    });
  }
  mapOriginateParamsToWalletParams(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      return attachKind(yield params(), OpKind.ORIGINATION);
    });
  }
  mapDelegateParamsToWalletParams(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      return attachKind(yield params(), OpKind.DELEGATION);
    });
  }
  mapIncreasePaidStorageWalletParams(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      return attachKind(yield params(), OpKind.INCREASE_PAID_STORAGE);
    });
  }
  sendOperations(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const op = yield this.context.batch.batch(params).send();
      return op.hash;
    });
  }
  sign(bytes, watermark) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { prefixSig } = yield this.context.signer.sign(bytes, watermark);
      return prefixSig;
    });
  }
  getPK() {
    return this.context.signer.publicKey();
  }
};
var ContractMethodObject = class {
  constructor(provider, address, parameterSchema, name, args = "unit", isMultipleEntrypoint = true, isAnonymous = false) {
    this.provider = provider;
    this.address = address;
    this.parameterSchema = parameterSchema;
    this.name = name;
    this.args = args;
    this.isMultipleEntrypoint = isMultipleEntrypoint;
    this.isAnonymous = isAnonymous;
  }
  /**
   * @description Get the signature of the smart contract method
   */
  getSignature() {
    return this.isAnonymous ? this.parameterSchema.ExtractSchema()[this.name] : this.parameterSchema.ExtractSchema();
  }
  /**
   *
   * @description Send the smart contract operation
   *
   * @param Options generic operation parameter
   */
  send(params = {}) {
    if (this.provider instanceof Wallet) {
      return this.provider.transfer(this.toTransferParams(params)).send();
    } else {
      return this.provider.transfer(this.toTransferParams(params));
    }
  }
  /**
   *
   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods
   *
   * @param Options generic transfer operation parameters
   */
  toTransferParams({ fee, gasLimit, storageLimit, source, amount = 0, mutez = false } = {}) {
    const fullTransferParams = {
      to: this.address,
      amount,
      fee,
      mutez,
      source,
      gasLimit,
      storageLimit,
      parameter: {
        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,
        value: this.isAnonymous ? this.parameterSchema.EncodeObject({ [this.name]: this.args }) : this.parameterSchema.EncodeObject(this.args)
      }
    };
    return fullTransferParams;
  }
};
var ContractMethod = class {
  constructor(provider, address, parameterSchema, name, args, isMultipleEntrypoint = true, isAnonymous = false) {
    this.provider = provider;
    this.address = address;
    this.parameterSchema = parameterSchema;
    this.name = name;
    this.args = args;
    this.isMultipleEntrypoint = isMultipleEntrypoint;
    this.isAnonymous = isAnonymous;
  }
  validateArgs(args, schema, name) {
    const sigs = schema.ExtractSignatures();
    if (!sigs.find((x) => x.length === args.length)) {
      throw new InvalidParameterError(name, sigs, args);
    }
  }
  /**
   * @description Get the schema of the smart contract method
   */
  get schema() {
    return this.isAnonymous ? this.parameterSchema.ExtractSchema()[this.name] : this.parameterSchema.ExtractSchema();
  }
  /**
   * @description Get the signature of the smart contract method
   */
  getSignature() {
    if (this.isAnonymous) {
      const sig = this.parameterSchema.ExtractSignatures().find((x) => x[0] === this.name);
      if (sig) {
        sig.shift();
        return sig;
      }
    } else {
      const sig = this.parameterSchema.ExtractSignatures();
      return sig.length == 1 ? sig[0] : sig;
    }
  }
  /**
   *
   * @description Send the smart contract operation
   *
   * @param Options generic operation parameter
   */
  send(params = {}) {
    if (this.provider instanceof Wallet) {
      return this.provider.transfer(this.toTransferParams(params)).send();
    } else {
      return this.provider.transfer(this.toTransferParams(params));
    }
  }
  /**
   *
   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods
   *
   * @param Options generic transfer operation parameters
   */
  toTransferParams({ fee, gasLimit, storageLimit, source, amount = 0, mutez = false } = {}) {
    const fullTransferParams = {
      to: this.address,
      amount,
      fee,
      mutez,
      source,
      gasLimit,
      storageLimit,
      parameter: {
        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,
        value: this.isAnonymous ? this.parameterSchema.Encode(this.name, ...this.args) : this.parameterSchema.Encode(...this.args)
      }
    };
    return fullTransferParams;
  }
};
var OnChainView = class {
  constructor(_rpc, _readProvider, _contractAddress, _smartContractViewSchema, _contractStorageType, _args = "Unit") {
    this._rpc = _rpc;
    this._readProvider = _readProvider;
    this._contractAddress = _contractAddress;
    this._smartContractViewSchema = _smartContractViewSchema;
    this._contractStorageType = _contractStorageType;
    this._args = _args;
  }
  /**
   * @description Get the signature of the smart contract view
   */
  getSignature() {
    return {
      parameter: this._smartContractViewSchema.extractArgsSchema(),
      result: this._smartContractViewSchema.extractResultSchema()
    };
  }
  /**
   * @description Get the result of the view simulation
   * @param executionContext.source the public key hash of the account who initialized this view execution.
   * @param executionContext.viewCaller the contract address which is the caller of view.
   */
  executeView(executionContext) {
    return __awaiter4(this, void 0, void 0, function* () {
      this.verifyContextExecution(executionContext);
      const chainId = yield this._readProvider.getChainId();
      const viewArgs = this.transformArgsToMichelson();
      const scriptView = {
        contract: this._contractAddress,
        view: this._smartContractViewSchema.viewName,
        input: viewArgs,
        chain_id: chainId,
        source: executionContext.viewCaller
      };
      if (executionContext.source) {
        scriptView.payer = executionContext.source;
      }
      return this.executeViewAndDecodeResult(scriptView);
    });
  }
  verifyContextExecution(executionContext) {
    if (executionContext.source && validateAddress(executionContext.source) !== ValidationResult.VALID) {
      throw new InvalidViewSimulationContext(`The source account who initialized the view execution is invalid: ${executionContext.source}.`);
    }
    if (!executionContext.viewCaller || validateAddress(executionContext.viewCaller) !== ValidationResult.VALID) {
      throw new InvalidViewSimulationContext(`The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`);
    }
  }
  transformArgsToMichelson() {
    try {
      return this._smartContractViewSchema.encodeViewArgs(this._args);
    } catch (error) {
      throw new InvalidViewParameterError(this._smartContractViewSchema.viewName, this.getSignature(), this._args, error);
    }
  }
  /**
   * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.
   *
   * Certain specific instructions have different semantics in view:
   * BALANCE represents the current amount of mutez held by the contract where view is;
   * SENDER represents the contract which is the caller of view;
   * SELF_ADDRESS represents the contract where view is;
   * AMOUNT is always 0 mutez.
   *
   */
  adaptViewCodeToContext(instructions, viewCaller, contractBalance) {
    const instructionsToReplace = {
      BALANCE: [{ prim: "PUSH", args: [{ prim: "mutez" }, { int: contractBalance }] }],
      SENDER: [{ prim: "PUSH", args: [{ prim: "address" }, { string: viewCaller }] }],
      SELF_ADDRESS: [
        { prim: "PUSH", args: [{ prim: "address" }, { string: this._contractAddress }] }
      ],
      AMOUNT: [{ prim: "PUSH", args: [{ prim: "mutez" }, { int: "0" }] }]
    };
    instructions.forEach((inst, i) => {
      if (inst.prim in instructionsToReplace) {
        instructions[i] = Object(instructionsToReplace)[inst.prim];
      }
      if (inst.args && inst.args.length !== 0) {
        this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);
      } else if (Array.isArray(inst)) {
        this.adaptViewCodeToContext(inst, viewCaller, contractBalance);
      }
    });
    return instructions;
  }
  executeViewAndDecodeResult(viewScript) {
    return __awaiter4(this, void 0, void 0, function* () {
      let storage2;
      try {
        storage2 = (yield this._rpc.runScriptView(viewScript)).data;
      } catch (error) {
        const failWith = validateAndExtractFailwith(error);
        throw failWith ? new ViewSimulationError(`The simulation of the on-chain view named ${this._smartContractViewSchema.viewName} failed with: ${JSON.stringify(failWith)}`, this._smartContractViewSchema.viewName, failWith, error) : error;
      }
      return this._smartContractViewSchema.decodeViewResult(storage2);
    });
  }
};
var ContractMethodFactory = class {
  constructor(provider, contractAddress) {
    this.provider = provider;
    this.contractAddress = contractAddress;
  }
  createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {
    return new ContractMethod(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);
  }
  createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {
    return new ContractMethodObject(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);
  }
  createContractViewObjectParam(rpc, readProvider, smartContractViewSchema, contractStorageType, viewArgs) {
    return new OnChainView(rpc, readProvider, this.contractAddress, smartContractViewSchema, contractStorageType, viewArgs);
  }
};
var DEFAULT_SMART_CONTRACT_METHOD_NAME = "default";
var ContractView = class {
  constructor(currentContract, name, callbackParametersSchema, parameterSchema, args, rpc, readProvider) {
    this.currentContract = currentContract;
    this.name = name;
    this.callbackParametersSchema = callbackParametersSchema;
    this.parameterSchema = parameterSchema;
    this.args = args;
    this.rpc = rpc;
    this.readProvider = readProvider;
  }
  read(chainId) {
    return __awaiter4(this, void 0, void 0, function* () {
      const chainIdValidation = validateChain(chainId !== null && chainId !== void 0 ? chainId : "");
      if (validateContractAddress(chainId !== null && chainId !== void 0 ? chainId : "") == ValidationResult.VALID) {
        throw new DeprecationError(`Since version 12, the lambda view no longer depends on a lambda contract. The read method no longer accepts a contract address as a parameter.`);
      } else if (chainId && chainIdValidation !== ValidationResult.VALID) {
        throw new InvalidChainIdError(chainId, invalidDetail(chainIdValidation));
      }
      const arg = this.parameterSchema.Encode(...this.args);
      const result = yield this.rpc.runView({
        contract: this.currentContract.address,
        entrypoint: this.name,
        input: arg,
        chain_id: chainId ? chainId : yield this.readProvider.getChainId()
      });
      return this.callbackParametersSchema.Execute(result.data);
    });
  }
};
var validateArgs = (args, schema, name) => {
  const sigs = schema.ExtractSignatures();
  if (!sigs.find((x) => x.length === args.length)) {
    throw new InvalidParameterError(name, sigs, args);
  }
};
var isView = (entrypoint) => {
  let isView2 = false;
  if ("prim" in entrypoint && entrypoint.prim === "pair" && entrypoint.args) {
    const lastElement = entrypoint.args[entrypoint.args.length - 1];
    if ("prim" in lastElement && lastElement.prim === "contract") {
      isView2 = true;
    }
  }
  return isView2;
};
var ContractAbstraction = class {
  constructor(address, script, provider, storageProvider, entrypoints, rpc, readProvider) {
    this.address = address;
    this.script = script;
    this.storageProvider = storageProvider;
    this.entrypoints = entrypoints;
    this.rpc = rpc;
    this.readProvider = readProvider;
    this.methods = {};
    this.methodsObject = {};
    this.views = {};
    this.contractViews = {};
    this.contractMethodFactory = new ContractMethodFactory(provider, address);
    this.schema = Schema.fromRPCResponse({ script: this.script });
    this.parameterSchema = ParameterSchema.fromRPCResponse({ script: this.script });
    this.viewSchema = ViewSchema.fromRPCResponse({ script: this.script });
    if (this.viewSchema.length !== 0) {
      this._initializeOnChainViews(this, rpc, this.readProvider, this.viewSchema);
    }
    this.eventSchema = EventSchema.fromRPCResponse({ script: this.script });
    this._initializeMethods(this, this.entrypoints.entrypoints, this.rpc, this.readProvider);
  }
  _initializeMethods(currentContract, entrypoints, rpc, readProvider) {
    const parameterSchema = this.parameterSchema;
    const keys = Object.keys(entrypoints);
    if (parameterSchema.isMultipleEntryPoint) {
      keys.forEach((smartContractMethodName) => {
        const smartContractMethodSchema = new ParameterSchema(entrypoints[smartContractMethodName]);
        this.methods[smartContractMethodName] = function(...args) {
          return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args);
        };
        this.methodsObject[smartContractMethodName] = function(args) {
          return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args);
        };
        if (isView(entrypoints[smartContractMethodName])) {
          const view = function(...args) {
            const entrypointParamWithoutCallback = entrypoints[smartContractMethodName].args[0];
            const smartContractMethodSchemaWithoutCallback = new ParameterSchema(entrypointParamWithoutCallback);
            const parametersCallback = entrypoints[smartContractMethodName].args[1].args[0];
            const smartContractMethodCallbackSchema = new ParameterSchema(parametersCallback);
            validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);
            return new ContractView(currentContract, smartContractMethodName, smartContractMethodCallbackSchema, smartContractMethodSchemaWithoutCallback, args, rpc, readProvider);
          };
          this.views[smartContractMethodName] = view;
        }
      });
      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter((key) => Object.keys(entrypoints).indexOf(key) === -1);
      anonymousMethods.forEach((smartContractMethodName) => {
        this.methods[smartContractMethodName] = function(...args) {
          return currentContract.contractMethodFactory.createContractMethodFlatParams(parameterSchema, smartContractMethodName, args, false, true);
        };
        this.methodsObject[smartContractMethodName] = function(args) {
          return currentContract.contractMethodFactory.createContractMethodObjectParam(parameterSchema, smartContractMethodName, args, false, true);
        };
      });
    } else {
      const smartContractMethodSchema = this.parameterSchema;
      this.methods[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function(...args) {
        return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);
      };
      this.methodsObject[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function(args) {
        return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);
      };
    }
  }
  _initializeOnChainViews(currentContract, rpc, readProvider, allContractViews) {
    const storageType = this.schema.val;
    allContractViews.forEach((viewSchema) => {
      this.contractViews[viewSchema.viewName] = function(args) {
        return currentContract.contractMethodFactory.createContractViewObjectParam(rpc, readProvider, viewSchema, storageType, args);
      };
    });
  }
  /**
   * @description Return a friendly representation of the smart contract storage
   */
  storage() {
    return this.storageProvider.getStorage(this.address, this.schema);
  }
  /**
   *
   * @description Return a friendly representation of the smart contract big map value
   *
   * @param key BigMap key to fetch
   *
   * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get
   */
  bigMap(key) {
    return this.storageProvider.getBigMapKey(this.address, key, this.schema);
  }
};
var setDelegate = (key) => {
  return [
    { prim: "DROP" },
    { prim: "NIL", args: [{ prim: "operation" }] },
    {
      prim: "PUSH",
      args: [{ prim: "key_hash" }, { string: key }]
    },
    { prim: "SOME" },
    { prim: "SET_DELEGATE" },
    { prim: "CONS" }
  ];
};
var transferImplicit = (key, mutez) => {
  return [
    { prim: "DROP" },
    { prim: "NIL", args: [{ prim: "operation" }] },
    {
      prim: "PUSH",
      args: [{ prim: "key_hash" }, { string: key }]
    },
    { prim: "IMPLICIT_ACCOUNT" },
    {
      prim: "PUSH",
      args: [{ prim: "mutez" }, { int: `${mutez}` }]
    },
    { prim: "UNIT" },
    { prim: "TRANSFER_TOKENS" },
    { prim: "CONS" }
  ];
};
var removeDelegate = () => {
  return [
    { prim: "DROP" },
    { prim: "NIL", args: [{ prim: "operation" }] },
    { prim: "NONE", args: [{ prim: "key_hash" }] },
    { prim: "SET_DELEGATE" },
    { prim: "CONS" }
  ];
};
var transferToContract = (key, amount) => {
  return [
    { prim: "DROP" },
    { prim: "NIL", args: [{ prim: "operation" }] },
    {
      prim: "PUSH",
      args: [{ prim: "address" }, { string: key }]
    },
    { prim: "CONTRACT", args: [{ prim: "unit" }] },
    {
      prim: "IF_NONE",
      args: [[{ prim: "UNIT" }, { prim: "FAILWITH" }], []]
    },
    {
      prim: "PUSH",
      args: [{ prim: "mutez" }, { int: `${amount}` }]
    },
    { prim: "UNIT" },
    { prim: "TRANSFER_TOKENS" },
    { prim: "CONS" }
  ];
};
var MANAGER_LAMBDA = {
  setDelegate,
  removeDelegate,
  transferImplicit,
  transferToContract
};
var code = [
  {
    prim: "parameter",
    args: [
      {
        prim: "lambda",
        args: [
          { prim: "unit" },
          {
            prim: "pair",
            args: [{ prim: "list", args: [{ prim: "operation" }] }, { prim: "unit" }]
          }
        ]
      }
    ]
  },
  { prim: "storage", args: [{ prim: "unit" }] },
  { prim: "code", args: [[{ prim: "CAR" }, { prim: "UNIT" }, { prim: "EXEC" }]] }
];
var storage = "Unit";
var VIEW_LAMBDA = {
  code,
  storage
};
function compose(functioncomposer1, functioncomposer2) {
  return (contractAbstraction, context2) => functioncomposer2(functioncomposer1(contractAbstraction, context2), context2);
}
var SaplingStateAbstraction = class {
  constructor(id, provider) {
    this.id = id;
    this.provider = provider;
  }
  /**
   *
   * @description Fetch the sapling state
   *
   * @param block optional block level to fetch the values from (head will be use by default)
   * @returns Return a json object of the sapling_state
   *
   */
  getSaplingDiff(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.provider.getSaplingDiffByID(this.id.toString(), block);
    });
  }
  getId() {
    return this.id.toString();
  }
};
var _counters;
var mergeLimits = (userDefinedLimit, defaultLimits) => {
  var _a3, _b, _c;
  return {
    fee: (_a3 = userDefinedLimit.fee) !== null && _a3 !== void 0 ? _a3 : defaultLimits.fee,
    gasLimit: (_b = userDefinedLimit.gasLimit) !== null && _b !== void 0 ? _b : defaultLimits.gasLimit,
    storageLimit: (_c = userDefinedLimit.storageLimit) !== null && _c !== void 0 ? _c : defaultLimits.storageLimit
  };
};
var PrepareProvider = class extends Provider {
  constructor(context2) {
    super(context2);
    this.context = context2;
    _counters.set(this, void 0);
    __classPrivateFieldSet(this, _counters, {});
  }
  getBlockHash(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.context.readProvider.getBlockHash(block !== null && block !== void 0 ? block : "head~2");
    });
  }
  getProtocolHash() {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.context.readProvider.getNextProtocol("head");
    });
  }
  getHeadCounter(pkh) {
    var _a3;
    return __awaiter4(this, void 0, void 0, function* () {
      return (_a3 = this.context.readProvider.getCounter(pkh, "head")) !== null && _a3 !== void 0 ? _a3 : "0";
    });
  }
  adjustGasForBatchOperation(gasLimitBlock, gaslimitOp, numberOfOps) {
    return bignumber_default.min(gaslimitOp, gasLimitBlock.div(numberOfOps + 1));
  }
  getAccountLimits(pkh, constants, numberOfOps) {
    return __awaiter4(this, void 0, void 0, function* () {
      const balance = yield this.context.readProvider.getBalance(pkh, "head");
      const { hard_gas_limit_per_operation, hard_gas_limit_per_block, hard_storage_limit_per_operation, cost_per_byte } = constants;
      return {
        fee: 0,
        gasLimit: numberOfOps ? Math.floor(this.adjustGasForBatchOperation(hard_gas_limit_per_block, hard_gas_limit_per_operation, numberOfOps).toNumber()) : hard_gas_limit_per_operation.toNumber(),
        storageLimit: Math.floor(bignumber_default.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber())
      };
    });
  }
  getFee(op, pkh, headCounter) {
    if (!__classPrivateFieldGet(this, _counters)[pkh] || __classPrivateFieldGet(this, _counters)[pkh] < headCounter) {
      __classPrivateFieldGet(this, _counters)[pkh] = headCounter;
    }
    const opCounter = ++__classPrivateFieldGet(this, _counters)[pkh];
    return {
      counter: `${opCounter}`,
      fee: typeof op.fee === "undefined" ? "0" : `${op.fee}`,
      gas_limit: typeof op.gas_limit === "undefined" ? "0" : `${op.gas_limit}`,
      storage_limit: typeof op.storage_limit === "undefined" ? "0" : `${op.storage_limit}`
    };
  }
  getSource(op, pkh, source) {
    return { source: typeof op.source === "undefined" ? source || pkh : op.source };
  }
  addRevealOperationIfNeeded(operation, publicKeyHash) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (isOpRequireReveal(operation)) {
        const ops = [operation];
        const { publicKey, pkh } = yield this.getKeys();
        if (yield this.isAccountRevealRequired(publicKeyHash)) {
          if (!publicKey) {
            throw new PublicKeyNotFoundError(pkh);
          }
          ops.unshift(yield createRevealOperation({
            fee: DEFAULT_FEE.REVEAL,
            storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,
            gasLimit: getRevealGasLimit(pkh)
          }, publicKeyHash, publicKey));
          return ops;
        }
      }
      return operation;
    });
  }
  getKeys() {
    return __awaiter4(this, void 0, void 0, function* () {
      const isSignerConfigured = this.context.isAnySignerConfigured();
      return {
        pkh: isSignerConfigured ? yield this.signer.publicKeyHash() : yield this.context.walletProvider.getPKH(),
        publicKey: isSignerConfigured ? yield this.signer.publicKey() : void 0
      };
    });
  }
  convertIntoArray(op) {
    if (Array.isArray(op)) {
      return [...op];
    } else {
      return [op];
    }
  }
  constructOpContents(ops, headCounter, pkh, source, currentVotingPeriod) {
    return ops.map((op) => {
      switch (op.kind) {
        case OpKind.ACTIVATION:
        case OpKind.DRAIN_DELEGATE:
          return Object.assign({}, op);
        case OpKind.ORIGINATION:
          return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { balance: typeof op.balance !== "undefined" ? `${op.balance}` : "0" }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));
        case OpKind.TRANSACTION: {
          const cops = Object.assign(Object.assign(Object.assign(Object.assign({}, op), { amount: typeof op.amount !== "undefined" ? `${op.amount}` : "0" }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));
          if (cops.source.toLowerCase().startsWith("kt1")) {
            throw new DeprecationError(`KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`);
          }
          return cops;
        }
        case OpKind.REVEAL:
        case OpKind.DELEGATION:
        case OpKind.REGISTER_GLOBAL_CONSTANT:
        case OpKind.UPDATE_CONSENSUS_KEY:
        case OpKind.SMART_ROLLUP_ADD_MESSAGES:
        case OpKind.SMART_ROLLUP_ORIGINATE:
          return Object.assign(Object.assign(Object.assign({}, op), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));
        case OpKind.TRANSFER_TICKET:
          return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { ticket_amount: `${op.ticket_amount}` }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));
        case OpKind.INCREASE_PAID_STORAGE:
          return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { amount: `${op.amount}` }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));
        case OpKind.BALLOT:
          if (currentVotingPeriod === void 0) {
            throw new RPCResponseError(`Failed to get the current voting period index`);
          }
          return Object.assign(Object.assign({}, op), { period: currentVotingPeriod === null || currentVotingPeriod === void 0 ? void 0 : currentVotingPeriod.voting_period.index });
        case OpKind.PROPOSALS:
          if (currentVotingPeriod === void 0) {
            throw new RPCResponseError(`Failed to get the current voting period index`);
          }
          return Object.assign(Object.assign({}, op), { period: currentVotingPeriod === null || currentVotingPeriod === void 0 ? void 0 : currentVotingPeriod.voting_period.index });
        default:
          throw new InvalidOperationKindError(op.kind);
      }
    });
  }
  /**
   *
   * @description Method to prepare an activation operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  activate({ pkh, secret }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const op = yield createActivationOperation({
        pkh,
        secret
      });
      const ops = this.convertIntoArray(op);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a reveal operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  reveal({ fee, gasLimit, storageLimit }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh, publicKey } = yield this.getKeys();
      if (!publicKey) {
        throw new PublicKeyNotFoundError(pkh);
      }
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const mergedEstimates = mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS);
      const op = yield createRevealOperation({
        fee: mergedEstimates.fee,
        gasLimit: mergedEstimates.gasLimit,
        storageLimit: mergedEstimates.storageLimit
      }, pkh, publicKey);
      const ops = this.convertIntoArray(op);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare an origination operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  originate(_a3, source) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS))));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a transaction operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  transaction(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createTransferOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a delegation operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  delegation(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createSetDelegateOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a register delegate operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  registerDelegate({ fee, storageLimit, gasLimit }, source) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const mergedEstimates = mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS);
      const op = yield createRegisterDelegateOperation({
        fee: mergedEstimates.fee,
        storageLimit: mergedEstimates.storageLimit,
        gasLimit: mergedEstimates.gasLimit
      }, pkh);
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a register_global_constant operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  registerGlobalConstant(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createRegisterGlobalConstantOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare an update_consensus_key operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  updateConsensusKey(_a3, source) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createUpdateConsensusKeyOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare an increase_paid_storage operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  increasePaidStorage(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createIncreasePaidStorageOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a ballot operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  ballot(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const op = yield createBallotOperation(Object.assign({}, params));
      const ops = this.convertIntoArray(op);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      let currentVotingPeriod;
      try {
        currentVotingPeriod = yield this.rpc.getCurrentPeriod();
      } catch (e) {
        throw new RPCResponseError("Failed to get the current voting period index");
      }
      const contents = this.constructOpContents(ops, headCounter, pkh, void 0, currentVotingPeriod);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a proposals operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  proposals(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const op = yield createProposalsOperation(Object.assign({}, params));
      const ops = this.convertIntoArray(op);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      let currentVotingPeriod;
      try {
        currentVotingPeriod = yield this.rpc.getCurrentPeriod();
      } catch (e) {
        throw new RPCResponseError("Failed to get the current voting period index");
      }
      const contents = this.constructOpContents(ops, headCounter, pkh, void 0, currentVotingPeriod);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a drain_delegate operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  drainDelegate(params, source) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const op = yield createDrainDelegateOperation(Object.assign({}, params));
      const ops = this.convertIntoArray(op);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a transfer_ticket operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  transferTicket(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createTransferTicketOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a smart_rollup_add_messages operation
   * @param operation RPCOperation object or RPCOperation array
   * @param source string or undefined source pkh
   * @returns a PreparedOperation object
   */
  smartRollupAddMessages(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createSmartRollupAddMessagesOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a smart_rollup_originate operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  smartRollupOriginate(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh } = yield this.getKeys();
      const originationProof = yield this.rpc.getOriginationProof({
        kind: rest.pvmKind,
        kernel: rest.kernel
      });
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const op = yield createSmartRollupOriginateOperation(Object.assign(Object.assign(Object.assign({}, mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)), rest), { originationProof }));
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a batch operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  batch(batchParams, estimates) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { pkh, publicKey } = yield this.getKeys();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants, batchParams.length);
      const revealNeeded = yield this.isRevealOpNeeded(batchParams, pkh);
      const ops = [];
      if (!estimates) {
        for (const op of batchParams) {
          if (isOpWithFee(op)) {
            const limits = mergeLimits(op, DEFAULT_PARAMS);
            ops.push(yield this.getRPCOp(Object.assign(Object.assign({}, op), limits)));
          } else {
            ops.push(Object.assign({}, op));
          }
        }
      } else {
        for (const op of batchParams) {
          if (isOpWithFee(op)) {
            const e = estimates.shift();
            const limits = mergeLimits(op, {
              fee: e.suggestedFeeMutez,
              storageLimit: e.storageLimit,
              gasLimit: e.gasLimit
            });
            ops.push(yield this.getRPCOp(Object.assign(Object.assign({}, op), limits)));
          } else {
            ops.push(Object.assign({}, op));
          }
        }
      }
      if (revealNeeded) {
        if (!publicKey) {
          throw new PublicKeyNotFoundError(pkh);
        }
        ops.unshift(yield createRevealOperation({
          fee: DEFAULT_FEE.REVEAL,
          storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,
          gasLimit: getRevealGasLimit(pkh)
        }, pkh, publicKey));
      }
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const contents = this.constructOpContents(ops, headCounter, pkh);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to prepare a batch operation
   * @param operation RPCOperation object or RPCOperation array
   * @returns a PreparedOperation object
   */
  contractCall(contractMethod) {
    var _a3, _b, _c;
    return __awaiter4(this, void 0, void 0, function* () {
      const hash2 = yield this.getBlockHash();
      const protocol = yield this.getProtocolHash();
      const { pkh } = yield this.getKeys();
      __classPrivateFieldSet(this, _counters, {});
      const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);
      const params = contractMethod.toTransferParams();
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);
      const estimateLimits = mergeLimits({
        fee: params.fee,
        storageLimit: params.storageLimit,
        gasLimit: params.gasLimit
      }, DEFAULT_PARAMS);
      const op = {
        kind: OpKind.TRANSACTION,
        fee: (_a3 = params.fee) !== null && _a3 !== void 0 ? _a3 : estimateLimits.fee,
        gas_limit: (_b = params.gasLimit) !== null && _b !== void 0 ? _b : estimateLimits.gasLimit,
        storage_limit: (_c = params.storageLimit) !== null && _c !== void 0 ? _c : estimateLimits.storageLimit,
        amount: String(params.amount),
        destination: params.to,
        parameters: params.parameter
      };
      const operation = yield this.addRevealOperationIfNeeded(op, pkh);
      const ops = this.convertIntoArray(operation);
      const contents = this.constructOpContents(ops, headCounter, pkh);
      return {
        opOb: {
          branch: hash2,
          contents,
          protocol
        },
        counter: headCounter
      };
    });
  }
  /**
   *
   * @description Method to convert a PreparedOperation to the params needed for the preapplyOperation method
   * @param prepared a Prepared Operation
   * @returns a PreapplyParams object
   */
  toPreapply(prepared) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { opOb: { contents, branch, protocol } } = prepared;
      const forgeParams = this.toForge(prepared);
      const forged = yield this.context.forger.forge(forgeParams);
      const sig = yield this.context.signer.sign(forged, new Uint8Array([3]));
      return [{ contents, branch, protocol, signature: sig.prefixSig }];
    });
  }
  /**
   *
   * @description Method to convert a PreparedOperation to the params needed for forging
   * @param param a Prepared Operation
   * @returns a ForgeParams object
   */
  toForge({ opOb: { contents, branch } }) {
    return {
      branch,
      contents
    };
  }
};
_counters = /* @__PURE__ */ new WeakMap();
var BATCH_KINDS = [
  OpKind.ACTIVATION,
  OpKind.ORIGINATION,
  OpKind.TRANSACTION,
  OpKind.DELEGATION
];
var OperationBatch = class extends Provider {
  constructor(context2, estimator) {
    super(context2);
    this.estimator = estimator;
    this.operations = [];
    this.prepare = new PrepareProvider(this.context);
  }
  /**
   *
   * @description Add a transaction operation to the batch
   *
   * @param params Transfer operation parameter
   */
  withTransfer(params) {
    const toValidation = validateAddress(params.to);
    if (params.amount < 0) {
      throw new InvalidAmountError(params.amount.toString());
    }
    if (toValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.to, invalidDetail(toValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.TRANSACTION }, params));
    return this;
  }
  /**
   *
   * @description Transfer tickets from a Tezos address (tz1,tz2 or tz3) to a smart contract address( KT1)
   *
   * @param params Transfer operation parameter
   */
  withTransferTicket(params) {
    const destinationValidation = validateAddress(params.destination);
    if (destinationValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.destination, invalidDetail(destinationValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.TRANSFER_TICKET }, params));
    return this;
  }
  /**
   *
   * @description Add a contract call to the batch
   *
   * @param params Call a contract method
   * @param options Generic operation parameters
   */
  withContractCall(params, options = {}) {
    return this.withTransfer(params.toTransferParams(options));
  }
  /**
   *
   * @description Add a delegation operation to the batch
   *
   * @param params Delegation operation parameter
   */
  withDelegation(params) {
    var _a3;
    const sourceValidation = validateAddress(params.source);
    if (params.source && sourceValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
    }
    const delegateValidation = validateAddress((_a3 = params.delegate) !== null && _a3 !== void 0 ? _a3 : "");
    if (params.delegate && delegateValidation !== ValidationResult.VALID) {
      throw new InvalidAddressError(params.delegate, invalidDetail(delegateValidation));
    }
    this.operations.push(Object.assign({ kind: OpKind.DELEGATION }, params));
    return this;
  }
  /**
   *
   * @description Add an activation operation to the batch
   *
   * @param params Activation operation parameter
   * @throws {@link InvalidKeyHashError}
   */
  withActivation({ pkh, secret }) {
    const pkhValidation = validateKeyHash(pkh);
    if (pkhValidation !== ValidationResult.VALID) {
      throw new InvalidKeyHashError(pkh, invalidDetail(pkhValidation));
    }
    this.operations.push({ kind: OpKind.ACTIVATION, pkh, secret });
    return this;
  }
  /**
   *
   * @description Add an origination operation to the batch
   *
   * @param params Origination operation parameter
   */
  withOrigination(params) {
    this.operations.push(Object.assign({ kind: OpKind.ORIGINATION }, params));
    return this;
  }
  /**
   *
   * @description Add a register a global constant operation to the batch
   *
   * @param params RegisterGlobalConstant operation parameter
   */
  withRegisterGlobalConstant(params) {
    this.operations.push(Object.assign({ kind: OpKind.REGISTER_GLOBAL_CONSTANT }, params));
    return this;
  }
  /**
   *
   * @description Add an increase paid storage operation to the batch
   *
   * @param params IncreasePaidStorage operation parameter
   */
  withIncreasePaidStorage(params) {
    this.operations.push(Object.assign({ kind: OpKind.INCREASE_PAID_STORAGE }, params));
    return this;
  }
  /**
   *
   * @description Add a smart rollup add messages operation to the batch
   *
   * @param params Rollup origination operation parameter
   */
  withSmartRollupAddMessages(params) {
    this.operations.push(Object.assign({ kind: OpKind.SMART_ROLLUP_ADD_MESSAGES }, params));
    return this;
  }
  /**
   *
   * @description Add a smart rollup originate operation to the batch
   *
   * @param params Smart Rollup Originate operation parameter
   */
  withSmartRollupOriginate(params) {
    this.operations.push(Object.assign({ kind: OpKind.SMART_ROLLUP_ORIGINATE }, params));
    return this;
  }
  getRPCOp(param) {
    return __awaiter4(this, void 0, void 0, function* () {
      switch (param.kind) {
        case OpKind.TRANSACTION:
          return createTransferOperation(Object.assign({}, param));
        case OpKind.ORIGINATION:
          return createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign({}, param)));
        case OpKind.DELEGATION:
          return createSetDelegateOperation(Object.assign({}, param));
        case OpKind.REGISTER_GLOBAL_CONSTANT:
          return createRegisterGlobalConstantOperation(Object.assign({}, param));
        case OpKind.INCREASE_PAID_STORAGE:
          return createIncreasePaidStorageOperation(Object.assign({}, param));
        case OpKind.TRANSFER_TICKET:
          return createTransferTicketOperation(Object.assign({}, param));
        case OpKind.SMART_ROLLUP_ADD_MESSAGES:
          return createSmartRollupAddMessagesOperation(Object.assign({}, param));
        case OpKind.SMART_ROLLUP_ORIGINATE:
          return createSmartRollupOriginateOperation(Object.assign({}, param));
        default:
          throw new InvalidOperationKindError(JSON.stringify(param.kind));
      }
    });
  }
  /**
   *
   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array
   *
   * @param params Operations parameter
   * @throws {@link InvalidOperationKindError}
   */
  with(params) {
    for (const param of params) {
      switch (param.kind) {
        case OpKind.TRANSACTION:
          this.withTransfer(param);
          break;
        case OpKind.ORIGINATION:
          this.withOrigination(param);
          break;
        case OpKind.DELEGATION:
          this.withDelegation(param);
          break;
        case OpKind.ACTIVATION:
          this.withActivation(param);
          break;
        case OpKind.REGISTER_GLOBAL_CONSTANT:
          this.withRegisterGlobalConstant(param);
          break;
        case OpKind.INCREASE_PAID_STORAGE:
          this.withIncreasePaidStorage(param);
          break;
        case OpKind.TRANSFER_TICKET:
          this.withTransferTicket(param);
          break;
        case OpKind.SMART_ROLLUP_ADD_MESSAGES:
          this.withSmartRollupAddMessages(param);
          break;
        case OpKind.SMART_ROLLUP_ORIGINATE:
          this.withSmartRollupOriginate(param);
          break;
        default:
          throw new InvalidOperationKindError(JSON.stringify(param.kind));
      }
    }
    return this;
  }
  /**
   *
   * @description Forge and Inject the operation batch
   *
   * @param params Optionally specify the source of the operation
   */
  send(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const source = params && params.source || publicKeyHash;
      const estimates = yield this.estimator.batch(this.operations);
      if (estimates.length !== this.operations.length) {
        estimates.shift();
      }
      const preparedOp = yield this.prepare.batch(this.operations, estimates);
      const opBytes = yield this.forge(preparedOp);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new BatchOperation(hash2, preparedOp.opOb.contents, source, forgedBytes, opResponse, context2);
    });
  }
};
var RPCBatchProvider = class {
  constructor(context2, estimator) {
    this.context = context2;
    this.estimator = estimator;
  }
  /***
   *
   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch
   *
   * @param params List of operation to batch together
   */
  batch(params) {
    const batch = new OperationBatch(this.context, this.estimator);
    if (Array.isArray(params)) {
      batch.with(params);
    }
    return batch;
  }
};
var BatchWalletOperation = class extends WalletOperation {
  constructor(opHash, context2, newHead$) {
    super(opHash, context2, newHead$);
    this.opHash = opHash;
    this.context = context2;
    this.getOriginatedContractAddresses = () => __awaiter4(this, void 0, void 0, function* () {
      const opResult = yield this.operationResults();
      if (!opResult) {
        throw new ObservableError("Unable to fetch operation results");
      } else {
        const originationOpResults = opResult.filter((x) => x.kind === "origination");
        let addresses = [];
        for (const res of originationOpResults) {
          if (res.metadata.operation_result.originated_contracts) {
            addresses = [...addresses, ...res.metadata.operation_result.originated_contracts];
          }
        }
        return addresses;
      }
    });
  }
  revealOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (!operationResult) {
        throw new ObservableError("Unable to fetch operation results");
      } else {
        return operationResult.find((x) => x.kind === OpKind.REVEAL);
      }
    });
  }
  status() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return "pending";
      }
      const op = yield this.operationResults();
      if (op) {
        return op.filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1).map((result) => {
          if (hasMetadataWithResult(result)) {
            const opResult = result.metadata.operation_result;
            return opResult.status;
          } else {
            return "unknown";
          }
        })[0] || "unknown";
      } else {
        throw new ObservableError("Unable to fetch operation results");
      }
    });
  }
};
var IncreasePaidStorageWalletOperation = class extends WalletOperation {
  constructor(opHash, context2, newHead$) {
    super(opHash, context2, newHead$);
    this.opHash = opHash;
    this.context = context2;
  }
  revealOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (!operationResult) {
        throw new ObservableError("Unable to fetch operation result");
      } else {
        return operationResult.find((x) => x.kind === OpKind.REVEAL);
      }
    });
  }
  increasePaidStorageOperation() {
    return __awaiter4(this, void 0, void 0, function* () {
      const operationResult = yield this.operationResults();
      if (!operationResult) {
        throw new ObservableError("Unable to fetch operation result");
      } else {
        return operationResult.find((x) => x.kind === OpKind.INCREASE_PAID_STORAGE);
      }
    });
  }
  status() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this._included) {
        return "pending";
      }
      const op = yield this.increasePaidStorageOperation();
      if (!op) {
        return "unknown";
      }
      return op.metadata.operation_result.status;
    });
  }
};
function timeoutAfter(timeoutMillisec) {
  return function inner(source) {
    return new BehaviorSubject(null).pipe(timeout({
      each: timeoutMillisec,
      with: () => throwError(() => new ConfirmationTimeoutError(`Confirmation polling timed out`))
    }), mergeMap(() => source));
  };
}
var createNewPollingBasedHeadObservable = (sharedHeadOb, context2, _scheduler) => {
  return sharedHeadOb.pipe(timeoutAfter(context2.config.confirmationPollingTimeoutSecond * 1e3), share({
    connector: () => new ReplaySubject(1),
    resetOnError: false,
    resetOnComplete: false,
    resetOnRefCountZero: false
  }));
};
var OperationFactory = class {
  constructor(context2) {
    this.context = context2;
    this.sharedHeadObs = defer(() => {
      return createObservableFromSubscription(this.context.stream.subscribeBlock("head"));
    });
  }
  createNewHeadObservable() {
    return __awaiter4(this, void 0, void 0, function* () {
      return createNewPollingBasedHeadObservable(this.sharedHeadObs, this.context);
    });
  }
  createPastBlockWalker(startBlock, count2 = 1) {
    return from(this.context.readProvider.getBlock(startBlock)).pipe(switchMap((block) => {
      if (count2 === 1) {
        return of(block);
      }
      return range(block.header.level, count2 - 1).pipe(startWith(block), concatMap((level) => __awaiter4(this, void 0, void 0, function* () {
        return this.context.readProvider.getBlock(typeof level === "number" ? level : level.header.level);
      })));
    }));
  }
  createHeadObservableFromConfig({ blockIdentifier }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const observableSequence = [];
      if (blockIdentifier) {
        observableSequence.push(this.createPastBlockWalker(blockIdentifier));
      }
      observableSequence.push(yield this.createNewHeadObservable());
      return concat(...observableSequence);
    });
  }
  createOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new WalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
  createBatchOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new BatchWalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
  createTransactionOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new TransactionWalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
  createDelegationOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new DelegationWalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
  createOriginationOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new OriginationWalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
  createIncreasePaidStorageOperation(hash2, config2 = {}) {
    return __awaiter4(this, void 0, void 0, function* () {
      return new IncreasePaidStorageWalletOperation(hash2, this.context.clone(), yield this.createHeadObservableFromConfig(config2));
    });
  }
};
var RpcTzProvider = class extends Provider {
  constructor(context2) {
    super(context2);
    this.prepare = new PrepareProvider(this.context);
  }
  getBalance(address) {
    return __awaiter4(this, void 0, void 0, function* () {
      const addressValidation = validateAddress(address);
      if (addressValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(address, invalidDetail(addressValidation));
      }
      return this.context.readProvider.getBalance(address, "head");
    });
  }
  getDelegate(address) {
    return __awaiter4(this, void 0, void 0, function* () {
      const addressValidation = validateAddress(address);
      if (addressValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(address, invalidDetail(addressValidation));
      }
      return this.context.readProvider.getDelegate(address, "head");
    });
  }
  activate(pkh, secret) {
    return __awaiter4(this, void 0, void 0, function* () {
      const pkhValidation = validateKeyHash(pkh);
      if (pkhValidation !== ValidationResult.VALID) {
        throw new InvalidKeyHashError(pkh, invalidDetail(pkhValidation));
      }
      const prepared = yield this.prepare.activate({ pkh, secret });
      const forgedBytes = yield this.forge(prepared);
      const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;
      return new Operation(yield this.rpc.injectOperation(bytes), Object.assign(Object.assign({}, forgedBytes), { opbytes: bytes }), [], this.context.clone());
    });
  }
};
var MINIMAL_FEE_MUTEZ = 100;
var MINIMAL_FEE_PER_BYTE_MUTEZ = 1;
var MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;
var GAS_BUFFER = 100;
var Estimate = class _Estimate {
  constructor(_milligasLimit, _storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez = MINIMAL_FEE_MUTEZ) {
    this._milligasLimit = _milligasLimit;
    this._storageLimit = _storageLimit;
    this.opSize = opSize;
    this.minimalFeePerStorageByteMutez = minimalFeePerStorageByteMutez;
    this.baseFeeMutez = baseFeeMutez;
  }
  /**
   * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)
   */
  get burnFeeMutez() {
    return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));
  }
  /**
   * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.
   */
  get storageLimit() {
    const limit = Math.max(Number(this._storageLimit), 0);
    return limit > 0 ? limit : 0;
  }
  /**
   * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.
   */
  get gasLimit() {
    return this.roundUp(Number(this._milligasLimit) / 1e3 + GAS_BUFFER);
  }
  get operationFeeMutez() {
    return (Number(this._milligasLimit) / 1e3 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ + Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ;
  }
  roundUp(nanotez) {
    return Math.ceil(Number(nanotez));
  }
  /**
   * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.
   */
  get minimalFeeMutez() {
    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);
  }
  /**
   * @description The suggested fee for the operation which includes minimal fees and a small buffer.
   */
  get suggestedFeeMutez() {
    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);
  }
  /**
   * @description Fees according to your specified base fee will ensure that at least minimum fees are used.
   */
  get usingBaseFeeMutez() {
    return Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez);
  }
  /**
   * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.
   */
  get totalCost() {
    return this.minimalFeeMutez + this.burnFeeMutez;
  }
  /**
   * @description Since Delphinet, consumed gas is provided in milligas for more precision.
   * This function returns an estimation of the gas that operation will consume in milligas.
   */
  get consumedMilligas() {
    return Number(this._milligasLimit);
  }
  static createEstimateInstanceFromProperties(estimateProperties) {
    let milligasLimit = 0;
    let storageLimit = 0;
    let opSize = 0;
    let minimalFeePerStorageByteMutez = 0;
    let baseFeeMutez;
    estimateProperties.forEach((estimate) => {
      milligasLimit += estimate.milligasLimit;
      storageLimit += estimate.storageLimit;
      opSize += estimate.opSize;
      minimalFeePerStorageByteMutez = Math.max(estimate.minimalFeePerStorageByteMutez, minimalFeePerStorageByteMutez);
      if (estimate.baseFeeMutez) {
        baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;
      }
    });
    return new _Estimate(milligasLimit, storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez);
  }
  static createArrayEstimateInstancesFromProperties(estimateProperties) {
    return estimateProperties.map((x) => new _Estimate(x.milligasLimit, x.storageLimit, x.opSize, x.minimalFeePerStorageByteMutez, x.baseFeeMutez));
  }
};
var RevealEstimateError = class extends TaquitoError {
  constructor() {
    super();
    this.name = "RevealEstimateError";
    this.message = "Public key is unknown, unable to estimate the reveal operation in Wallet API.";
  }
};
var RPCEstimateProvider = class extends Provider {
  constructor() {
    super(...arguments);
    this.ALLOCATION_STORAGE = 257;
    this.ORIGINATION_STORAGE = 257;
    this.OP_SIZE_REVEAL = 128;
    this.prepare = new PrepareProvider(this.context);
  }
  getKeys() {
    return __awaiter4(this, void 0, void 0, function* () {
      const isSignerConfigured = this.context.isAnySignerConfigured();
      return {
        publicKeyHash: isSignerConfigured ? yield this.signer.publicKeyHash() : yield this.context.walletProvider.getPKH(),
        publicKey: isSignerConfigured ? yield this.signer.publicKey() : void 0
      };
    });
  }
  getEstimationPropertiesFromOperationContent(content, size, costPerByte) {
    const operationResults = flattenOperationResult({ contents: [content] });
    let totalMilligas = 0;
    let totalStorage = 0;
    operationResults.forEach((result) => {
      totalStorage += "originated_contracts" in result && typeof result.originated_contracts !== "undefined" ? result.originated_contracts.length * this.ORIGINATION_STORAGE : 0;
      totalStorage += "allocated_destination_contract" in result ? this.ALLOCATION_STORAGE : 0;
      totalMilligas += Number(result.consumed_milligas) || 0;
      totalStorage += "paid_storage_size_diff" in result ? Number(result.paid_storage_size_diff) || 0 : 0;
      totalStorage += "storage_size" in result && "global_address" in result ? Number(result.storage_size) || 0 : 0;
      totalStorage += "genesis_commitment_hash" in result ? Number(result.size) : 0;
    });
    if (isOpWithFee(content)) {
      return {
        milligasLimit: totalMilligas || 0,
        storageLimit: Number(totalStorage || 0),
        opSize: size,
        minimalFeePerStorageByteMutez: costPerByte.toNumber()
      };
    } else {
      return {
        milligasLimit: 0,
        storageLimit: 0,
        opSize: size,
        minimalFeePerStorageByteMutez: costPerByte.toNumber(),
        baseFeeMutez: 0
      };
    }
  }
  calculateEstimates(op, constants) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { opbytes, opOb: { branch, contents } } = yield this.forge(op);
      const operation = {
        operation: { branch, contents },
        chain_id: yield this.context.readProvider.getChainId()
      };
      const { opResponse } = yield this.simulate(operation);
      const { cost_per_byte } = constants;
      const errors = [...flattenErrors(opResponse, "backtracked"), ...flattenErrors(opResponse)];
      if (errors.length) {
        throw new TezosOperationError(errors, "Error occurred during estimation");
      }
      let numberOfOps = 1;
      if (Array.isArray(op.opOb.contents) && op.opOb.contents.length > 1) {
        numberOfOps = opResponse.contents[0].kind === "reveal" ? op.opOb.contents.length - 1 : op.opOb.contents.length;
      }
      return opResponse.contents.map((x) => {
        return this.getEstimationPropertiesFromOperationContent(
          x,
          // TODO: Calculate a specific opSize for each operation.
          x.kind === "reveal" ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps,
          cost_per_byte
        );
      });
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for an origination operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param OriginationOperation Originate operation parameter
   */
  originate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const preparedOperation = yield this.prepare.originate(params);
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for an transfer operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param TransferOperation Originate operation parameter
   */
  transfer(_a3) {
    var _b;
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const toValidation = validateAddress(rest.to);
      if (toValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.to, invalidDetail(toValidation));
      }
      const srouceValidation = validateAddress((_b = rest.source) !== null && _b !== void 0 ? _b : "");
      if (rest.source && srouceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.source, invalidDetail(srouceValidation));
      }
      if (rest.amount < 0) {
        throw new InvalidAmountError(rest.amount.toString());
      }
      const preparedOperation = yield this.prepare.transaction(Object.assign({
        fee,
        storageLimit,
        gasLimit
      }, rest));
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for a transferTicket operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param TransferTicketParams operation parameter
   */
  transferTicket(_a3) {
    var _b;
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const destinationValidation = validateAddress(rest.destination);
      if (destinationValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.destination, invalidDetail(destinationValidation));
      }
      const sourceValidation = validateAddress((_b = rest.source) !== null && _b !== void 0 ? _b : "");
      if (rest.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.source, invalidDetail(sourceValidation));
      }
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.transferTicket(Object.assign({
        fee,
        storageLimit,
        gasLimit
      }, rest));
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for a delegate operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param Estimate
   */
  setDelegate(_a3) {
    var _b;
    var { fee, gasLimit, storageLimit } = _a3, rest = __rest2(_a3, ["fee", "gasLimit", "storageLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const sourceValidation = validateAddress(rest.source);
      if (rest.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.source, invalidDetail(sourceValidation));
      }
      const delegateValidation = validateAddress((_b = rest.delegate) !== null && _b !== void 0 ? _b : "");
      if (rest.delegate && delegateValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(rest.delegate, invalidDetail(delegateValidation));
      }
      const preparedOperation = yield this.prepare.delegation(Object.assign({
        fee,
        storageLimit,
        gasLimit
      }, rest));
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch
   *
   * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.
   */
  batch(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperations = yield this.prepare.batch(params);
      const estimateProperties = yield this.calculateEstimates(preparedOperations, protocolConstants);
      return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for a delegate operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param Estimate
   */
  registerDelegate(_a3, source) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const pkh = (yield this.getKeys()).publicKeyHash;
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const checkSource = source || pkh;
      const preparedOperation = yield this.prepare.registerDelegate(Object.assign({ fee, storageLimit, gasLimit }, rest), checkSource);
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees to reveal the current account
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed
   *
   * @param Estimate
   */
  reveal(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { publicKeyHash, publicKey } = yield this.getKeys();
      if (!publicKey) {
        throw new RevealEstimateError();
      }
      if (yield this.isAccountRevealRequired(publicKeyHash)) {
        const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
        const preparedOperation = params ? yield this.prepare.reveal(params) : yield this.prepare.reveal({});
        const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
        return Estimate.createEstimateInstanceFromProperties(estimateProperties);
      }
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for an registerGlobalConstant operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param params registerGlobalConstant operation parameter
   */
  registerGlobalConstant(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      const preparedOperation = yield this.prepare.registerGlobalConstant(Object.assign({
        fee,
        storageLimit,
        gasLimit
      }, rest));
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit, and fees for an increasePaidStorage operation
   *
   * @returns An estimation of gasLimit, storageLimit, and fees for the operation
   *
   * @param params increasePaidStorage operation parameters
   */
  increasePaidStorage(_a3) {
    var { fee, storageLimit, gasLimit } = _a3, rest = __rest2(_a3, ["fee", "storageLimit", "gasLimit"]);
    return __awaiter4(this, void 0, void 0, function* () {
      if (rest.amount < 0) {
        throw new InvalidAmountError(rest.amount.toString());
      }
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.increasePaidStorage(Object.assign({
        fee,
        storageLimit,
        gasLimit
      }, rest));
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for an Update Consensus Key operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param Estimate
   */
  updateConsensusKey(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.updateConsensusKey(params);
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for a smart_rollup_add_messages operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param Estimate
   */
  smartRollupAddMessages(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.smartRollupAddMessages(params);
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for an Smart Rollup Originate operation
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the operation
   *
   * @param SmartRollupOriginateParams
   */
  smartRollupOriginate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.smartRollupOriginate(params);
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
  /**
   *
   * @description Estimate gasLimit, storageLimit and fees for contract call
   *
   * @returns An estimation of gasLimit, storageLimit and fees for the contract call
   *
   * @param Estimate
   */
  contractCall(contractMethod) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocolConstants = yield this.context.readProvider.getProtocolConstants("head");
      const preparedOperation = yield this.prepare.contractCall(contractMethod);
      const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);
      if (preparedOperation.opOb.contents[0].kind === "reveal") {
        estimateProperties.shift();
      }
      return Estimate.createEstimateInstanceFromProperties(estimateProperties);
    });
  }
};
var DelegateOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const delegationOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "delegation");
    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get delegate() {
    return this.params.delegate;
  }
  get isRegisterOperation() {
    return this.delegate === this.source;
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get consumedGas() {
    BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: BigNumber.ROUND_UP });
    return this.consumedMilliGas ? new BigNumber(this.consumedMilliGas).dividedBy(1e3).toString() : void 0;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
};
var OriginationOperation = class extends Operation {
  constructor(hash2, params, raw, results, context2, contractProvider) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.contractProvider = contractProvider;
    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;
    if (Array.isArray(originatedContracts)) {
      this.contractAddress = originatedContracts[0];
    }
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get operationResults() {
    const originationOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "origination");
    const result = originationOp && hasMetadataWithResult(originationOp) && originationOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get consumedGas() {
    BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: BigNumber.ROUND_UP });
    return this.consumedMilliGas ? new BigNumber(this.consumedMilliGas).dividedBy(1e3).toString() : void 0;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get storageDiff() {
    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;
    return storageDiff ? storageDiff : void 0;
  }
  get storageSize() {
    const storageSize = this.operationResults && this.operationResults.storage_size;
    return storageSize ? storageSize : void 0;
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
  /**
   * @description Provide the contract abstract of the newly originated contract
   * @throws {@link OriginationOperationError}
   */
  contract(confirmations, timeout2) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this.contractAddress) {
        throw new OriginationOperationError("No contract was originated in this operation");
      }
      yield this.confirmation(confirmations, timeout2);
      return this.contractProvider.at(this.contractAddress);
    });
  }
};
var RegisterGlobalConstantOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
    this.globalConstantHash = this.operationResults && this.operationResults.global_address;
  }
  get operationResults() {
    const registerGlobalConstantOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "register_global_constant");
    const result = registerGlobalConstantOp && registerGlobalConstantOp.metadata && registerGlobalConstantOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get registeredExpression() {
    return this.params.value;
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
  get consumedGas() {
    BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: BigNumber.ROUND_UP });
    return this.consumedMilliGas ? new BigNumber(this.consumedMilliGas).dividedBy(1e3).toString() : void 0;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
};
var RevealOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const revealOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "reveal");
    return revealOp ? [revealOp] : [];
  }
  get status() {
    const operationResults = this.operationResults;
    const txResult = operationResults[0];
    if (txResult) {
      return txResult.metadata.operation_result.status;
    } else {
      return "unknown";
    }
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get publicKey() {
    return this.params.public_key;
  }
  sumProp(arr, prop) {
    return arr.reduce((prev, current) => {
      return prop in current ? Number(current[prop]) + prev : prev;
    }, 0);
  }
  get consumedGas() {
    BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: BigNumber.ROUND_UP });
    return new BigNumber(this.consumedMilliGas).dividedBy(1e3).toString();
  }
  get consumedMilliGas() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "consumed_milligas"));
  }
  get storageDiff() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "paid_storage_size_diff"));
  }
  get storageSize() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "storage_size"));
  }
  get errors() {
    return flattenErrors({ contents: this.operationResults });
  }
};
var TransactionOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const transactionOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "transaction");
    return transactionOp ? [transactionOp] : [];
  }
  get status() {
    const operationResults = this.operationResults;
    const txResult = operationResults[0];
    if (txResult) {
      return txResult.metadata.operation_result.status;
    } else {
      return "unknown";
    }
  }
  get amount() {
    return new bignumber_default(this.params.amount);
  }
  get destination() {
    return this.params.destination;
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  sumProp(arr, prop) {
    return arr.reduce((prev, current) => {
      return prop in current ? Number(current[prop]) + prev : prev;
    }, 0);
  }
  get consumedGas() {
    bignumber_default.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_default.ROUND_UP });
    return new bignumber_default(this.consumedMilliGas).dividedBy(1e3).toString();
  }
  get consumedMilliGas() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "consumed_milligas"));
  }
  get storageDiff() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "paid_storage_size_diff"));
  }
  get storageSize() {
    return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), "storage_size"));
  }
  get errors() {
    return flattenErrors({ contents: this.operationResults });
  }
};
var BigMapAbstraction = class {
  constructor(id, schema, provider) {
    this.id = id;
    this.schema = schema;
    this.provider = provider;
  }
  /**
   *
   * @description Fetch one value in a big map
   *
   * @param keysToEncode Key to query (will be encoded properly according to the schema)
   * @param block optional block level to fetch the values from (head will be use by default)
   * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map
   *
   */
  get(keyToEncode, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const id = yield this.provider.getBigMapKeyByID(this.id.toString(), keyToEncode, this.schema, block);
        return id;
      } catch (e) {
        if (e instanceof HttpResponseError && e.status === STATUS_CODE.NOT_FOUND) {
          return void 0;
        } else {
          throw e;
        }
      }
    });
  }
  /**
   *
   * @description Fetch multiple values in a big map
   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.
   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.
   * If one of the keys does not exist in the big map, its value will be set to undefined.
   *
   * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)
   * @param block optional block level to fetch the values from
   * @param batchSize optional batch size representing the number of requests to execute in parallel
   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format
   *
   */
  getMultipleValues(keysToEncode, block, batchSize = 5) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.provider.getBigMapKeysByID(this.id.toString(), keysToEncode, this.schema, block, batchSize);
    });
  }
  toJSON() {
    return this.id.toString();
  }
  toString() {
    return this.id.toString();
  }
};
var smartContractAbstractionSemantic = (provider) => ({
  // Provide a specific abstraction for BigMaps
  big_map: (val, code2) => {
    if (!val || !("int" in val) || val.int === void 0) {
      return {};
    } else {
      const schema = new Schema(code2);
      return new BigMapAbstraction(new bignumber_default(val.int), schema, provider);
    }
  },
  sapling_state: (val) => {
    if (!val || !("int" in val) || val.int === void 0) {
      return {};
    } else {
      return new SaplingStateAbstraction(new bignumber_default(val.int), provider);
    }
  }
  /*
  // TODO: embed useful other abstractions
  'contract':  () => {},
  'address':  () => {}
  */
});
var BallotOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const ballotOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "ballot");
    const result = ballotOp;
    return result ? result : void 0;
  }
  get period() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.period;
  }
  get proposal() {
    return this.params.proposal;
  }
  get ballot() {
    return this.params.ballot;
  }
};
var DrainDelegateOperation = class extends Operation {
  constructor(hash2, params, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
  }
  get operationResults() {
    const drainDelegateOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "drain_delegate");
    const result = drainDelegateOp && drainDelegateOp.metadata && drainDelegateOp.metadata.balance_updates;
    return result ? result : void 0;
  }
  get consensusKey() {
    return this.params.consensus_key;
  }
  get delegate() {
    return this.params.delegate;
  }
  get destination() {
    return this.params.destination;
  }
};
var TransferTicketOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const transferOp = Array.isArray(this.results) && this.results.find((op) => op.kind === OpKind.TRANSFER_TICKET);
    const result = transferOp && transferOp.metadata && transferOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get consumedGas() {
    BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: BigNumber.ROUND_UP });
    return this.consumedMilliGas ? new BigNumber(this.consumedMilliGas).dividedBy(1e3).toString() : void 0;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
};
var IncreasePaidStorageOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const increasePaidStorageOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "increase_paid_storage");
    const result = increasePaidStorageOp && increasePaidStorageOp.metadata && increasePaidStorageOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get amount() {
    return this.params.amount;
  }
  get destination() {
    return this.params.destination;
  }
};
var ProposalsOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const proposalsOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "proposals");
    const result = proposalsOp;
    return result ? result : void 0;
  }
  get proposals() {
    return this.params.proposals;
  }
  get period() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.period;
  }
};
var UpdateConsensusKeyOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const updateConsensusKeyOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "update_consensus_key");
    const result = updateConsensusKeyOp && updateConsensusKeyOp.metadata && updateConsensusKeyOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get pk() {
    return this.params.pk;
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
};
var SmartRollupAddMessagesOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const smartRollupAddMessagesOp = Array.isArray(this.results) && this.results.find((op) => op.kind === "smart_rollup_add_messages");
    const result = smartRollupAddMessagesOp && smartRollupAddMessagesOp.metadata && smartRollupAddMessagesOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get message() {
    return this.params.message;
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
};
var SmartRollupOriginateOperation = class extends Operation {
  constructor(hash2, params, source, raw, results, context2) {
    super(hash2, raw, results, context2);
    this.params = params;
    this.source = source;
  }
  get operationResults() {
    const smartRollupOriginateOp = Array.isArray(this.results) && this.results.find((op) => op.kind === OpKind.SMART_ROLLUP_ORIGINATE);
    const result = smartRollupOriginateOp && smartRollupOriginateOp.metadata && smartRollupOriginateOp.metadata.operation_result;
    return result ? result : void 0;
  }
  get status() {
    var _a3, _b;
    return (_b = (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.status) !== null && _b !== void 0 ? _b : "unknown";
  }
  get fee() {
    return Number(this.params.fee);
  }
  get gasLimit() {
    return Number(this.params.gas_limit);
  }
  get storageLimit() {
    return Number(this.params.storage_limit);
  }
  get consumedMilliGas() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.consumed_milligas;
  }
  get pvmKind() {
    return this.params.pvm_kind;
  }
  get kernel() {
    return this.params.kernel;
  }
  get originationProof() {
    return this.params.origination_proof;
  }
  get errors() {
    var _a3;
    return (_a3 = this.operationResults) === null || _a3 === void 0 ? void 0 : _a3.errors;
  }
};
var RpcContractProvider = class extends Provider {
  constructor(context2, estimator) {
    super(context2);
    this.estimator = estimator;
    this.contractProviderTypeSymbol = Symbol.for("taquito-contract-provider-type-symbol");
    this.prepare = new PrepareProvider(this.context);
  }
  /**
   *
   * @description Return a well formatted json object of the contract storage
   *
   * @param contract contract address you want to get the storage from
   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema
   * @throws {@link InvalidContractAddressError}
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script
   */
  getStorage(contract, schema) {
    return __awaiter4(this, void 0, void 0, function* () {
      const contractValidation = validateContractAddress(contract);
      if (contractValidation !== ValidationResult.VALID) {
        throw new InvalidContractAddressError(contract, invalidDetail(contractValidation));
      }
      const script = yield this.context.readProvider.getScript(contract, "head");
      if (!schema) {
        schema = script;
      }
      let contractSchema;
      if (Schema.isSchema(schema)) {
        contractSchema = schema;
      } else {
        contractSchema = Schema.fromRPCResponse({ script: schema });
      }
      return contractSchema.Execute(script.storage, smartContractAbstractionSemantic(this));
    });
  }
  /**
   *
   * @description Return a well formatted json object of the contract big map storage
   *
   * @param contract contract address you want to get the storage from
   * @param key contract big map key to fetch value from
   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema
   * @throws {@link InvalidContractAddressError}
   * @deprecated Deprecated in favor of getBigMapKeyByID
   *
   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get
   */
  getBigMapKey(contract, key, schema) {
    return __awaiter4(this, void 0, void 0, function* () {
      const contractValidation = validateContractAddress(contract);
      if (contractValidation !== ValidationResult.VALID) {
        throw new InvalidContractAddressError(contract, invalidDetail(contractValidation));
      }
      if (!schema) {
        schema = (yield this.rpc.getContract(contract)).script;
      }
      let contractSchema;
      if (Schema.isSchema(schema)) {
        contractSchema = schema;
      } else {
        contractSchema = Schema.fromRPCResponse({ script: schema });
      }
      const encodedKey = contractSchema.EncodeBigMapKey(key);
      const val = yield this.rpc.getBigMapKey(contract, encodedKey);
      return contractSchema.ExecuteOnBigMapValue(val);
    });
  }
  /**
   *
   * @description Return a well formatted json object of a big map value
   *
   * @param id Big Map ID
   * @param keyToEncode key to query (will be encoded properly according to the schema)
   * @param schema Big Map schema (can be determined using your contract type)
   * @param block optional block level to fetch the values from
   *
   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr
   */
  getBigMapKeyByID(id, keyToEncode, schema, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { key, type } = schema.EncodeBigMapKey(keyToEncode);
      const { packed } = yield this.context.packer.packData({ data: key, type });
      const encodedExpr = encodeExpr(packed);
      const bigMapValue = block ? yield this.context.readProvider.getBigMapValue({ id: id.toString(), expr: encodedExpr }, block) : yield this.context.readProvider.getBigMapValue({ id: id.toString(), expr: encodedExpr }, "head");
      return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this));
    });
  }
  /**
   *
   * @description Fetch multiple values in a big map
   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.
   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.
   * If one of the keys does not exist in the big map, its value will be set to undefined.
   *
   * @param id Big Map ID
   * @param keys Array of keys to query (will be encoded properly according to the schema)
   * @param schema Big Map schema (can be determined using your contract type)
   * @param block optional block level to fetch the values from
   * @param batchSize optional batch size representing the number of requests to execute in parallel
   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format
   *
   */
  getBigMapKeysByID(id, keys, schema, block, batchSize = 5) {
    return __awaiter4(this, void 0, void 0, function* () {
      const level = yield this.getBlockForRequest(keys, block);
      const bigMapValues = new MichelsonMap();
      let position = 0;
      let results = [];
      while (position < keys.length) {
        const keysBatch = keys.slice(position, position + batchSize);
        const batch = keysBatch.map((keyToEncode) => this.getBigMapValueOrUndefined(keyToEncode, id, schema, level));
        results = [...results, ...yield Promise.all(batch)];
        position += batchSize;
      }
      for (let i = 0; i < results.length; i++) {
        bigMapValues.set(keys[i], results[i]);
      }
      return bigMapValues;
    });
  }
  getBlockForRequest(keys, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return keys.length === 1 || typeof block !== "undefined" ? block : yield this.context.readProvider.getBlockLevel("head");
    });
  }
  getBigMapValueOrUndefined(keyToEncode, id, schema, level) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        return yield this.getBigMapKeyByID(id, keyToEncode, schema, level);
      } catch (ex) {
        if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {
          return;
        } else {
          throw ex;
        }
      }
    });
  }
  /**
   *
   * @description Return a well formatted json object of a sapling state
   *
   * @param id Sapling state ID
   * @param block optional block level to fetch the value from
   *
   */
  getSaplingDiffByID(id, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const saplingState = block ? yield this.context.readProvider.getSaplingDiffById({ id: id.toString() }, block) : yield this.context.readProvider.getSaplingDiffById({ id: id.toString() }, "head");
      return saplingState;
    });
  }
  /**
   *
   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)
   *
   * @param OriginationOperation Originate operation parameter
   */
  originate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const estimate = yield this.estimate(params, this.estimator.originate.bind(this.estimator));
      const preparedOrigination = yield this.prepare.originate(Object.assign(Object.assign({}, params), estimate));
      const content = preparedOrigination.opOb.contents.find((op) => op.kind === OpKind.ORIGINATION);
      const forgedOrigination = yield this.forge(preparedOrigination);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(forgedOrigination);
      return new OriginationOperation(hash2, content, forgedBytes, opResponse, context2, this);
    });
  }
  /**
   *
   * @description Set the delegate for a contract. Will sign and inject an operation using the current context
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param SetDelegate operation parameter
   */
  setDelegate(params) {
    var _a3;
    return __awaiter4(this, void 0, void 0, function* () {
      const sourceValidation = validateAddress(params.source);
      if (params.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
      }
      const delegateValidation = validateAddress((_a3 = params.delegate) !== null && _a3 !== void 0 ? _a3 : "");
      if (params.delegate && delegateValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.delegate, invalidDetail(delegateValidation));
      }
      if (/kt1/i.test(params.source)) {
        throw new InvalidDelegationSource(params.source);
      }
      const publicKeyHash = yield this.signer.publicKeyHash();
      const sourceOrDefault = params.source || publicKeyHash;
      const estimate = yield this.estimate(params, this.estimator.setDelegate.bind(this.estimator));
      const preparedDelegation = yield this.prepare.delegation(Object.assign(Object.assign({}, params), estimate));
      const content = preparedDelegation.opOb.contents.find((op) => op.kind === OpKind.DELEGATION);
      const opBytes = yield this.forge(preparedDelegation);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new DelegateOperation(hash2, content, sourceOrDefault, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Register the current address as delegate. Will sign and inject an operation using the current context
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param RegisterDelegate operation parameter
   */
  registerDelegate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const estimate = yield this.estimate(params, this.estimator.registerDelegate.bind(this.estimator));
      const source = yield this.signer.publicKeyHash();
      const prepared = yield this.prepare.registerDelegate(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.DELEGATION);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new DelegateOperation(hash2, content, source, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param Transfer operation parameter
   */
  transfer(params) {
    var _a3;
    return __awaiter4(this, void 0, void 0, function* () {
      const toValidation = validateAddress(params.to);
      if (toValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.to, invalidDetail(toValidation));
      }
      const sourceValidation = validateAddress((_a3 = params.source) !== null && _a3 !== void 0 ? _a3 : "");
      if (params.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
      }
      if (params.amount < 0) {
        throw new InvalidAmountError(params.amount.toString());
      }
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.transfer.bind(this.estimator));
      const source = params.source || publicKeyHash;
      const prepared = yield this.prepare.transaction(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.TRANSACTION);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new TransactionOperation(hash2, content, source, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Transfer Tickets to a smart contract address
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param TransferTicketParams operation parameter
   */
  transferTicket(params) {
    var _a3, _b;
    return __awaiter4(this, void 0, void 0, function* () {
      const destinationValidation = validateAddress(params.destination);
      if (destinationValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.destination, invalidDetail(destinationValidation));
      }
      const sourceValidation = validateAddress((_a3 = params.source) !== null && _a3 !== void 0 ? _a3 : "");
      if (params.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
      }
      const publicKeyHash = yield this.signer.publicKeyHash();
      const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;
      const estimate = yield this.estimate(params, this.estimator.transferTicket.bind(this.estimator));
      const prepared = yield this.prepare.transferTicket(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.TRANSFER_TICKET);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new TransferTicketOperation(hash2, content, source, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Reveal the current address. Will throw an error if the address is already revealed.
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param RevealParams operation parameter
   */
  reveal(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimateReveal = yield this.estimator.reveal(params);
      if (estimateReveal) {
        const estimated = yield this.estimate(params, () => __awaiter4(this, void 0, void 0, function* () {
          return estimateReveal;
        }));
        const prepared = yield this.prepare.reveal(Object.assign(Object.assign({}, params), estimated));
        const content = prepared.opOb.contents.find((op) => op.kind === OpKind.REVEAL);
        const opBytes = yield this.forge(prepared);
        const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
        return new RevealOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
      } else {
        throw new RevealOperationError(`The publicKeyHash '${publicKeyHash}' has already been revealed.`);
      }
    });
  }
  /**
   *
   * @description Register a Micheline expression in a global table of constants. Will sign and inject an operation using the current context
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param params registerGlobalConstant operation parameter
   */
  registerGlobalConstant(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.registerGlobalConstant.bind(this.estimator));
      const prepared = yield this.prepare.registerGlobalConstant(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.REGISTER_GLOBAL_CONSTANT);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new RegisterGlobalConstantOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Increase the paid storage of a smart contract
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param params increasePaidStorage operation parameter
   */
  increasePaidStorage(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (params.amount < 0) {
        throw new InvalidAmountError(params.amount.toString());
      }
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.increasePaidStorage.bind(this.estimator));
      const prepared = yield this.prepare.increasePaidStorage(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.INCREASE_PAID_STORAGE);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new IncreasePaidStorageOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Transfers the spendable balance of the delegate to destination when consensus_key is the active consensus key of delegate
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param params drainDelegate operation parameter
   */
  drainDelegate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const prepared = yield this.prepare.drainDelegate(params);
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.DRAIN_DELEGATE);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new DrainDelegateOperation(hash2, content, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Submit a ballot vote to a specified proposal
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param BallotParams Ballot operation parameter
   */
  ballot(params) {
    var _a3, _b;
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const sourceValidation = validateAddress((_a3 = params.source) !== null && _a3 !== void 0 ? _a3 : "");
      if (params.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
      }
      const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;
      const prepared = yield this.prepare.ballot(Object.assign(Object.assign({}, params), { source }));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.BALLOT);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new BallotOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Submit or upvote a proposal during the Proposal period
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param ProposalsParams Proposals operation parameter
   */
  proposals(params) {
    var _a3, _b;
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const sourceValidation = validateAddress((_a3 = params.source) !== null && _a3 !== void 0 ? _a3 : "");
      if (params.source && sourceValidation !== ValidationResult.VALID) {
        throw new InvalidAddressError(params.source, invalidDetail(sourceValidation));
      }
      const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;
      const prepared = yield this.prepare.proposals(Object.assign(Object.assign({}, params), { source }));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.PROPOSALS);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new ProposalsOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description Updates the consensus key of the baker to public_key starting from the current cycle plus PRESERVED_CYCLES + 1
   *
   * @returns An operation handle with the result from the rpc node
   *
   * @param UpdateConsensusKeyParams
   */
  updateConsensusKey(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.updateConsensusKey.bind(this.estimator));
      const prepared = yield this.prepare.updateConsensusKey(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.UPDATE_CONSENSUS_KEY);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new UpdateConsensusKeyOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   * @description Adds messages to the rollup inbox that can be executed/claimed after it gets cemented
   * @param SmartRollupAddMessagesParams
   * @returns An operation handle with results from the RPC node
   */
  smartRollupAddMessages(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.smartRollupAddMessages.bind(this.estimator));
      const prepared = yield this.prepare.smartRollupAddMessages(Object.assign(Object.assign({}, params), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.SMART_ROLLUP_ADD_MESSAGES);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new SmartRollupAddMessagesOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   * @description Creates a smart rollup originate operation
   * @param SmartRollupOriginateParams
   * @returns An operation handle with results from the RPC node
   */
  smartRollupOriginate(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const publicKeyHash = yield this.signer.publicKeyHash();
      const estimate = yield this.estimate(params, this.estimator.smartRollupOriginate.bind(this.estimator));
      const originationProof = yield this.rpc.getOriginationProof({
        kind: params.pvmKind,
        kernel: params.kernel
      });
      const completeParams = Object.assign(Object.assign({}, params), { originationProof });
      const prepared = yield this.prepare.smartRollupOriginate(Object.assign(Object.assign({}, completeParams), estimate));
      const content = prepared.opOb.contents.find((op) => op.kind === OpKind.SMART_ROLLUP_ORIGINATE);
      const opBytes = yield this.forge(prepared);
      const { hash: hash2, context: context2, forgedBytes, opResponse } = yield this.signAndInject(opBytes);
      return new SmartRollupOriginateOperation(hash2, content, publicKeyHash, forgedBytes, opResponse, context2);
    });
  }
  /**
   *
   * @description A failing_noop operation that is guaranteed to fail.
   *
   * @returns A FailingNoopOperation object representing the signed failing_noop operation
   *
   * @param params failingNoop operation parameter
   */
  failingNoop(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const op = {
        kind: OpKind.FAILING_NOOP,
        arbitrary: params.arbitrary
      };
      const hash2 = yield this.context.readProvider.getBlockHash(params.basedOnBlock);
      const forged = yield this.context.forger.forge({
        branch: hash2,
        contents: [op]
      });
      const { prefixSig } = yield this.signer.sign(forged, new Uint8Array([3]));
      return {
        signature: prefixSig,
        bytes: forged,
        signedContent: {
          branch: hash2,
          contents: [
            {
              kind: OpKind.FAILING_NOOP,
              arbitrary: params.arbitrary
            }
          ]
        }
      };
    });
  }
  /**
   *
   * @description Create an smart contract abstraction for the address specified.
   *
   * @param address Smart contract address
   * @throws {@link InvalidContractAddressError}
   */
  at(address, contractAbstractionComposer = (x) => x) {
    return __awaiter4(this, void 0, void 0, function* () {
      const addressValidation = validateContractAddress(address);
      if (addressValidation !== ValidationResult.VALID) {
        throw new InvalidContractAddressError(address, invalidDetail(addressValidation));
      }
      const rpc = this.context.withExtensions().rpc;
      const readProvider = this.context.withExtensions().readProvider;
      const script = yield readProvider.getScript(address, "head");
      const entrypoints = yield readProvider.getEntrypoints(address);
      const abs = new ContractAbstraction(address, script, this, this, entrypoints, rpc, readProvider);
      return contractAbstractionComposer(abs, this.context);
    });
  }
  /**
   *
   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch
   *
   * @returns A batch object from which we can add more operation or send a command to execute the batch
   *
   * @param params List of operation to batch together
   */
  batch(params) {
    const batch = new OperationBatch(this.context, this.estimator);
    if (Array.isArray(params)) {
      batch.with(params);
    }
    return batch;
  }
};
var MichelCodecParser = class {
  constructor(context2) {
    this.context = context2;
  }
  getNextProto() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this.context.proto) {
        const nextProto = yield this.context.readProvider.getNextProtocol("head");
        this.context.proto = nextProto;
      }
      return this.context.proto;
    });
  }
  parseScript(src) {
    return __awaiter4(this, void 0, void 0, function* () {
      const parser = new Parser({ protocol: yield this.getNextProto() });
      return parser.parseScript(src);
    });
  }
  parseMichelineExpression(src) {
    return __awaiter4(this, void 0, void 0, function* () {
      const parser = new Parser({ protocol: yield this.getNextProto() });
      return parser.parseMichelineExpression(src);
    });
  }
  parseJSON(src) {
    return __awaiter4(this, void 0, void 0, function* () {
      const parser = new Parser({ protocol: yield this.getNextProto() });
      return parser.parseJSON(src);
    });
  }
  prepareCodeOrigination(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      const parsedParams = params;
      parsedParams.code = yield this.formatCodeParam(params.code);
      if (params.init) {
        parsedParams.init = yield this.formatInitParam(params.init);
      } else if (params.storage) {
        const storageType = parsedParams.code.find((p) => "prim" in p && p.prim === "storage");
        if (!(storageType === null || storageType === void 0 ? void 0 : storageType.args)) {
          throw new InvalidCodeParameter("The storage section is missing from the script", params.code);
        }
        const schema = new Schema(storageType.args[0]);
        const globalconstantsHashAndValue = yield this.findGlobalConstantsHashAndValue(schema);
        if (Object.keys(globalconstantsHashAndValue).length !== 0) {
          const p = new Parser({ expandGlobalConstant: globalconstantsHashAndValue });
          const storageTypeNoGlobalConst = p.parseJSON(storageType.args[0]);
          const schemaNoGlobalConst = new Schema(storageTypeNoGlobalConst);
          parsedParams.init = schemaNoGlobalConst.Encode(params.storage);
        } else {
          parsedParams.init = schema.Encode(params.storage);
        }
        delete parsedParams.storage;
      }
      return parsedParams;
    });
  }
  formatCodeParam(code2) {
    return __awaiter4(this, void 0, void 0, function* () {
      let parsedCode;
      if (typeof code2 === "string") {
        const c = yield this.parseScript(code2);
        if (c === null) {
          throw new InvalidCodeParameter("Unable to parse", code2);
        }
        parsedCode = c;
      } else {
        const c = yield this.parseJSON(code2);
        const order = ["parameter", "storage", "code"];
        parsedCode = c.sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));
      }
      return parsedCode;
    });
  }
  formatInitParam(init) {
    return __awaiter4(this, void 0, void 0, function* () {
      let parsedInit;
      if (typeof init === "string") {
        const c = yield this.parseMichelineExpression(init);
        if (c === null) {
          throw new InvalidInitParameter("Invalid init parameter", init);
        }
        parsedInit = c;
      } else {
        parsedInit = yield this.parseJSON(init);
      }
      return parsedInit;
    });
  }
  findGlobalConstantsHashAndValue(schema) {
    return __awaiter4(this, void 0, void 0, function* () {
      const globalConstantTokens = schema.findToken("constant");
      const globalConstantsHashAndValue = {};
      if (globalConstantTokens.length !== 0) {
        for (const token of globalConstantTokens) {
          const tokenArgs = token.tokenVal.args;
          if (tokenArgs) {
            const expression = tokenArgs[0];
            if (expression.string) {
              const hash2 = expression.string;
              const michelineValue = yield this.context.globalConstantsProvider.getGlobalConstantByHash(hash2);
              Object.assign(globalConstantsHashAndValue, {
                [hash2]: michelineValue
              });
            }
          }
        }
      }
      return globalConstantsHashAndValue;
    });
  }
};
var RpcPacker = class {
  constructor(context2) {
    this.context = context2;
  }
  packData(data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.context.rpc.packData(data);
    });
  }
};
var GlobalConstantNotFound = class extends TaquitoError {
  constructor(hash2) {
    super();
    this.hash = hash2;
    this.name = "GlobalConstantNotFound";
    this.message = `Please load the value associated with the constant ${hash2} using the loadGlobalConstant method of the DefaultGlobalConstantsProvider.`;
  }
};
var UnconfiguredGlobalConstantsProviderError = class extends TezosToolkitConfigError {
  constructor() {
    super();
    this.name = "UnconfiguredGlobalConstantsProviderError";
    this.message = "No global constants provider has been configured. Please configure one by calling setGlobalConstantsProvider({globalConstantsProvider}) on your TezosToolkit instance.";
  }
};
var NoopGlobalConstantsProvider = class {
  getGlobalConstantByHash(_hash) {
    return __awaiter4(this, void 0, void 0, function* () {
      throw new UnconfiguredGlobalConstantsProviderError();
    });
  }
};
var RpcReadAdapter = class {
  constructor(rpc) {
    this.rpc = rpc;
  }
  /**
   * @description Access the balance of a contract.
   * @param address address from which we want to retrieve the balance
   * @param block from which we want to retrieve the balance
   * @returns the balance in mutez
   */
  getBalance(address, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getBalance(address, { block: String(block) });
    });
  }
  /**
   * @description Access the delegate of a contract, if any.
   * @param address contract address from which we want to retrieve the delegate (baker)
   * @param block from which we want to retrieve the delegate
   * @returns the public key hash of the delegate or null if no delegate
   */
  getDelegate(address, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getDelegate(address, { block: String(block) });
    });
  }
  /**
   * @description Access the next protocol hash
   * @param block from which we want to retrieve the next protocol hash
   */
  getNextProtocol(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const protocols2 = yield this.rpc.getProtocols({ block: String(block) });
      return protocols2.next_protocol;
    });
  }
  /**
   * @description Access protocol constants used in Taquito
   * @param block from which we want to retrieve the constants
   */
  getProtocolConstants(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { time_between_blocks, minimal_block_delay, hard_gas_limit_per_operation, hard_gas_limit_per_block, hard_storage_limit_per_operation, cost_per_byte, tx_rollup_origination_size, smart_rollup_origination_size } = yield this.rpc.getConstants({ block: String(block) });
      return {
        time_between_blocks,
        minimal_block_delay,
        hard_gas_limit_per_operation,
        hard_gas_limit_per_block,
        hard_storage_limit_per_operation,
        cost_per_byte,
        tx_rollup_origination_size,
        smart_rollup_origination_size
      };
    });
  }
  /**
   * @description Access the script (code and storage) of a smart contract
   * @param contract contract address from which we want to retrieve the script
   * @param block from which we want to retrieve the storage value
   * @returns Note: The code must be in the JSON format and not contain global constant
   */
  getScript(contract, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { script } = yield this.rpc.getContract(contract, { block: String(block) });
      return script;
    });
  }
  /**
   * @description Access the storage value of a contract
   * @param contract contract address from which we want to retrieve the storage
   * @param block from which we want to retrieve the storage value
   */
  getStorage(contract, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getStorage(contract, { block: String(block) });
    });
  }
  /**
   * @description Access the block hash
   */
  getBlockHash(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { hash: hash2 } = yield this.rpc.getBlockHeader({ block: String(block) });
      return hash2;
    });
  }
  /**
   * @description Access the block level
   */
  getBlockLevel(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { level } = yield this.rpc.getBlockHeader({ block: String(block) });
      return level;
    });
  }
  /**
   * @description Access the counter of an address
   * @param pkh from which we want to retrieve the counter
   * @param block from which we want to retrieve the counter
   */
  getCounter(pkh, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { counter } = yield this.rpc.getContract(pkh, { block: String(block) });
      return counter || "0";
    });
  }
  /**
   * @description Access the timestamp of a block
   * @param block from which we want to retrieve the timestamp
   * @returns date ISO format zero UTC offset ("2022-01-19T22:37:07Z")
   */
  getBlockTimestamp(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { timestamp: timestamp2 } = yield this.rpc.getBlockHeader({ block: String(block) });
      return timestamp2;
    });
  }
  /**
   * @description Access the value associated with a key in a big map.
   * @param bigMapQuery Big Map ID and Expression hash to query (A b58check encoded Blake2b hash of the expression)
   * @param block from which we want to retrieve the big map value
   */
  getBigMapValue(bigMapQuery, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getBigMapExpr(bigMapQuery.id, bigMapQuery.expr, {
        block: String(block)
      });
    });
  }
  /**
   * @description Access the value associated with a sapling state ID.
   * @param id Sapling state ID
   * @param block from which we want to retrieve the sapling state
   */
  getSaplingDiffById(saplingStateQuery, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getSaplingDiffById(saplingStateQuery.id, { block: String(block) });
    });
  }
  /**
   * @description Access the sapling state of a smart contract.
   * @param contractAddress The address of the smart contract
   * @param block The block you want to retrieve the sapling state from
   */
  getSaplingDiffByContract(contractAddress, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getSaplingDiffByContract(contractAddress, { block: String(block) });
    });
  }
  /**
   * @description Return the list of entrypoints of the contract
   * @param contract address of the contract we want to get the entrypoints of
   */
  getEntrypoints(contract) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getEntrypoints(contract);
    });
  }
  /**
   * @description Access the chain id
   */
  getChainId() {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getChainId();
    });
  }
  /**
   * @description Indicate if an account is revealed
   * @param publicKeyHash of the account
   * @param block from which we want to know if the account is revealed
   */
  isAccountRevealed(publicKeyHash, block) {
    return __awaiter4(this, void 0, void 0, function* () {
      const manager = yield this.rpc.getManagerKey(publicKeyHash, { block: String(block) });
      const haveManager = manager && typeof manager === "object" ? !!manager.key : !!manager;
      return haveManager;
    });
  }
  /**
   * @description Return all the information about a block
   * @param block from which we want to retrieve the information
   */
  getBlock(block) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.rpc.getBlock({ block: String(block) });
    });
  }
  /**
   * @description Return a list of the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.
   * @param block from which we want to retrieve the information
   */
  getLiveBlocks(block) {
    return this.rpc.getLiveBlocks({ block: String(block) });
  }
};
var UnsupportedEventError = class extends ParameterValidationError {
  constructor(type) {
    super();
    this.type = type;
    this.name = "UnsupportedEventError";
    this.message = `Unsupported event type "${type}" expecting one of the "data", "error", or "close".`;
  }
};
var InvalidFilterExpressionError = class extends ParameterValidationError {
  constructor(invalidExpression) {
    super();
    this.invalidExpression = invalidExpression;
    this.name = "InvalidFilterExpressionError";
    this.message = `Invalid filter expression expecting the object to contain either and/or property`;
  }
};
var opHashFilter = (op, filter2) => op.hash === filter2.opHash;
var sourceFilter = (x, filter2) => {
  switch (x.kind) {
    case "endorsement":
      return "metadata" in x && x.metadata.delegate === filter2.source;
    case "activate_account":
      return "metadata" in x && x.pkh === filter2.source;
    default:
      return "source" in x && x.source === filter2.source;
  }
};
var kindFilter = (x, filter2) => "kind" in x && x.kind === filter2.kind;
var destinationFilter = (x, filter2) => {
  switch (x.kind) {
    case "delegation":
      return x.delegate === filter2.destination;
    case "origination":
      if ("metadata" in x && "operation_result" in x.metadata && "originated_contracts" in x.metadata.operation_result && Array.isArray(x.metadata.operation_result.originated_contracts)) {
        return x.metadata.operation_result.originated_contracts.some((contract) => contract === filter2.destination);
      }
      break;
    case "transaction":
      return x.destination === filter2.destination;
    default:
      return false;
  }
};
var eventFilter = (result, address, tag, excludeFailedOperations) => {
  if (result.kind !== "event") {
    return false;
  }
  if (tag && result.tag !== tag) {
    return false;
  }
  if (address && result.source !== address) {
    return false;
  }
  if (excludeFailedOperations && result.result.status !== "applied") {
    return false;
  }
  return true;
};
var evaluateOpFilter = (op, filter2) => {
  if ("opHash" in filter2) {
    return opHashFilter(op, filter2);
  } else if ("source" in filter2) {
    return sourceFilter(op, filter2);
  } else if ("kind" in filter2) {
    return kindFilter(op, filter2);
  } else if ("destination" in filter2) {
    return destinationFilter(op, filter2);
  }
  return false;
};
var evaluateExpression = (op, exp) => {
  if (Array.isArray(exp.and)) {
    return exp.and.every((x) => evaluateFilter(op, x));
  } else if (Array.isArray(exp.or)) {
    return exp.or.some((x) => evaluateFilter(op, x));
  } else {
    throw new InvalidFilterExpressionError(exp);
  }
};
var evaluateFilter = (op, filter2) => {
  const filters = [];
  if (!Array.isArray(filter2)) {
    filters.push(filter2);
  } else {
    filters.push(...filter2);
  }
  return filters.every((filterOrExp) => {
    if ("and" in filterOrExp || "or" in filterOrExp) {
      return evaluateExpression(op, filterOrExp);
    } else {
      return evaluateOpFilter(op, filterOrExp);
    }
  });
};
var ObservableSubscription = class {
  constructor(obs, shouldRetry = false, operatorFunction = retry()) {
    this.shouldRetry = shouldRetry;
    this.operatorFunction = operatorFunction;
    this.errorListeners = [];
    this.messageListeners = [];
    this.closeListeners = [];
    this.completed$ = new Subject();
    obs.pipe(takeUntil(this.completed$), tap((data) => {
      this.call(this.messageListeners, data);
    }, (error) => {
      this.call(this.errorListeners, error);
    }, () => {
      this.call(this.closeListeners);
    }), this.shouldRetry ? operatorFunction : tap(), catchError(() => NEVER)).subscribe();
  }
  call(listeners, value) {
    for (const l of listeners) {
      try {
        l(value);
      } catch (ex) {
        console.error(ex);
      }
    }
  }
  remove(listeners, value) {
    const idx = listeners.indexOf(value);
    if (idx !== -1) {
      listeners.splice(idx, 1);
    }
  }
  on(type, cb) {
    switch (type) {
      case "data":
        this.messageListeners.push(cb);
        break;
      case "error":
        this.errorListeners.push(cb);
        break;
      case "close":
        this.closeListeners.push(cb);
        break;
      default:
        throw new UnsupportedEventError(type);
    }
  }
  off(type, cb) {
    switch (type) {
      case "data":
        this.remove(this.messageListeners, cb);
        break;
      case "error":
        this.remove(this.errorListeners, cb);
        break;
      case "close":
        this.remove(this.closeListeners, cb);
        break;
      default:
        throw new UnsupportedEventError(type);
    }
  }
  close() {
    this.completed$.next();
  }
};
var defaultConfigStreamer = {
  shouldObservableSubscriptionRetry: false,
  observableSubscriptionRetryFunction: retry()
};
var getLastBlock = (context2) => {
  return from(context2.rpc.getBlock()).pipe(first());
};
var applyFilter = (filter2) => concatMap((block) => {
  return new Observable((sub) => {
    for (const ops of block.operations) {
      for (const op of ops) {
        for (const content of op.contents) {
          if (evaluateFilter(Object.assign({ hash: op.hash }, content), filter2)) {
            sub.next(Object.assign({ hash: op.hash }, content));
          }
        }
      }
    }
    sub.complete();
  });
});
var applyEventFilter = (filter2) => concatMap((block) => {
  return new Observable((sub) => {
    for (const ops of block.operations) {
      for (const op of ops) {
        for (const content of op.contents) {
          const tx = content;
          const internalOpResults = tx.metadata.internal_operation_results;
          if (internalOpResults) {
            for (const event of internalOpResults) {
              if (eventFilter(event, filter2 === null || filter2 === void 0 ? void 0 : filter2.address, filter2 === null || filter2 === void 0 ? void 0 : filter2.tag, filter2 === null || filter2 === void 0 ? void 0 : filter2.excludeFailedOperations)) {
                sub.next(Object.assign({ opHash: op.hash, blockHash: block.hash, level: block.header.level }, event));
              }
            }
          }
        }
      }
    }
    sub.complete();
  });
});
var PollingSubscribeProvider = class {
  constructor(context2, config2 = {}) {
    this.context = context2;
    this._config$ = new BehaviorSubject(Object.assign(Object.assign({}, defaultConfigStreamer), config2));
    this.timer$ = this._config$.pipe(pluck("pollingIntervalMilliseconds"), switchMap((pollingIntervalMilliseconds) => {
      if (!pollingIntervalMilliseconds) {
        return from(this.getConfirmationPollingInterval()).pipe(switchMap((interval2) => {
          return timer(0, interval2);
        }));
      } else {
        return timer(0, pollingIntervalMilliseconds);
      }
    }));
    this.newBlock$ = this.timer$.pipe(switchMap(() => getLastBlock(this.context)), distinctUntilKeyChanged("hash"), publish(), refCount());
  }
  get config() {
    return this._config$.getValue();
  }
  getConfirmationPollingInterval() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this.config.pollingIntervalMilliseconds) {
        const defaultIntervalTestnetsMainnet = 5e3;
        const defaultIntervalSandbox = 1e3;
        try {
          const constants = yield this.context.readProvider.getProtocolConstants("head");
          const blockTime = constants.minimal_block_delay ? constants.minimal_block_delay.multipliedBy(1e3) : constants.time_between_blocks ? constants.time_between_blocks[0].multipliedBy(1e3) : new bignumber_default(defaultIntervalTestnetsMainnet);
          const confirmationPollingInterval = blockTime.dividedBy(3);
          this.config.pollingIntervalMilliseconds = confirmationPollingInterval.toNumber() === 0 ? defaultIntervalSandbox : confirmationPollingInterval.toNumber();
        } catch (exception) {
          return defaultIntervalTestnetsMainnet;
        }
      }
      return this.config.pollingIntervalMilliseconds;
    });
  }
  subscribeBlock(_filter) {
    return new ObservableSubscription(this.newBlock$, this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);
  }
  subscribe(_filter) {
    return new ObservableSubscription(this.newBlock$.pipe(pluck("hash")), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);
  }
  subscribeOperation(filter2) {
    return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter2)), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);
  }
  subscribeEvent(eventFilter2) {
    return new ObservableSubscription(this.newBlock$.pipe(applyEventFilter(eventFilter2)), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);
  }
};
var TaquitoLocalForger = class {
  constructor(context2) {
    this.context = context2;
  }
  getNextProto() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!this.context.proto) {
        const nextProto = yield this.context.readProvider.getNextProtocol("head");
        this.context.proto = nextProto;
      }
      return this.context.proto;
    });
  }
  forge({ branch, contents }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const forger = new LocalForger(yield this.getNextProto());
      return forger.forge({ branch, contents });
    });
  }
};
var defaultConfigConfirmation = {
  defaultConfirmationCount: 1,
  confirmationPollingTimeoutSecond: 180
};
var Context = class _Context {
  constructor(_rpc, _signer = new NoopSigner(), _proto, _config = new BehaviorSubject(Object.assign({}, defaultConfigConfirmation)), forger, injector, packer, wallet, parser, globalConstantsProvider, readProvider, stream) {
    this._rpc = _rpc;
    this._signer = _signer;
    this._proto = _proto;
    this._config = _config;
    this.providerDecorator = [];
    this.tz = new RpcTzProvider(this);
    this.estimate = new RPCEstimateProvider(this);
    this.contract = new RpcContractProvider(this, this.estimate);
    this.prepare = new PrepareProvider(this);
    this.batch = new RPCBatchProvider(this, this.estimate);
    this.wallet = new Wallet(this);
    this.withExtensions = () => {
      let clonedContext = this.clone();
      this.providerDecorator.forEach((decorator) => {
        clonedContext = decorator(clonedContext);
      });
      return clonedContext;
    };
    if (typeof this._rpc === "string") {
      this._rpcClient = new RpcClient(this._rpc);
    } else {
      this._rpcClient = this._rpc;
    }
    this._forger = forger ? forger : new TaquitoLocalForger(this);
    this._injector = injector ? injector : new RpcInjector(this);
    this.operationFactory = new OperationFactory(this);
    this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);
    this._parser = parser ? parser : new MichelCodecParser(this);
    this._packer = packer ? packer : new RpcPacker(this);
    this._globalConstantsProvider = globalConstantsProvider ? globalConstantsProvider : new NoopGlobalConstantsProvider();
    this._readProvider = readProvider ? readProvider : new RpcReadAdapter(this._rpcClient);
    this._stream = stream ? stream : new PollingSubscribeProvider(this);
  }
  get config() {
    return this._config.getValue();
  }
  set config(value) {
    this._config.next(Object.assign({}, value));
  }
  setPartialConfig(value) {
    this._config.next(Object.assign(Object.assign({}, this._config.getValue()), value));
  }
  get rpc() {
    return this._rpcClient;
  }
  set rpc(value) {
    this._rpcClient = value;
  }
  get injector() {
    return this._injector;
  }
  set injector(value) {
    this._injector = value;
  }
  get forger() {
    return this._forger;
  }
  set forger(value) {
    this._forger = value;
  }
  get signer() {
    return this._signer;
  }
  set signer(value) {
    this._signer = value;
  }
  get walletProvider() {
    return this._walletProvider;
  }
  set walletProvider(value) {
    this._walletProvider = value;
  }
  set proto(value) {
    this._proto = value;
  }
  get proto() {
    return this._proto;
  }
  get parser() {
    return this._parser;
  }
  set parser(value) {
    this._parser = value;
  }
  get packer() {
    return this._packer;
  }
  set packer(value) {
    this._packer = value;
  }
  get globalConstantsProvider() {
    return this._globalConstantsProvider;
  }
  set globalConstantsProvider(value) {
    this._globalConstantsProvider = value;
  }
  get readProvider() {
    return this._readProvider;
  }
  set readProvider(value) {
    this._readProvider = value;
  }
  get stream() {
    return this._stream;
  }
  set stream(value) {
    this._stream = value;
  }
  isAnyProtocolActive(protocol = []) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (this._proto) {
        return protocol.includes(this._proto);
      } else {
        const next_protocol = yield this.readProvider.getNextProtocol("head");
        return protocol.includes(next_protocol);
      }
    });
  }
  isAnySignerConfigured() {
    return !(this.signer instanceof NoopSigner);
  }
  /**
   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation
   */
  clone() {
    return new _Context(this.rpc, this.signer, this.proto, this._config, this.forger, this._injector, this.packer, this._walletProvider, this._parser, this._globalConstantsProvider, this._readProvider, this._stream);
  }
  /**
   * @description Allows extensions set on the TezosToolkit to inject logic into the context
   */
  registerProviderDecorator(fx) {
    this.providerDecorator.push(fx);
  }
};
var VERSION = {
  "commitHash": "b85fc404e34545a518215e449b3f1253f4520eec",
  "version": "17.2.0"
};
var ForgingMismatchError = class extends TaquitoError {
  constructor(results) {
    super();
    this.results = results;
    this.name = "ForgingMismatchError";
    this.message = `Forging mismatch error`;
  }
};
var UnspecifiedForgerError = class extends TezosToolkitConfigError {
  constructor() {
    super();
    this.name = "UnspecifiedForgerError";
    this.message = "No forger has been configured. Please configure new CompositeForger([rpcForger, localForger]) with your TezosToolkit instance.";
  }
};
var CompositeForger = class {
  constructor(forgers) {
    this.forgers = forgers;
    if (forgers.length === 0) {
      throw new UnspecifiedForgerError();
    }
  }
  forge({ branch, contents }) {
    return __awaiter4(this, void 0, void 0, function* () {
      const results = yield Promise.all(this.forgers.map((forger) => {
        return forger.forge({ branch, contents });
      }));
      if (results.length === 0) {
        throw new UnspecifiedForgerError();
      }
      let lastResult = results.pop();
      while (results.length) {
        const currentResult = results.pop();
        if (currentResult !== lastResult) {
          throw new ForgingMismatchError([lastResult, currentResult]);
        }
        lastResult = currentResult;
      }
      return lastResult;
    });
  }
};
var RpcForger = class {
  constructor(context2) {
    this.context = context2;
  }
  forge({ branch, contents }) {
    return this.context.rpc.forgeOperations({ branch, contents });
  }
};
var NoopParser = class {
  prepareCodeOrigination(params) {
    return __awaiter4(this, void 0, void 0, function* () {
      return params;
    });
  }
};
var MichelCodecPacker = class {
  packData(data) {
    return __awaiter4(this, void 0, void 0, function* () {
      const { bytes } = packDataBytes(data.data, data.type);
      return { packed: bytes };
    });
  }
};
var DefaultGlobalConstantsProvider = class {
  constructor() {
    this._globalConstantsLibrary = {};
  }
  /**
   *
   * @description Allows to load global constant hashes and their corresponding Michelson JSON values
   */
  loadGlobalConstant(globalConstant) {
    for (const hash2 in globalConstant) {
      Object.assign(this._globalConstantsLibrary, {
        [hash2]: globalConstant[hash2]
      });
    }
  }
  /**
   *
   * @description Retrieve the Michelson value of a global constant based on its hash
   *
   * @param hash a string representing the global constant hash
   * @returns Expr, the JSON Michelson value
   */
  getGlobalConstantByHash(hash2) {
    return __awaiter4(this, void 0, void 0, function* () {
      const value = this._globalConstantsLibrary[hash2];
      if (!value) {
        throw new GlobalConstantNotFound(hash2);
      }
      return value;
    });
  }
};
var TezosToolkit = class {
  constructor(_rpc) {
    this._rpc = _rpc;
    this._options = {};
    this.format = format;
    if (typeof this._rpc === "string") {
      this._rpcClient = new RpcClient(this._rpc);
    } else {
      this._rpcClient = this._rpc;
    }
    this._context = new Context(_rpc);
    this._wallet = new Wallet(this._context);
    this.setProvider({ rpc: this._rpcClient });
    this.batch = this._context.batch.batch.bind(this._context.batch);
  }
  /**
   * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth
   *
   * @param options rpc url or rpcClient to use to interact with the Tezos network
   *
   * @example Tezos.setProvider({rpc: 'https://mainnet.api.tez.ie/', signer: new InMemorySigner.fromSecretKey(“edsk...”)})
   * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})
   *
   */
  setProvider({ rpc, stream, signer, protocol, config: config2, forger, wallet, packer, globalConstantsProvider, readProvider, parserProvider, injectorProvider }) {
    this.setRpcProvider(rpc);
    this.setStreamProvider(stream);
    this.setSignerProvider(signer);
    this.setForgerProvider(forger);
    this.setWalletProvider(wallet);
    this.setPackerProvider(packer);
    this.setGlobalConstantsProvider(globalConstantsProvider);
    this.setReadProvider(readProvider);
    this.setParserProvider(parserProvider);
    this.setInjectorProvider(injectorProvider);
    this._context.proto = protocol;
    if (config2) {
      this._context.setPartialConfig(config2);
    }
  }
  /**
   * @description Sets signer provider on the Tezos Taquito instance.
   *
   * @param options signer to use to interact with the Tezos network
   *
   * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))
   *
   */
  setSignerProvider(signer) {
    if (!this._options.signer && typeof signer === "undefined") {
      this._context.signer = new NoopSigner();
      this._options.signer = signer;
    } else if (typeof signer !== "undefined") {
      this._context.signer = signer;
      this._options.signer = signer;
    }
  }
  /**
   * @description Sets rpc provider on the Tezos Taquito instance
   *
   * @param options rpc url or rpcClient to use to interact with the Tezos network
   *
   * @example Tezos.setRpcProvider('https://mainnet.api.tez.ie/')
   *
   */
  setRpcProvider(rpc) {
    if (typeof rpc === "string") {
      this._rpcClient = new RpcClient(rpc);
    } else if (rpc === void 0)
      ;
    else {
      this._rpcClient = rpc;
    }
    this._options.rpc = this._rpcClient;
    this._context.rpc = this._rpcClient;
  }
  /**
   * @description Sets forger provider on the Tezos Taquito instance
   * The `LocalForger` from `@taquito/local-forging` is set by default.
   *
   * @param options forger to use to interact with the Tezos network
   *
   * @example Tezos.setForgerProvider(this.getFactory(RpcForger)())
   *
   */
  setForgerProvider(forger) {
    if (typeof forger !== "undefined") {
      this._options.forger = forger;
      this._context.forger = forger;
    } else if (this._options.forger === void 0) {
      const f = this.getFactory(TaquitoLocalForger)();
      this._options.forger = f;
      this._context.forger = f;
    }
  }
  /**
   * @description Sets stream provider on the Tezos Taquito instance
   *
   * @param options stream to use to interact with the Tezos network
   *
   * @example Tezos.setStreamProvider(...)
   *
   */
  setStreamProvider(stream) {
    if (typeof stream === "string") {
      const s = new PollingSubscribeProvider(new Context(new RpcClient(stream)));
      this._options.stream = s;
      this._context.stream = s;
    } else if (typeof stream !== "undefined") {
      this._options.stream = stream;
      this._context.stream = stream;
    } else if (this._options.stream === void 0) {
      const s = this.getFactory(PollingSubscribeProvider)();
      this._options.stream = s;
      this._context.stream = s;
    }
  }
  /**
   * @description Sets wallet provider on the Tezos Taquito instance
   *
   * @param options wallet to use to interact with the Tezos network
   *
   * @example Tezos.setWalletProvider(...)
   *
   */
  setWalletProvider(wallet) {
    if (!this._options.wallet && typeof wallet === "undefined") {
      const w = this.getFactory(LegacyWalletProvider)();
      this._options.wallet = w;
      this._context.walletProvider = w;
    } else if (typeof wallet !== "undefined") {
      this._options.wallet = wallet;
      this._context.walletProvider = wallet;
    }
  }
  /**
   * @description Sets Packer provider on the Tezos Taquito instance
   *
   * @param options packer to use to interact with the Tezos network
   *
   * @example Tezos.setPackerProvider(new MichelCodecPacker())
   *
   */
  setPackerProvider(packer) {
    if (!this._options.packer && typeof packer === "undefined") {
      const p = this.getFactory(RpcPacker)();
      this._context.packer = p;
      this._options.packer = p;
    } else if (typeof packer !== "undefined") {
      this._context.packer = packer;
      this._options.packer = packer;
    }
  }
  /**
   * @description Sets global constants provider on the Tezos Taquito instance
   *
   * @param options globalConstantsProvider to use to interact with the Tezos network
   *
   * @example
   * ```
   * const globalConst = new DefaultGlobalConstantsProvider();
   * globalConst.loadGlobalConstant({
   *  "expruu5BTdW7ajqJ9XPTF3kgcV78pRiaBW3Gq31mgp3WSYjjUBYxre": { prim: "int" },
   *  // ...
   * })
   * Tezos.setGlobalConstantsProvider(globalConst);
   * ```
   *
   */
  setGlobalConstantsProvider(globalConstantsProvider) {
    if (!this._options.globalConstantsProvider && typeof globalConstantsProvider === "undefined") {
      const g = new NoopGlobalConstantsProvider();
      this._context.globalConstantsProvider = g;
      this._options.globalConstantsProvider = g;
    } else if (typeof globalConstantsProvider !== "undefined") {
      this._context.globalConstantsProvider = globalConstantsProvider;
      this._options.globalConstantsProvider = globalConstantsProvider;
    }
  }
  /**
   * @description Sets read provider on the Tezos Taquito instance
   * By default reads are done from the RPC usign the RpcReadAdapter class, this can be overridden to read from an indexer that implements the TzReadProvider interface
   *
   * @param options TzReadProvider to use to interact with the Tezos network
   *
   */
  setReadProvider(readProvider) {
    const readP = readProvider ? readProvider : new RpcReadAdapter(this._context.rpc);
    this._options.readProvider = readP;
    this._context.readProvider = readP;
  }
  /**
   * @description Sets parser provider on the Tezos Taquito instance
   *
   * @param options parserProvider to use to interact with the Tezos network
   *
   */
  setParserProvider(parserProvider) {
    if (!this._options.parserProvider && typeof parserProvider === "undefined") {
      const p = new MichelCodecParser(this._context);
      this._context.parser = p;
      this._options.parserProvider = p;
    } else if (typeof parserProvider !== "undefined") {
      this._context.parser = parserProvider;
      this._options.parserProvider = parserProvider;
    }
  }
  /**
   * @description Sets injector provider on the Tezos Taquito instance
   *
   * @param options Injector to use to interact with the Tezos network by default RpcInjector
   *
   */
  setInjectorProvider(injectorProvider) {
    if (!this._options.injectorProvider && typeof injectorProvider === "undefined") {
      const i = new RpcInjector(this._context);
      this._context.injector = i;
      this._options.injectorProvider = i;
    } else if (typeof injectorProvider !== "undefined") {
      this._context.injector = injectorProvider;
      this._options.injectorProvider = injectorProvider;
    }
  }
  /**
   * @description Provide access to tezos account management
   */
  get tz() {
    return this._context.tz;
  }
  /**
   * @description Provide access to smart contract utilities
   */
  get contract() {
    return this._context.contract;
  }
  /**
   * @description Provide access to tezos operation preparation utilities
   */
  get prepare() {
    return this._context.prepare;
  }
  get wallet() {
    return this._wallet;
  }
  get operation() {
    return this._context.operationFactory;
  }
  /**
   * @description Provide access to operation estimation utilities
   */
  get estimate() {
    return this._context.estimate;
  }
  /**
   * @description Provide access to streaming utilities backed by an streamer implementation
   */
  get stream() {
    return this._context.stream;
  }
  /**
   * @description Provide access to the currently used rpc client
   */
  get rpc() {
    return this._context.rpc;
  }
  /**
   * @description Provide access to the currently used signer
   */
  get signer() {
    return this._context.signer;
  }
  /**
   * @description Provide access to the currently used globalConstantsProvider
   */
  get globalConstants() {
    return this._context.globalConstantsProvider;
  }
  /**
   * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.
   *
   * @param module extension to add to the TezosToolkit instance
   *
   * @example Tezos.addExtension(new Tzip16Module());
   */
  addExtension(module) {
    if (Array.isArray(module)) {
      module.forEach((extension) => extension.configureContext(this._context));
    } else {
      module.configureContext(this._context);
    }
  }
  getFactory(ctor) {
    return (...args) => {
      return new ctor(this._context, ...args);
    };
  }
  /**
   * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from
   */
  getVersionInfo() {
    return VERSION;
  }
};

export {
  require_typedarray_to_buffer,
  HttpBackend,
  hex2buf,
  mergebuf,
  buf2hex,
  char2Bytes,
  bytes2Char,
  OpKind,
  MichelsonMap,
  Schema,
  ParameterSchema,
  UnitValue,
  RpcInjector,
  DEFAULT_GAS_LIMIT,
  DEFAULT_FEE,
  DEFAULT_STORAGE_LIMIT,
  COST_PER_BYTE,
  Protocols,
  protocols,
  ChainIds,
  getRevealGasLimit,
  InvalidParameterError,
  InvalidDelegationSource,
  InvalidCodeParameter,
  InvalidInitParameter,
  ViewSimulationError,
  validateAndExtractFailwith,
  InvalidViewSimulationContext,
  RevealOperationError,
  OriginationParameterError,
  InvalidBalanceError,
  createActivationOperation,
  createOriginationOperation,
  createTransferOperation,
  createSetDelegateOperation,
  createRegisterDelegateOperation,
  createRevealOperation,
  createRegisterGlobalConstantOperation,
  createTransferTicketOperation,
  createIncreasePaidStorageOperation,
  createDrainDelegateOperation,
  createBallotOperation,
  createProposalsOperation,
  createUpdateConsensusKeyOperation,
  createSmartRollupAddMessagesOperation,
  createSmartRollupOriginateOperation,
  TezosOperationError,
  TezosPreapplyFailureError,
  InvalidEstimateValueError,
  Operation,
  BatchOperation,
  WalletOperationBatch,
  Wallet,
  WalletOperation,
  TransactionWalletOperation,
  OriginationWalletOperation,
  DelegationWalletOperation,
  LegacyWalletProvider,
  ContractMethodObject,
  ContractMethod,
  DEFAULT_SMART_CONTRACT_METHOD_NAME,
  ContractView,
  ContractAbstraction,
  MANAGER_LAMBDA,
  VIEW_LAMBDA,
  compose,
  SaplingStateAbstraction,
  PrepareProvider,
  OperationBatch,
  Estimate,
  RevealEstimateError,
  RPCEstimateProvider,
  DelegateOperation,
  OriginationOperation,
  TransactionOperation,
  BigMapAbstraction,
  BallotOperation,
  DrainDelegateOperation,
  MichelCodecParser,
  RpcPacker,
  GlobalConstantNotFound,
  UnconfiguredGlobalConstantsProviderError,
  RpcReadAdapter,
  ObservableSubscription,
  PollingSubscribeProvider,
  TaquitoLocalForger,
  defaultConfigConfirmation,
  Context,
  CompositeForger,
  RpcForger,
  NoopParser,
  MichelCodecPacker,
  DefaultGlobalConstantsProvider,
  TezosToolkit
};
/*! Bundled license information:

typedarray-to-buffer/index.js:
  (*! typedarray-to-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=chunk-DJKR7I7G.js.map
