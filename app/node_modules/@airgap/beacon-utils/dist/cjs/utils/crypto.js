"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signMessage = exports.recipientString = exports.prefixPublicKey = exports.getAddressFromPublicKey = exports.openCryptobox = exports.sealCryptobox = exports.decryptCryptoboxPayload = exports.encryptCryptoboxPayload = exports.getKeypairFromSeed = exports.getHexHash = exports.toHex = exports.secretbox_MACBYTES = exports.secretbox_NONCEBYTES = void 0;
var bs58check = require("bs58check");
var nacl_1 = require("@stablelib/nacl");
var random_1 = require("@stablelib/random");
var utf8_1 = require("@stablelib/utf8");
var blake2b_1 = require("@stablelib/blake2b");
var ed25519_1 = require("@stablelib/ed25519");
var ed25519_2 = require("@stablelib/ed25519");
var blake2b_2 = require("@stablelib/blake2b");
var bytes_1 = require("@stablelib/bytes");
var ed25519_3 = require("@stablelib/ed25519");
exports.secretbox_NONCEBYTES = 24; // crypto_secretbox_NONCEBYTES
exports.secretbox_MACBYTES = 16; // crypto_secretbox_MACBYTES
/* eslint-disable prefer-arrow/prefer-arrow-functions */
/**
 * Convert a value to hex
 *
 * @param value
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function toHex(value) {
    return Buffer.from(value).toString('hex');
}
exports.toHex = toHex;
/**
 * Get the hex hash of a value
 *
 * @param key
 */
function getHexHash(key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (typeof key === 'string') {
                return [2 /*return*/, toHex((0, blake2b_1.hash)((0, utf8_1.encode)(key), 32))];
            }
            return [2 /*return*/, toHex((0, blake2b_1.hash)(key, 32))];
        });
    });
}
exports.getHexHash = getHexHash;
/**
 * Get a keypair from a seed
 *
 * @param seed
 */
function getKeypairFromSeed(seed) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, ed25519_1.generateKeyPairFromSeed)((0, blake2b_1.hash)((0, utf8_1.encode)(seed), 32))];
        });
    });
}
exports.getKeypairFromSeed = getKeypairFromSeed;
/**
 * Encrypt a message with a shared key
 *
 * @param message
 * @param sharedKey
 */
function encryptCryptoboxPayload(message, sharedKey) {
    return __awaiter(this, void 0, void 0, function () {
        var nonce, combinedPayload;
        return __generator(this, function (_a) {
            nonce = Buffer.from((0, random_1.randomBytes)(exports.secretbox_NONCEBYTES));
            combinedPayload = Buffer.concat([
                nonce,
                Buffer.from((0, nacl_1.secretBox)(sharedKey, nonce, Buffer.from(message, 'utf8')))
            ]);
            return [2 /*return*/, toHex(combinedPayload)];
        });
    });
}
exports.encryptCryptoboxPayload = encryptCryptoboxPayload;
/**
 * Decrypt a message with a shared key
 *
 * @param payload
 * @param sharedKey
 */
function decryptCryptoboxPayload(payload, sharedKey) {
    return __awaiter(this, void 0, void 0, function () {
        var nonce, ciphertext, openBox;
        return __generator(this, function (_a) {
            nonce = payload.slice(0, exports.secretbox_NONCEBYTES);
            ciphertext = payload.slice(exports.secretbox_NONCEBYTES);
            openBox = (0, nacl_1.openSecretBox)(sharedKey, nonce, ciphertext);
            if (!openBox) {
                throw new Error('Decryption failed');
            }
            return [2 /*return*/, Buffer.from(openBox).toString('utf8')];
        });
    });
}
exports.decryptCryptoboxPayload = decryptCryptoboxPayload;
/**
 * Encrypt a message with a public key
 *
 * @param payload
 * @param publicKey
 */
function sealCryptobox(payload, otherPublicKey) {
    return __awaiter(this, void 0, void 0, function () {
        var kxOtherPublicKey, keypair, state, nonce, bytesPayload, encryptedMessage;
        return __generator(this, function (_a) {
            kxOtherPublicKey = (0, ed25519_2.convertPublicKeyToX25519)(Buffer.from(otherPublicKey)) // Secret bytes to scalar bytes
            ;
            keypair = (0, nacl_1.generateKeyPair)();
            state = new blake2b_2.BLAKE2b(24);
            nonce = state.update(keypair.publicKey, 32).update(kxOtherPublicKey, 32).digest();
            bytesPayload = typeof payload === 'string' ? (0, utf8_1.encode)(payload) : payload;
            encryptedMessage = (0, nacl_1.box)(kxOtherPublicKey, keypair.secretKey, nonce, bytesPayload);
            return [2 /*return*/, toHex((0, bytes_1.concat)(keypair.publicKey, encryptedMessage))];
        });
    });
}
exports.sealCryptobox = sealCryptobox;
/**
 * Decrypt a message with public + private key
 *
 * @param encryptedPayload
 * @param publicKey
 * @param privateKey
 */
function openCryptobox(encryptedPayload, publicKey, privateKey) {
    return __awaiter(this, void 0, void 0, function () {
        var kxSelfPrivateKey, kxSelfPublicKey, bytesPayload, epk, ciphertext, state, nonce, decryptedMessage2;
        return __generator(this, function (_a) {
            kxSelfPrivateKey = (0, ed25519_2.convertSecretKeyToX25519)(Buffer.from(privateKey)) // Secret bytes to scalar bytes
            ;
            kxSelfPublicKey = (0, ed25519_2.convertPublicKeyToX25519)(Buffer.from(publicKey)) // Secret bytes to scalar bytes
            ;
            bytesPayload = typeof encryptedPayload === 'string' ? (0, utf8_1.encode)(encryptedPayload) : encryptedPayload;
            epk = bytesPayload.slice(0, 32);
            ciphertext = bytesPayload.slice(32);
            state = new blake2b_2.BLAKE2b(24);
            nonce = state.update(epk, 32).update(kxSelfPublicKey, 32).digest();
            decryptedMessage2 = (0, nacl_1.openBox)(epk, kxSelfPrivateKey, nonce, ciphertext);
            if (!decryptedMessage2) {
                throw new Error('Decryption failed');
            }
            return [2 /*return*/, Buffer.from(decryptedMessage2).toString()];
        });
    });
}
exports.openCryptobox = openCryptobox;
/**
 * Get an address from the public key
 *
 * @param publicKey
 */
function getAddressFromPublicKey(publicKey) {
    return __awaiter(this, void 0, void 0, function () {
        var prefixes, prefix, plainPublicKey, entries, index, _a, key, value, decoded, payload;
        return __generator(this, function (_b) {
            prefixes = {
                // tz1...
                edpk: {
                    length: 54,
                    prefix: Buffer.from(new Uint8Array([6, 161, 159]))
                },
                // tz2...
                sppk: {
                    length: 55,
                    prefix: Buffer.from(new Uint8Array([6, 161, 161]))
                },
                // tz3...
                p2pk: {
                    length: 55,
                    prefix: Buffer.from(new Uint8Array([6, 161, 164]))
                }
            };
            if (publicKey.length === 64) {
                prefix = prefixes.edpk.prefix;
                plainPublicKey = publicKey;
            }
            else {
                entries = Object.entries(prefixes);
                for (index = 0; index < entries.length; index++) {
                    _a = entries[index], key = _a[0], value = _a[1];
                    if (publicKey.startsWith(key) && publicKey.length === value.length) {
                        prefix = value.prefix;
                        decoded = bs58check.decode(publicKey);
                        plainPublicKey = decoded.slice(key.length, decoded.length).toString('hex');
                        break;
                    }
                }
            }
            if (!prefix || !plainPublicKey) {
                throw new Error("invalid publicKey: ".concat(publicKey));
            }
            payload = (0, blake2b_1.hash)(Buffer.from(plainPublicKey, 'hex'), 20);
            return [2 /*return*/, bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]))];
        });
    });
}
exports.getAddressFromPublicKey = getAddressFromPublicKey;
/**
 * Prefix the public key if it's not prefixed
 *
 * @param publicKey
 */
function prefixPublicKey(publicKey) {
    return __awaiter(this, void 0, void 0, function () {
        var payload;
        return __generator(this, function (_a) {
            if (publicKey.length !== 64) {
                return [2 /*return*/, publicKey];
            }
            payload = Buffer.from(publicKey, 'hex');
            return [2 /*return*/, bs58check.encode(Buffer.concat([new Uint8Array([13, 15, 37, 217]), Buffer.from(payload)]))];
        });
    });
}
exports.prefixPublicKey = prefixPublicKey;
/**
 * Get the recipient string used in the matrix message
 *
 * @param recipientHash
 * @param relayServer
 */
function recipientString(recipientHash, relayServer) {
    return "@".concat(recipientHash, ":").concat(relayServer);
}
exports.recipientString = recipientString;
var toBuffer = function (message) { return __awaiter(void 0, void 0, void 0, function () {
    var adjustedMessage, buffer;
    return __generator(this, function (_a) {
        if (message.length % 2 !== 0) {
            return [2 /*return*/, (0, utf8_1.encode)(message)];
        }
        adjustedMessage = message;
        if (message.startsWith('0x')) {
            adjustedMessage = message.slice(2);
        }
        buffer = Buffer.from(adjustedMessage, 'hex');
        if (buffer.length === adjustedMessage.length / 2) {
            return [2 /*return*/, buffer];
        }
        return [2 /*return*/, (0, utf8_1.encode)(message)];
    });
}); };
var coinlibhash = function (message, size) {
    if (size === void 0) { size = 32; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, blake2b_1.hash)(message, size)];
        });
    });
};
var signMessage = function (message, keypair) { return __awaiter(void 0, void 0, void 0, function () {
    var bufferMessage, edsigPrefix, hash, rawSignature, signature;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, toBuffer(message)];
            case 1:
                bufferMessage = _a.sent();
                edsigPrefix = new Uint8Array([9, 245, 205, 134, 18]);
                return [4 /*yield*/, coinlibhash(bufferMessage)];
            case 2:
                hash = _a.sent();
                rawSignature = (0, ed25519_3.sign)(keypair.secretKey, hash);
                signature = bs58check.encode(Buffer.concat([Buffer.from(edsigPrefix), Buffer.from(rawSignature)]));
                return [2 /*return*/, signature];
        }
    });
}); };
exports.signMessage = signMessage;
/* eslint-enable prefer-arrow/prefer-arrow-functions */
//# sourceMappingURL=crypto.js.map