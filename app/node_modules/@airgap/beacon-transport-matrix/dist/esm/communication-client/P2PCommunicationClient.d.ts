import { MatrixClientEvent, MatrixClientEventType, MatrixClientEventMessageContent } from '../matrix-client/models/MatrixClientEvent';
import { Storage, P2PPairingRequest, ExtendedP2PPairingResponse, P2PPairingResponse, NodeDistributions, Regions } from '@airgap/beacon-types';
import { CommunicationClient } from '@airgap/beacon-core';
import { ExposedPromise } from '@airgap/beacon-utils';
import { KeyPair } from '@stablelib/ed25519';
interface BeaconInfoResponse {
    region: string;
    known_servers: string[];
    timestamp: number;
}
/**
 * @internalapi
 */
export declare class P2PCommunicationClient extends CommunicationClient {
    private readonly name;
    readonly replicationCount: number;
    private readonly storage;
    private readonly iconUrl?;
    private readonly appUrl?;
    private client;
    private initialEvent;
    private initialListener;
    private selectedRegion?;
    private readonly ENABLED_RELAY_SERVERS;
    relayServer: ExposedPromise<{
        server: string;
        timestamp: number;
        localTimestamp: number;
    }> | undefined;
    private readonly activeListeners;
    private readonly ignoredRooms;
    private loginCounter;
    constructor(name: string, keyPair: KeyPair, replicationCount: number, storage: Storage, matrixNodes?: NodeDistributions, iconUrl?: string | undefined, appUrl?: string | undefined);
    getPairingRequestInfo(): Promise<P2PPairingRequest>;
    getPairingResponseInfo(request: P2PPairingRequest): Promise<P2PPairingResponse>;
    findBestRegion(): Promise<Regions>;
    getRelayServer(): Promise<{
        server: string;
        timestamp: number;
    }>;
    getBeaconInfo(server: string): Promise<BeaconInfoResponse>;
    tryJoinRooms(roomId: string, retry?: number): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    reset(): Promise<void>;
    listenForEncryptedMessage(senderPublicKey: string, messageCallback: (message: string) => void): Promise<void>;
    unsubscribeFromEncryptedMessage(senderPublicKey: string): Promise<void>;
    unsubscribeFromEncryptedMessages(): Promise<void>;
    sendMessage(message: string, peer: P2PPairingRequest | ExtendedP2PPairingResponse): Promise<void>;
    updatePeerRoom(sender: string, roomId: string): Promise<void>;
    deleteRoomIdFromRooms(roomId: string): Promise<void>;
    listenForChannelOpening(messageCallback: (pairingResponse: ExtendedP2PPairingResponse) => void): Promise<void>;
    waitForJoin(roomId: string, retry?: number): Promise<void>;
    sendPairingResponse(pairingRequest: P2PPairingRequest): Promise<void>;
    isTextMessage(content: MatrixClientEventMessageContent<any>): content is MatrixClientEventMessageContent<string>;
    updateRelayServer(sender: string): Promise<void>;
    isChannelOpenMessage(content: MatrixClientEventMessageContent<string>): Promise<boolean>;
    isSender(event: MatrixClientEvent<MatrixClientEventType.MESSAGE>, senderPublicKey: string): Promise<boolean>;
    private getRelevantRoom;
    private getRelevantJoinedRoom;
}
export {};
