import { Transport } from '@airgap/beacon-core';
import { ExtendedP2PPairingResponse, Storage, StorageKey, TransportType, P2PPairingRequest, NodeDistributions } from '@airgap/beacon-types';
import { P2PCommunicationClient } from '@airgap/beacon-transport-matrix';
import { KeyPair } from '@stablelib/ed25519';
/**
 * @internalapi
 *
 *
 */
export declare class P2PTransport<T extends P2PPairingRequest | ExtendedP2PPairingResponse, K extends StorageKey.TRANSPORT_P2P_PEERS_DAPP | StorageKey.TRANSPORT_P2P_PEERS_WALLET> extends Transport<T, K, P2PCommunicationClient> {
    readonly type: TransportType;
    constructor(name: string, keyPair: KeyPair, storage: Storage, matrixNodes: NodeDistributions, storageKey: K, iconUrl?: string, appUrl?: string);
    static isAvailable(): Promise<boolean>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    startOpenChannelListener(): Promise<void>;
    getPairingRequestInfo(): Promise<P2PPairingRequest>;
    listen(publicKey: string): Promise<void>;
}
