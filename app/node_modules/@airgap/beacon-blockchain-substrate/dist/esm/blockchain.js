var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { extensionList, desktopList, webList, iOSList } from './ui/alert/wallet-lists';
export class SubstrateBlockchain {
    constructor() {
        this.identifier = 'substrate';
    }
    validateRequest(input) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Validation
            if (input) {
                return;
            }
        });
    }
    handleResponse(input) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Validation
            if (input) {
                return;
            }
        });
    }
    getWalletLists() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                extensionList: extensionList,
                desktopList: desktopList,
                webList: webList,
                iOSList: iOSList
            };
        });
    }
    getAccountInfosFromPermissionResponse(permissionResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            return permissionResponse.blockchainData.accounts.map((account) => ({
                accountId: account.accountId,
                address: account.address,
                publicKey: account.publicKey
            }));
        });
    }
}
//# sourceMappingURL=blockchain.js.map